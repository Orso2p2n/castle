// Generated by Haxe 4.0.0 (git build development @ 476d18054)
if (process.version < "v4.0.0") console.warn("Module " + (typeof(module) == "undefined" ? "" : module.filename) + " requires node.js version 4.0.0 or higher");
(function ($global) { "use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedLeft: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return HxOverrides.substr(this.r.s,0,this.r.m.index);
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var vdom_Server = function(root) {
	this.root = root;
	this.nodes = [root];
	this.events = new haxe_ds_IntMap();
	this.serializer = new hxbit_Serializer();
};
$hxClasses["vdom.Server"] = vdom_Server;
vdom_Server.__name__ = ["vdom","Server"];
vdom_Server.prototype = {
	send: function(msg) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,encodeAnswer: function(msg) {
		this.serializer.begin();
		hxbit_enumSer_vdom_$Answer.doSerialize(this.serializer,msg);
		return this.serializer.end();
	}
	,decodeMessage: function(bytes) {
		this.serializer.setInput(bytes,0);
		var m = hxbit_enumSer_vdom_$Message.doUnserialize(this.serializer);
		this.serializer.setInput(null,0);
		return m;
	}
	,handleSpecial: function(e,name,args,result) {
	}
	,bindEvent: function(n,id,name,eid) {
		var _gthis = this;
		var callb = function(e) {
			var sendValue = false;
			var props = null;
			switch(name) {
			case "blur":
				if(n.tagName == "INPUT") {
					sendValue = true;
				}
				break;
			case "change":case "input":
				sendValue = true;
				break;
			case "keydown":
				props = { keyCode : e.keyCode, shiftKey : e.shiftKey, ctrlKey : e.ctrlKey};
				if(n.tagName == "INPUT") {
					sendValue = true;
				}
				break;
			case "mousedown":case "mouseup":
				props = { which : e.which};
				break;
			default:
			}
			if(sendValue) {
				_gthis.send(vdom_Answer.SetValue(id,"" + Std.string(Reflect.field(n,"value"))));
			}
			_gthis.send(vdom_Answer.Event(eid,props));
		};
		this.events.h[eid] = { name : name, callb : callb, n : n};
		n.addEventListener(name,callb);
	}
	,onMessage: function(msg) {
		var _gthis = this;
		switch(msg[1]) {
		case 0:
			var attr = msg[4];
			var name = msg[3];
			var id = msg[2];
			var n = window.document.createElement(name);
			if(attr != null) {
				var _g = 0;
				while(_g < attr.length) {
					var a = attr[_g];
					++_g;
					n.setAttribute(a.name,a.value);
				}
			}
			this.nodes[id] = n;
			break;
		case 1:
			var name1 = msg[3];
			var id1 = msg[2];
			this.nodes[id1].classList.add(name1);
			break;
		case 2:
			var name2 = msg[3];
			var id2 = msg[2];
			this.nodes[id2].classList.remove(name2);
			break;
		case 3:
			var to = msg[3];
			var id3 = msg[2];
			this.nodes[to].appendChild(this.nodes[id3]);
			break;
		case 4:
			var pos = msg[4];
			var to1 = msg[3];
			var id4 = msg[2];
			var p = this.nodes[to1];
			p.insertBefore(this.nodes[id4],p.childNodes[pos]);
			break;
		case 5:
			var pid = msg[4];
			var text = msg[3];
			var id5 = msg[2];
			var t = window.document.createTextNode(text);
			this.nodes[id5] = t;
			if(pid != null) {
				this.nodes[pid].appendChild(t);
			}
			break;
		case 6:
			var id6 = msg[2];
			var n1 = this.nodes[id6];
			while(n1.firstChild != null) n1.removeChild(n1.firstChild);
			break;
		case 7:
			var id7 = msg[2];
			this.nodes[id7].remove();
			break;
		case 8:
			var eid = msg[4];
			var name3 = msg[3];
			var id8 = msg[2];
			var n2 = this.nodes[id8];
			this.bindEvent(n2,id8,name3,eid);
			break;
		case 9:
			var val = msg[4];
			var att = msg[3];
			var id9 = msg[2];
			if(val == null) {
				this.nodes[id9].removeAttribute(att);
			} else {
				this.nodes[id9].setAttribute(att,val);
			}
			break;
		case 10:
			var val1 = msg[4];
			var s = msg[3];
			var id10 = msg[2];
			this.nodes[id10].style[s] = val1;
			break;
		case 11:
			var s1 = msg[3];
			var id11 = msg[2];
			var n3 = this.nodes[id11];
			var m = Reflect.field(n3,s1);
			if(m == null) {
				throw new js__$Boot_HaxeError(Std.string(n3) + " has no method " + Std.string(m));
			}
			m.apply(n3,[]);
			if(s1 == "focus" && n3.tagName == "SELECT") {
				var event = window.document.createEvent("MouseEvents");
				event.initMouseEvent("mousedown",true,true,window);
				n3.dispatchEvent(event);
			}
			break;
		case 12:
			var eid1 = msg[5];
			var args = msg[4];
			var name4 = msg[3];
			var id12 = msg[2];
			var tmp = eid1 == null ? function(_) {
			} : function(v) {
				_gthis.send(vdom_Answer.Event(eid1,{ value : v}));
			};
			this.handleSpecial(this.nodes[id12],name4,args,tmp);
			break;
		case 13:
			var duration = msg[4];
			var name5 = msg[3];
			var id13 = msg[2];
			this.handleSpecial(this.nodes[id13],"animate",[name5,duration],null);
			break;
		case 14:
			var eids = msg[3];
			var id14 = msg[2];
			this.nodes[id14].remove();
			this.nodes[id14] = null;
			if(eids != null) {
				this.onMessage(vdom_Message.Unbind(eids));
			}
			break;
		case 15:
			var eids1 = msg[2];
			var _g1 = 0;
			while(_g1 < eids1.length) {
				var eid2 = eids1[_g1];
				++_g1;
				var e = this.events.h[eid2];
				if(e != null) {
					this.events.remove(eid2);
					e.n.removeEventListener(e.name,e.callb);
				}
			}
			break;
		case 16:
			var msgs = msg[2];
			var _g2 = 0;
			while(_g2 < msgs.length) {
				var m1 = msgs[_g2];
				++_g2;
				this.onMessage(m1);
			}
			break;
		case 17:
			var val2 = msg[3];
			var id15 = msg[2];
			try {
				this.nodes[id15].value = val2;
			} catch( e1 ) {
				var e2 = (e1 instanceof js__$Boot_HaxeError) ? e1.val : e1;
			}
			break;
		}
	}
	,__class__: vdom_Server
};
var JqPage = function(sock) {
	vdom_Server.call(this,window.document.createElement("div"));
	this.sock = sock;
	this.page = window.document.createElement("div");
	this.page.setAttribute("class","jqpage");
	this.page.appendChild(this.root);
	window.document.body.appendChild(this.page);
	this.page.style.visibility = "hidden";
	this.name = "";
	this.panels = new haxe_ds_ObjectMap();
	this.dnodes = new haxe_ds_ObjectMap();
	this.dockManager = new dockspawn.DockManager(this.page);
	this.dockManager.initialize();
	this.dockManager.resize(800,600);
	this.dnodes.set(this.root,this.dockManager.context.model.documentManagerNode);
};
$hxClasses["JqPage"] = JqPage;
JqPage.__name__ = ["JqPage"];
JqPage.__super__ = vdom_Server;
JqPage.prototype = $extend(vdom_Server.prototype,{
	send: function(msg) {
		var bytes = this.encodeAnswer(msg);
		var buf = new js_node_buffer_Buffer(bytes.length + 2);
		buf[0] = bytes.length & 255;
		buf[1] = bytes.length >> 8;
		var _g1 = 0;
		var _g = buf.length;
		while(_g1 < _g) {
			var i = _g1++;
			buf[i + 2] = bytes.b[i];
		}
		this.sock.write(buf);
	}
	,onMessage: function(msg) {
		vdom_Server.prototype.onMessage.call(this,msg);
		if(msg[1] == 9) {
			if(msg[2] == 0) {
				if(msg[3] == "title") {
					var val = msg[4];
					this.tab.text(val);
				}
			}
		}
	}
	,bindEvent: function(n,id,name,eid) {
		var _gthis = this;
		if(name == "paneldock") {
			var p = this.panels.h[n.__id__];
			if(p == null) {
				return;
			}
			p.__onDestroy = function() {
				_gthis.send(vdom_Answer.Event(eid,{ }));
			};
		} else {
			vdom_Server.prototype.bindEvent.call(this,n,id,name,eid);
		}
	}
	,handleSpecial: function(e,name,args,result) {
		var _gthis = this;
		switch(name) {
		case "animate":
			var j = $(e);
			Reflect.field(j,args[0]).apply(j,[args[1]]);
			break;
		case "colorPick":
			var id = Std.random(1);
			e.innerHTML = "<div class=\"modal\" onclick=\"$('#_c" + id + "').spectrum('toggle')\"></div><input type=\"text\" id=\"_c" + id + "\"/>";
			var spect = $("#_c" + id);
			var val = args[0];
			var getColor = function(vcol) {
				return Std.parseInt("0x" + Std.string(vcol.toHex())) | (vcol.getAlpha() * 255 | 0) << 24;
			};
			spect.spectrum({ color : "rgba(" + [val >> 16 & 255,val >> 8 & 255,val & 255,(val >>> 24) / 255].join(",") + ")", showInput : true, showButtons : false, showAlpha : args[1], clickoutFiresChange : true, move : function(vcol1) {
				var tmp = getColor(vcol1);
				result({ color : tmp, done : false});
			}, change : function(vcol2) {
				spect.spectrum("hide");
				var tmp1 = getColor(vcol2);
				result({ color : tmp1, done : true});
			}, hide : function(vcol3) {
				var tmp2 = getColor(vcol3);
				result({ color : tmp2, done : true});
			}}).spectrum("show");
			break;
		case "dock":
			var dir = e.getAttribute("dock");
			if(dir == null) {
				var p = this.panels.h[e.__id__];
				if(p == null) {
					return;
				}
				this.panels.remove(e);
				this.dnodes.remove(e);
				try {
					p.onCloseButtonClicked();
				} catch( e1 ) {
					var e2 = (e1 instanceof js__$Boot_HaxeError) ? e1.val : e1;
				}
				return;
			}
			var parent = e.parentElement;
			var n = this.dnodes.h[parent.__id__];
			if(n == null) {
				console.log("JqPages.hx:250:","Could not dock:");
				console.log("JqPages.hx:251:",e);
				console.log("JqPages.hx:252:","to:");
				console.log("JqPages.hx:253:",parent);
				return;
			}
			var p1 = this.panels.h[e.__id__];
			if(p1 == null) {
				e.remove();
				p1 = new dockspawn.PanelContainer(e,this.dockManager);
				this.panels.set(e,p1);
			}
			var size = e.getAttribute("docksize");
			var size1 = size == null ? null : parseFloat(size);
			var n1;
			var _g = dir.toLowerCase();
			switch(_g) {
			case "down":
				n1 = this.dockManager.dockDown(n,p1,size1);
				break;
			case "left":
				n1 = this.dockManager.dockLeft(n,p1,size1);
				break;
			case "right":
				n1 = this.dockManager.dockRight(n,p1,size1);
				break;
			case "up":
				n1 = this.dockManager.dockUp(n,p1,size1);
				break;
			default:
				n1 = this.dockManager.dockFill(n,p1);
			}
			this.dnodes.set(e,n1);
			break;
		case "fileSave":case "fileSelect":
			var path = args[0];
			var ext = args[1] == null ? [] : args[1].split(",");
			var data = args[2];
			var saveAs = name == "fileSave";
			var fs = $("#fileSelect");
			if(path != null && StringTools.startsWith(window.navigator.platform,"Win")) {
				path = path.split("/").join("\\");
			}
			var fpath = new haxe_io_Path(path == null ? "" : path);
			fs.removeAttr("nwworkingdir");
			fs.removeAttr("nwsaveas");
			fs.attr("nwworkingdir",fpath.dir);
			if(saveAs && path != null) {
				fs.attr("nwsaveas",path);
			}
			if(this.prevSelectEvent != null) {
				this.prevSelectEvent(null);
			}
			this.prevSelectEvent = result;
			fs.val("");
			fs.off("change");
			fs.change(function(_) {
				_gthis.prevSelectEvent = null;
				fs.off("change");
				var path1 = fs.val().split("\\").join("/");
				fs.val("");
				if(path1 == "") {
					result(null);
					return;
				}
				if(saveAs) {
					if((data instanceof haxe_io_Bytes)) {
						var data1 = data;
						var _g4 = [];
						var _g6 = 0;
						var _g5 = data1.length;
						while(_g6 < _g5) {
							var i = _g6++;
							_g4.push(data1.b[i]);
						}
						var buf = new js_node_buffer_Buffer(_g4);
						js_node_Fs.writeFileSync(path1,buf);
					} else {
						js_node_Fs.writeFileSync(path1,data);
					}
				}
				fs.attr("nwworkingdir","");
				result(path1);
			}).click();
			break;
		case "popupMenu":
			var args1 = args;
			var n2 = new js_node_webkit_Menu();
			var _g1 = 0;
			var _g2 = args1.length;
			while(_g1 < _g2) {
				var i1 = [_g1++];
				var mit = new js_node_webkit_MenuItem({ label : args1[i1[0]]});
				n2.append(mit);
				mit.click = (function(i2) {
					return function() {
						result(i2[0]);
					};
				})(i1);
			}
			n2.popup(Main.inst.mousePos.x,Main.inst.mousePos.y);
			break;
		case "scrollIntoView":
			e.scrollIntoView();
			break;
		case "setName":
			name = args[0];
			if(this.tab != null) {
				this.tab.text(name);
			}
			break;
		case "startDrag":
			var document = window.document;
			var onMove = function(event) {
				if(document.pointerLockElement != e) {
					return;
				}
				result({ dx : event.movementX, dy : event.movementY});
			};
			var onUp = function() {
				document.exitPointerLock();
			};
			var onChange = null;
			onChange = function() {
				if(document.pointerLockElement == e) {
					document.addEventListener("mousemove",onMove,false);
					document.addEventListener("mouseup",onUp,false);
				} else {
					result({ dx : 0, dy : 0, done : true});
					document.removeEventListener("pointerlockchange",onChange,false);
					document.removeEventListener("mousemove",onMove,false);
					document.removeEventListener("mouseup",onUp,false);
				}
			};
			var onChange1 = onChange;
			document.addEventListener("pointerlockchange",onChange1,false);
			e.requestPointerLock();
			break;
		default:
			throw new js__$Boot_HaxeError("Don't know how to handle " + name + "(" + args.join(",") + ")");
		}
	}
	,__class__: JqPage
});
var JqPages = function(main) {
	this.curPage = -1;
	this.main = main;
	this.pages = [];
	js_node_Net.createServer($bind(this,this.onClient)).listen(6669,"127.0.0.1");
};
$hxClasses["JqPages"] = JqPages;
JqPages.__name__ = ["JqPages"];
JqPages.prototype = {
	updateTabs: function() {
		var _gthis = this;
		var sheets = $("ul#sheets");
		sheets.find("li.client").remove();
		var _g = 0;
		var _g1 = this.pages;
		while(_g < _g1.length) {
			var p = [_g1[_g]];
			++_g;
			var jc = p[0].name == "" ? "???" : p[0].name;
			var jc1 = [$("<li>").addClass("client").text(jc).appendTo(sheets)];
			p[0].tab = jc1[0];
			var tmp = (function(jc2,p1) {
				return function(e) {
					_gthis.curPage = Lambda.indexOf(_gthis.pages,p1[0]);
					$("#sheets li").removeClass("active");
					jc2[0].addClass("active");
					_gthis.select();
				};
			})(jc1,p);
			jc1[0].click(tmp);
			if(Lambda.indexOf(this.pages,p[0]) == this.curPage) {
				jc1[0].addClass("active");
			}
		}
	}
	,onKey: function(e) {
		this.pages[this.curPage].send(vdom_Answer.Event(-1,{ keyCode : e.keyCode, shiftKey : e.shiftKey, ctrlKey : e.ctrlKey}));
	}
	,select: function() {
		var p = this.pages[this.curPage];
		$("#content").html("").append(p.page);
		p.page.style.visibility = "";
		this.onResize();
	}
	,onResize: function() {
		if(this.curPage >= 0) {
			var p = this.pages[this.curPage];
			p.page.style.width = "100%";
			p.page.style.height = "100%";
			p.dockManager.resize(p.page.clientWidth,p.page.clientHeight - (30 + p.root.clientHeight));
		}
	}
	,onClient: function(sock) {
		var _gthis = this;
		var p = new JqPage(sock);
		this.pages.push(p);
		this.updateTabs();
		sock.setNoDelay(true);
		sock.on("error",function() {
			sock.end();
		});
		sock.on("close",function() {
			var cur = _gthis.curPage == Lambda.indexOf(_gthis.pages,p);
			p.page.remove();
			HxOverrides.remove(_gthis.pages,p);
			_gthis.updateTabs();
			if(cur) {
				_gthis.curPage--;
				_gthis.main.initContent();
			}
		});
		var curBuffer = null;
		var curPos = 0;
		var size = 0;
		var sizeCount = 0;
		sock.on("data",function(e) {
			var pos = 0;
			while(pos < e.length) if(curBuffer == null) {
				size |= e.readUInt8(pos++) << sizeCount * 8;
				sizeCount += 1;
				if(sizeCount == 4) {
					curBuffer = new haxe_io_Bytes(new ArrayBuffer(size));
					curPos = 0;
				}
			} else {
				var max = e.length - pos;
				if(max > curBuffer.length - curPos) {
					max = curBuffer.length - curPos;
				}
				var _g1 = 0;
				var _g = max;
				while(_g1 < _g) {
					var i = _g1++;
					curPos += 1;
					var pos1 = curPos - 1;
					var v = e.readUInt8(pos++);
					curBuffer.b[pos1] = v & 255;
				}
				if(curPos == curBuffer.length) {
					var tmp = p.decodeMessage(curBuffer);
					p.onMessage(tmp);
					curBuffer = null;
					sizeCount = 0;
					size = 0;
				}
			}
		});
	}
	,__class__: JqPages
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = ["Lambda"];
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
Lambda.list = function(it) {
	var l = new haxe_ds_List();
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		l.add(i1);
	}
	return l;
};
Lambda.exists = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return true;
		}
	}
	return false;
};
Lambda.indexOf = function(it,v) {
	var i = 0;
	var v2 = $getIterator(it);
	while(v2.hasNext()) {
		var v21 = v2.next();
		if(v == v21) {
			return i;
		}
		++i;
	}
	return -1;
};
Lambda.find = function(it,f) {
	var v = $getIterator(it);
	while(v.hasNext()) {
		var v1 = v.next();
		if(f(v1)) {
			return v1;
		}
	}
	return null;
};
var Level = function(model,sheet,index) {
	this.reloading = false;
	this.rotation = 0;
	this.flipMode = false;
	this.startPos = null;
	this.mousePos = { x : 0, y : 0};
	this.zoomView = 1.;
	this.sheet = sheet;
	this.sheetPath = sheet.getPath();
	this.index = index;
	this.obj = sheet.sheet.lines[index];
	this.model = model;
	this.references = [];
	this.palette = new lvl_Palette(this);
};
$hxClasses["Level"] = Level;
Level.__name__ = ["Level"];
Level.prototype = {
	getName: function() {
		var name = "#" + this.index;
		var _g = 0;
		var _g1 = this.sheet.sheet.columns;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var v = Reflect.field(this.obj,c.name);
			var _g2 = c.type;
			switch(_g2[1]) {
			case 0:
				name = v;
				break;
			case 1:case 6:
				if(c.name == this.sheet.sheet.props.displayColumn && v != null && v != "") {
					return Std.string(v) + "#" + this.index;
				}
				break;
			default:
			}
		}
		return name;
	}
	,set_mouseCapture: function(e) {
		var _gthis = this;
		this.mouseCapture = e;
		if(e != null) {
			var onUp = null;
			onUp = function(_) {
				window.document.removeEventListener("mouseup",onUp);
				if(_gthis.mouseCapture != null) {
					_gthis.mouseCapture.mouseup();
					_gthis.mouseCapture = null;
				}
			};
			var onUp1 = onUp;
			window.document.addEventListener("mouseup",onUp1);
		}
		return e;
	}
	,init: function() {
		var _gthis = this;
		this.layers = [];
		this.watchList = [];
		this.watchTimer = new haxe_Timer(50);
		this.watchTimer.run = $bind(this,this.checkWatch);
		var key = Level.loadedTilesCache.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			this.watchSplit(key1);
		}
		this.props = this.obj.props;
		if(this.props == null) {
			this.props = { };
			this.obj.props = this.props;
		}
		if(this.props.tileSize == null) {
			this.props.tileSize = 16;
		}
		this.tileSize = this.props.tileSize;
		var lprops = new haxe_ds_StringMap();
		if(this.props.layers == null) {
			this.props.layers = [];
		}
		var _g = 0;
		var _g1 = this.props.layers;
		while(_g < _g1.length) {
			var ld = _g1[_g];
			++_g;
			var key2 = ld.l;
			var prev = __map_reserved[key2] != null ? lprops.getReserved(key2) : lprops.h[key2];
			if(prev != null) {
				HxOverrides.remove(this.props.layers,prev);
			}
			var key3 = ld.l;
			if(__map_reserved[key3] != null) {
				lprops.setReserved(key3,ld);
			} else {
				lprops.h[key3] = ld;
			}
		}
		var getProps = function(name) {
			var p = __map_reserved[name] != null ? lprops.getReserved(name) : lprops.h[name];
			if(p == null) {
				p = { l : name, p : { alpha : 1.}};
				_gthis.props.layers.push(p);
			}
			lprops.remove(name);
			return p.p;
		};
		this.waitCount = 1;
		var title = "";
		var _g2 = 0;
		var _g11 = this.sheet.sheet.columns;
		while(_g2 < _g11.length) {
			var c = _g11[_g2];
			++_g2;
			var val = Reflect.field(this.obj,c.name);
			var _g21 = c.name;
			switch(_g21) {
			case "height":
				this.height = val;
				break;
			case "width":
				this.width = val;
				break;
			default:
			}
			var _g3 = c.type;
			switch(_g3[1]) {
			case 0:
				title = val;
				break;
			case 8:
				var _this = this.sheet;
				var sheet = _this.base.getSheet(_this.sheet.name + "@" + c.name);
				var floatCoord = false;
				var tmp;
				if(!(sheet.hasColumn("x",[cdb_ColumnType.TInt]) && sheet.hasColumn("y",[cdb_ColumnType.TInt]))) {
					floatCoord = sheet.hasColumn("x",[cdb_ColumnType.TFloat]) && sheet.hasColumn("y",[cdb_ColumnType.TFloat]);
					tmp = floatCoord;
				} else {
					tmp = true;
				}
				if(tmp) {
					var sid = null;
					var idCol = null;
					var _g31 = 0;
					var _g4 = sheet.sheet.columns;
					while(_g31 < _g4.length) {
						var cid = _g4[_g31];
						++_g31;
						var _g5 = cid.type;
						if(_g5[1] == 6) {
							var rid = _g5[2];
							sid = this.model.base.getSheet(rid);
							idCol = cid.name;
							break;
						}
					}
					var l = new lvl_LayerData(this,c.name,getProps(c.name),{ o : this.obj, f : c.name});
					l.hasFloatCoord = l.floatCoord = floatCoord;
					l.baseSheet = sheet;
					l.loadSheetData(sid);
					l.setObjectsData(idCol,val);
					l.hasSize = sheet.hasColumn("width",[floatCoord ? cdb_ColumnType.TFloat : cdb_ColumnType.TInt]) && sheet.hasColumn("height",[floatCoord ? cdb_ColumnType.TFloat : cdb_ColumnType.TInt]);
					this.layers.push(l);
				} else if(sheet.hasColumn("name",[cdb_ColumnType.TString]) && sheet.hasColumn("data",[cdb_ColumnType.TTileLayer])) {
					var val1 = val;
					var _g32 = 0;
					while(_g32 < val1.length) {
						var lobj = val1[_g32];
						++_g32;
						if(lobj.name == null) {
							continue;
						}
						var l1 = new lvl_LayerData(this,lobj.name,getProps(lobj.name),{ o : lobj, f : "data"});
						l1.setTilesData(lobj.data);
						l1.listColumnn = c;
						this.layers.push(l1);
					}
					this.newLayer = c;
				}
				break;
			case 12:
				var type = _g3[2];
				var l2 = new lvl_LayerData(this,c.name,getProps(c.name),{ o : this.obj, f : c.name});
				l2.loadSheetData(this.model.base.getSheet(type));
				l2.setLayerData(val);
				this.layers.push(l2);
				break;
			case 15:
				var l3 = new lvl_LayerData(this,c.name,getProps(c.name),{ o : this.obj, f : c.name});
				l3.setTilesData(val);
				this.layers.push(l3);
				break;
			default:
			}
		}
		var c1 = lprops.arrayKeys();
		var c2 = new haxe_ds__$StringMap_StringMapIterator(lprops,c1);
		while(c2.hasNext()) {
			var c3 = c2.next();
			HxOverrides.remove(this.props.layers,c3);
		}
		if(this.sheet.sheet.props.displayColumn != null) {
			var t = Reflect.field(this.obj,this.sheet.sheet.props.displayColumn);
			if(t != null) {
				title = t;
			}
		}
		this.palette.init();
		this.waitDone();
	}
	,watchSplit: function(key) {
		var _gthis = this;
		var file = key.split("@").shift();
		var abs = this.model.getAbsPath(file);
		this.watch(file,function() {
			lvl_Image.load(abs,function(_) {
				Level.loadedTilesCache.remove(key);
				_gthis.reload();
			},function() {
				var _g = 0;
				var _g1 = _gthis.watchList;
				while(_g < _g1.length) {
					var w = _g1[_g];
					++_g;
					if(w.path == abs) {
						w.time = 0;
					}
				}
			},true);
		});
	}
	,loadAndSplit: function(file,size,callb) {
		var key = file + "@" + size;
		var _this = Level.loadedTilesCache;
		var a = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(a == null) {
			a = { pending : [], data : null};
			var _this1 = Level.loadedTilesCache;
			if(__map_reserved[key] != null) {
				_this1.setReserved(key,a);
			} else {
				_this1.h[key] = a;
			}
			lvl_Image.load(this.model.getAbsPath(file),function(i) {
				var images = [];
				var blanks = [];
				var w = i.width / size | 0;
				var h = i.height / size | 0;
				var _g1 = 0;
				var _g = h;
				while(_g1 < _g) {
					var y = _g1++;
					var _g3 = 0;
					var _g2 = w;
					while(_g3 < _g2) {
						var x = _g3++;
						var i1 = i.sub(x * size,y * size,size,size);
						blanks[images.length] = i1.isBlank();
						images.push(i1);
					}
				}
				a.data = { w : w, h : h, img : images, blanks : blanks};
				var _g4 = 0;
				var _g11 = a.pending;
				while(_g4 < _g11.length) {
					var p = _g11[_g4];
					++_g4;
					p(w,h,images,blanks);
				}
				a.pending = [];
			},function() {
				throw new js__$Boot_HaxeError("Could not load " + file);
			});
			this.watchSplit(key);
		}
		if(a.data != null) {
			callb(a.data.w,a.data.h,a.data.img,a.data.blanks);
		} else {
			a.pending.push(callb);
		}
	}
	,reload: function() {
		if(!this.reloading) {
			this.reloading = true;
			var value = this.model;
			((value instanceof Main) ? value : null).initContent();
		}
	}
	,allocRef: function(f) {
		var r = { ref : f};
		this.references.push(r);
		return r;
	}
	,dispose: function() {
		if(this.content != null) {
			this.content.html("");
		}
		if(this.view != null) {
			this.view.dispose();
			this.view.viewport.parentNode.removeChild(this.view.viewport);
			this.view = null;
			var _g = 0;
			var _g1 = this.references;
			while(_g < _g1.length) {
				var r = _g1[_g];
				++_g;
				r.ref = null;
			}
		}
		this.watchTimer.stop();
		this.watchTimer = null;
	}
	,isDisposed: function() {
		return this.watchTimer == null;
	}
	,watch: function(path,callb) {
		path = this.model.getAbsPath(path);
		var _g = 0;
		var _g1 = this.watchList;
		while(_g < _g1.length) {
			var w = _g1[_g];
			++_g;
			if(w.path == path) {
				w.callb.push(callb);
				return;
			}
		}
		this.watchList.push({ path : path, time : this.getFileTime(path), callb : [callb]});
	}
	,checkWatch: function() {
		var _g = 0;
		var _g1 = this.watchList;
		while(_g < _g1.length) {
			var w = _g1[_g];
			++_g;
			var f = this.getFileTime(w.path);
			if(f != w.time && f != 0.) {
				w.time = f;
				js_node_webkit_App.clearCache();
				var _g2 = 0;
				var _g3 = w.callb;
				while(_g2 < _g3.length) {
					var c = _g3[_g2];
					++_g2;
					c();
				}
			}
		}
	}
	,getFileTime: function(path) {
		try {
			return js_node_Fs.statSync(path).mtime.getTime();
		} catch( e ) {
			var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
			return 0.;
		}
	}
	,wait: function() {
		this.waitCount++;
	}
	,waitDone: function() {
		if(--this.waitCount != 0) {
			return;
		}
		if(this.isDisposed()) {
			return;
		}
		this.setup();
		var layer = this.layers[0];
		var state;
		try {
			state = haxe_Unserializer.run(js_Browser.getLocalStorage().getItem(this.sheetPath + "#" + this.index));
		} catch( e ) {
			var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
			state = null;
		}
		if(state != null) {
			var _g = 0;
			var _g1 = this.layers;
			while(_g < _g1.length) {
				var l = _g1[_g];
				++_g;
				if(l.name == state.curLayer) {
					layer = l;
					break;
				}
			}
			this.zoomView = state.zoomView;
			this.palette.paintMode = state.paintMode;
			this.palette.randomMode = state.randomMode;
			this.palette.mode = state.paletteMode;
			this.palette.modeCursor = state.paletteModeCursor;
			this.palette.small = state.smallPalette;
			this.flipMode = state.flipMode;
			this.rotation = state.rotation;
			if(this.rotation == null) {
				this.rotation = 0;
			}
			if(this.palette.small == null) {
				this.palette.small = false;
			}
		}
		this.setLayer(layer);
		this.updateZoom();
		var sc = this.content.find(".scroll");
		if(state != null) {
			sc.scrollLeft(state.scrollX);
			sc.scrollTop(state.scrollY);
		}
		sc.scroll();
	}
	,toColor: function(v) {
		return "#" + StringTools.hex(v,6);
	}
	,hasHole: function(i,x,y) {
		var _g = -1;
		while(_g < 2) {
			var dx = _g++;
			var _g1 = -1;
			while(_g1 < 2) {
				var dy = _g1++;
				var x1 = x + dx;
				var y1 = y + dy;
				if(x1 >= 0 && y1 >= 0 && x1 < i.width && y1 < i.height && i.getPixel(x1,y1) >>> 24 != 0) {
					return false;
				}
			}
		}
		return true;
	}
	,pick: function(filter) {
		if(this.curPos == null) {
			return null;
		}
		var i = this.layers.length - 1;
		while(i >= 0) {
			var l = this.layers[i--];
			if(!l.enabled() || filter != null && !filter(l)) {
				continue;
			}
			var x = this.curPos.xf;
			var y = this.curPos.yf;
			var ix = (x - this.curPos.x) * this.tileSize | 0;
			var iy = (y - this.curPos.y) * this.tileSize | 0;
			var _g = l.data;
			switch(_g[1]) {
			case 0:
				var data = _g[2];
				var idx = this.curPos.x + this.curPos.y * this.width;
				var k = data[idx];
				if(k == 0 && i >= 0) {
					continue;
				}
				if(l.images != null) {
					var i1 = l.images[k];
					if(this.hasHole(i1,ix + (i1.width - this.tileSize >> 1),iy + (i1.height - this.tileSize))) {
						continue;
					}
				}
				return { k : k, layer : l, index : idx};
			case 1:
				var objs = [_g[3]];
				var idCol = _g[2];
				if(l.images == null) {
					var found = [];
					var _g1 = 0;
					var _g2 = objs[0].length;
					while(_g1 < _g2) {
						var i2 = _g1++;
						var o = objs[0][i2];
						var w = l.hasSize ? o.width : 1;
						var h = l.hasSize ? o.height : 1;
						if(x >= o.x && y >= o.y && x < o.x + w && y < o.y + h) {
							if(l.idToIndex == null) {
								found.push({ k : 0, layer : l, index : i2});
							} else {
								var key = Reflect.field(o,idCol);
								var _this = l.idToIndex;
								found.push({ k : __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key], layer : l, index : i2});
							}
						}
					}
					if(l.hasSize) {
						found.sort((function(objs1) {
							return function(f1,f2) {
								var o1 = objs1[0][f1.index];
								var o2 = objs1[0][f2.index];
								return Reflect.compare(o2.width * o2.height,o1.width * o1.height);
							};
						})(objs));
					}
					if(found.length > 0) {
						return found.pop();
					}
				} else {
					var max = objs[0].length - 1;
					var _g11 = 0;
					var _g3 = objs[0].length;
					while(_g11 < _g3) {
						var i3 = _g11++;
						var i4 = max - i3;
						var o3 = objs[0][i4];
						var key1 = Reflect.field(o3,idCol);
						var _this1 = l.idToIndex;
						var k1 = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
						if(k1 == null) {
							continue;
						}
						var img = l.images[k1];
						var w1 = img.width / this.tileSize;
						var h1 = img.height / this.tileSize;
						var ox = o3.x - (w1 - 1) * 0.5;
						var oy = o3.y - (h1 - 1);
						if(x >= ox && y >= oy && x < ox + w1 && y < oy + h1 && !this.hasHole(img,(x - ox) * this.tileSize | 0,(y - oy) * this.tileSize | 0)) {
							return { k : k1, layer : l, index : i4};
						}
					}
				}
				break;
			case 2:
				var data1 = _g[3];
				var idx1 = this.curPos.x + this.curPos.y * this.width;
				var k2 = data1[idx1] - 1;
				if(k2 < 0) {
					continue;
				}
				var i5 = l.images[k2];
				if(i5.getPixel(ix,iy) >>> 24 == 0) {
					continue;
				}
				return { k : k2, layer : l, index : idx1};
			case 3:
				var insts = _g[3];
				var objs2 = l.getTileObjects();
				var idx2 = insts.length;
				while(idx2 > 0) {
					var i6 = insts[--idx2];
					var o4 = objs2.h[i6.o];
					if(x >= i6.x && y >= i6.y && x < i6.x + (o4 == null ? 1 : o4.w) && y < i6.y + (o4 == null ? 1 : o4.h)) {
						var im = l.images[i6.o + (x - i6.x | 0) + (y - i6.y | 0) * l.stride];
						if(this.hasHole(im,ix,iy)) {
							continue;
						}
						return { k : i6.o, layer : l, index : idx2};
					}
				}
				break;
			}
		}
		return null;
	}
	,action: function(name,val) {
		var _gthis = this;
		var l = this.currentLayer;
		switch(name) {
		case "alpha":
			l.props.alpha = val / 100;
			this.model.save(false);
			this.draw();
			break;
		case "close":
			(js_Boot.__cast(this.model , Main)).closeLevel(this);
			break;
		case "file":
			var m = js_Boot.__cast(this.model , Main);
			m.chooseFile(function(path) {
				var _g = _gthis.currentLayer.data;
				switch(_g[1]) {
				case 2:
					var t = _g[2];
					if(t.file == null) {
						var size = _gthis.props.tileSize;
						t.stride = t.size * t.stride / size | 0;
						t.size = size;
					}
					t.file = path;
					_gthis.currentLayer.dirty = true;
					_gthis.save();
					_gthis.reload();
					break;
				case 3:
					var t1 = _g[2];
					if(t1.file == null) {
						var size1 = _gthis.props.tileSize;
						t1.stride = t1.size * t1.stride / size1 | 0;
						t1.size = size1;
					}
					t1.file = path;
					_gthis.currentLayer.dirty = true;
					_gthis.save();
					_gthis.reload();
					break;
				default:
				}
			});
			break;
		case "layer":
			if(this.newLayer == null) {
				return;
			}
			var opt = this.content.find(".submenu.newlayer");
			var hide = opt.is(":visible");
			this.content.find(".submenu").hide();
			if(hide) {
				this.content.find(".submenu.layer").show();
			} else {
				opt.show();
				this.content.find("[name=newName]").val("");
			}
			break;
		case "lock":
			l.lock = val;
			l.comp.toggleClass("locked",l.lock);
			l.saveState();
			break;
		case "lockGrid":
			l.floatCoord = l.hasFloatCoord && !val;
			l.saveState();
			break;
		case "mode":
			this.setLayerMode(val);
			break;
		case "options":
			var opt1 = this.content.find(".submenu.options");
			var hide1 = opt1.is(":visible");
			this.content.find(".submenu").hide();
			if(hide1) {
				this.content.find(".submenu.layer").show();
			} else {
				opt1.show();
				this.content.find("[name=tileSize]").val("" + this.tileSize);
			}
			break;
		case "size":
			var _g1 = l.data;
			switch(_g1[1]) {
			case 2:
				var t2 = _g1[2];
				var size2 = val;
				t2.stride = t2.size * t2.stride / size2 | 0;
				t2.size = size2;
				l.dirty = true;
				this.save();
				this.reload();
				break;
			case 3:
				var t3 = _g1[2];
				var size3 = val;
				t3.stride = t3.size * t3.stride / size3 | 0;
				t3.size = size3;
				l.dirty = true;
				this.save();
				this.reload();
				break;
			default:
			}
			break;
		case "visible":
			l.set_visible(val);
			l.saveState();
			this.draw();
			break;
		}
		$(":focus").blur();
	}
	,addNewLayer: function(name) {
		var _g = this.newLayer.type;
		if(_g[1] == 8) {
			var _this = this.sheet;
			var s = _this.base.getSheet(_this.sheet.name + "@" + this.newLayer.name);
			var o = { name : null, data : null};
			var _g1 = 0;
			var _g11 = s.sheet.columns;
			while(_g1 < _g11.length) {
				var c = _g11[_g1];
				++_g1;
				var v = this.model.base.getDefault(c);
				if(v != null) {
					o[c.name] = v;
				}
			}
			var a = Reflect.field(this.obj,this.newLayer.name);
			o.name = name;
			a.push(o);
			var n = a.length - 2;
			while(n >= 0) {
				var o2 = a[n--];
				if(o2.data != null) {
					var _g2 = [];
					var _g21 = 0;
					var _g12 = this.width * this.height;
					while(_g21 < _g12) {
						var k = _g21++;
						_g2.push(0);
					}
					var a1 = cdb__$Types_TileLayerData_$Impl_$.encode(_g2,this.model.compressionEnabled());
					o.data = { file : o2.data.file, size : o2.data.size, stride : o2.data.stride, data : a1};
					break;
				}
			}
			this.props.layers.push({ l : name, p : { alpha : 1.}});
			this.currentLayer = { name : name};
			this.savePrefs();
			this.save();
			this.reload();
		}
	}
	,popupLayer: function(l,mouseX,mouseY) {
		var _gthis = this;
		this.setLayer(l);
		var n = new js_node_webkit_Menu();
		var nclear = new js_node_webkit_MenuItem({ label : "Clear"});
		var ndel = new js_node_webkit_MenuItem({ label : "Delete"});
		var nshow = new js_node_webkit_MenuItem({ label : "Show Only"});
		var nshowAll = new js_node_webkit_MenuItem({ label : "Show All"});
		var nrename = new js_node_webkit_MenuItem({ label : "Rename"});
		var m = nshow;
		n.append(m);
		var m1 = nshowAll;
		n.append(m1);
		var m2 = nrename;
		n.append(m2);
		var m3 = nclear;
		n.append(m3);
		var m4 = ndel;
		n.append(m4);
		nclear.click = function() {
			var _g = l.data;
			switch(_g[1]) {
			case 0:
				var data = _g[2];
				var _g1 = 0;
				var _g2 = data.length;
				while(_g1 < _g2) {
					var i = _g1++;
					data[i] = 0;
				}
				break;
			case 1:
				var objs = _g[3];
				while(objs.length > 0) objs.pop();
				break;
			case 2:
				var data1 = _g[3];
				var _g11 = 0;
				var _g3 = data1.length;
				while(_g11 < _g3) {
					var i1 = _g11++;
					data1[i1] = 0;
				}
				break;
			case 3:
				var insts = _g[3];
				while(insts.length > 0) insts.pop();
				break;
			}
			l.dirty = true;
			_gthis.save();
			_gthis.draw();
		};
		ndel.enabled = l.listColumnn != null;
		ndel.click = function() {
			var layers = Reflect.field(_gthis.obj,l.listColumnn.name);
			HxOverrides.remove(layers,l.targetObj.o);
			_gthis.save();
			_gthis.reload();
		};
		nshow.click = function() {
			var _g4 = 0;
			var _g12 = _gthis.layers;
			while(_g4 < _g12.length) {
				var l2 = _g12[_g4];
				++_g4;
				l2.set_visible(l == l2);
				l2.saveState();
			}
			_gthis.draw();
		};
		nshowAll.click = function() {
			var _g5 = 0;
			var _g13 = _gthis.layers;
			while(_g5 < _g13.length) {
				var l21 = _g13[_g5];
				++_g5;
				l21.set_visible(true);
				l21.saveState();
			}
			_gthis.draw();
		};
		nrename.click = function() {
			l.comp.find("span").remove();
			l.comp.prepend($("<input type='text'>").val(l.name).focus().blur(function(_) {
				var n1 = StringTools.trim($(this).val());
				var _g6 = 0;
				var _g14 = _gthis.props.layers;
				while(_g6 < _g14.length) {
					var p = _g14[_g6];
					++_g6;
					if(p.l == n1) {
						_gthis.reload();
						return;
					}
				}
				var _g7 = 0;
				var _g15 = _gthis.props.layers;
				while(_g7 < _g15.length) {
					var p1 = _g15[_g7];
					++_g7;
					if(p1.l == l.name) {
						p1.l = n1;
					}
				}
				var layers1 = Reflect.field(_gthis.obj,_gthis.newLayer.name);
				var _g8 = 0;
				while(_g8 < layers1.length) {
					var l22 = layers1[_g8];
					++_g8;
					if(l22.name == l.name) {
						l22.name = n1;
					}
				}
				l.name = n1;
				_gthis.currentLayer = null;
				_gthis.setLayer(l);
				_gthis.save();
				_gthis.reload();
			}).keypress(function(e) {
				if(e.keyCode == 13) {
					$(this).blur();
				}
			}));
		};
		nrename.enabled = ndel.enabled;
		n.popup(mouseX,mouseY);
	}
	,onResize: function() {
		var win = js_node_webkit_Window.get();
		this.content.find(".scroll").css("height",win.height - 240 + "px");
	}
	,setSort: function(j,callb) {
		j.sortable({ vertical : false, onDrop : function(item,container,_super) {
			_super(item,container);
			callb.ref(null);
		}});
	}
	,spectrum: function(j,options,change,show) {
		options.change = function(c) {
			var change1 = change;
			var tmp = Std.parseInt("0x" + c.toHex());
			change1.ref(tmp);
		};
		if(show != null) {
			options.show = function() {
				show.ref(null);
			};
		}
		j.spectrum(options);
	}
	,setup: function() {
		var _gthis = this;
		var page = $("#content");
		page.html("");
		this.content = $($("#levelContent").html()).appendTo(page);
		var mlayers = this.content.find(".layers");
		var _g1 = 0;
		var _g = this.layers.length;
		while(_g1 < _g) {
			var index = _g1++;
			var l = [this.layers[index]];
			var td = $("<li class='item layer'>").appendTo(mlayers);
			l[0].comp = td;
			td.data("index",index);
			if(!l[0].visible) {
				td.addClass("hidden");
			}
			if(l[0].lock) {
				td.addClass("locked");
			}
			td.mousedown((function(l1) {
				return function(e) {
					var _g2 = e.which;
					switch(_g2) {
					case 1:
						_gthis.palette.mode = null;
						_gthis.setLayer(l1[0]);
						break;
					case 3:
						_gthis.popupLayer(l1[0],e.pageX | 0,e.pageY | 0);
						e.preventDefault();
						break;
					}
				};
			})(l));
			$("<span>").text(l[0].name).appendTo(td);
			if(l[0].images != null || l[0].colors == null) {
				td.find("span").css("margin-top","10px");
				continue;
			}
			var id = Level.UID++;
			var t = $("<input type=\"text\" id=\"_" + Level.UID++ + "\">").appendTo(td);
			var tmp = this.toColor(l[0].colors[l[0].current]);
			var _g21 = [];
			var _g3 = 0;
			var _g4 = l[0].colors;
			while(_g3 < _g4.length) {
				var c = _g4[_g3];
				++_g3;
				_g21.push(this.toColor(c));
			}
			var tmp1 = this.allocRef((function(l2) {
				return function(color) {
					var _g41 = 0;
					var _g31 = l2[0].colors.length;
					while(_g41 < _g31) {
						var i = _g41++;
						if(l2[0].colors[i] == color) {
							l2[0].set_current(i);
							_gthis.setLayer(l2[0]);
							return;
						}
					}
					_gthis.setLayer(l2[0]);
				};
			})(l));
			var tmp2 = this.allocRef((function(l3) {
				return function(_) {
					_gthis.setLayer(l3[0]);
				};
			})(l));
			this.spectrum(t,{ color : tmp, clickoutFiresChange : true, showButtons : false, showPaletteOnly : true, showPalette : true, palette : _g21},tmp1,tmp2);
		}
		var callb = this.allocRef(function(_1) {
			var indexes = [];
			var _g_i = 0;
			var _g_j = mlayers.find("li");
			while(_g_i < _g_j.length) {
				var i1 = $(_g_j[_g_i++]);
				indexes.push(i1.data("index"));
			}
			var _g5 = [];
			var _g22 = 0;
			var _g11 = _gthis.layers.length;
			while(_g22 < _g11) {
				var i2 = _g22++;
				_g5.push(_gthis.layers[indexes[i2]]);
			}
			_gthis.layers = _g5;
			var _g23 = 0;
			var _g12 = _gthis.layers.length;
			while(_g23 < _g12) {
				var i3 = _g23++;
				_gthis.layers[i3].comp.data("index",i3);
			}
			var groups = new haxe_ds_StringMap();
			var _g13 = 0;
			var _g24 = _gthis.layers;
			while(_g13 < _g24.length) {
				var l4 = _g24[_g13];
				++_g13;
				if(l4.listColumnn == null) {
					continue;
				}
				var key = l4.listColumnn.name;
				var g = __map_reserved[key] != null ? groups.getReserved(key) : groups.h[key];
				if(g == null) {
					g = [];
					var key1 = l4.listColumnn.name;
					if(__map_reserved[key1] != null) {
						groups.setReserved(key1,g);
					} else {
						groups.h[key1] = g;
					}
				}
				g.push(l4);
			}
			var g1 = groups.keys();
			while(g1.hasNext()) {
				var g2 = g1.next();
				var layers = __map_reserved[g2] != null ? groups.getReserved(g2) : groups.h[g2];
				var _g14 = [];
				var _g25 = 0;
				while(_g25 < layers.length) {
					var l5 = layers[_g25];
					++_g25;
					_g14.push(l5.targetObj.o);
				}
				var objs = _g14;
				_gthis.obj[g2] = objs;
			}
			_gthis.save();
			_gthis.draw();
		});
		this.setSort(mlayers,callb);
		var tmp3 = this.newLayer != null ? "block" : "none";
		this.content.find("[name=newlayer]").css({ display : tmp3});
		var scroll = this.content.find(".scroll");
		var scont = this.content.find(".scrollContent");
		this.view = lvl_Image3D.getInstance();
		scont.append(this.view.viewport);
		scroll.scroll(function(_2) {
			_gthis.savePrefs();
			_gthis.view.setScrollPos((scroll.scrollLeft() | 0) - 20,(scroll.scrollTop() | 0) - 20);
		});
		scroll[0].onmousewheel = function(e1) {
			if(e1.shiftKey) {
				_gthis.updateZoom(e1.wheelDelta > 0);
			}
		};
		var tmp4 = this.content.find("[name=color]");
		var tmp5 = this.allocRef(function(c1) {
			_gthis.currentLayer.props.color = c1;
			_gthis.save();
			_gthis.draw();
		});
		this.spectrum(tmp4,{ clickoutFiresChange : true, showButtons : false},tmp5);
		this.onResize();
		this.cursor = this.content.find("#cursor");
		this.cursorImage = new lvl_Image(0,0);
		this.cursorImage.set_smooth(false);
		this.tmpImage = new lvl_Image(0,0);
		this.cursor[0].appendChild(this.cursorImage.getCanvas());
		this.cursor.hide();
		scont.mouseleave(function(_3) {
			_gthis.curPos = null;
			if(_gthis.selection == null) {
				_gthis.cursor.hide();
			}
			$(".cursorPosition").text("");
		});
		scont.mousemove(function(e2) {
			_gthis.mousePos.x = e2.pageX | 0;
			_gthis.mousePos.y = e2.pageY | 0;
			_gthis.updateCursorPos();
		});
		var onMouseUp = function(_4) {
			_gthis.mouseDown = null;
			if(_gthis.currentLayer != null && _gthis.currentLayer.hasSize) {
				_gthis.setCursor();
			}
			if(_gthis.needSave) {
				_gthis.save();
			}
		};
		scroll.mousedown(function(e3) {
			if(_gthis.palette.mode != null) {
				_gthis.palette.mode = null;
				_gthis.setCursor();
				return;
			}
			var _g6 = e3.which;
			switch(_g6) {
			case 1:
				var l6 = _gthis.currentLayer;
				if(l6 == null) {
					return;
				}
				var o = l6.getSelObjects()[0];
				var w = o == null ? _gthis.currentLayer.currentWidth : o.w;
				var h = o == null ? _gthis.currentLayer.currentHeight : o.h;
				if(o == null && _gthis.palette.randomMode) {
					h = 1;
					w = h;
				}
				_gthis.mouseDown = { rx : _gthis.curPos == null ? 0 : _gthis.curPos.x % w, ry : _gthis.curPos == null ? 0 : _gthis.curPos.y % h, w : w, h : h};
				_gthis.set_mouseCapture(scroll);
				if(_gthis.curPos != null) {
					_gthis.set(_gthis.curPos.x,_gthis.curPos.y,e3.ctrlKey);
					_gthis.startPos = Reflect.copy(_gthis.curPos);
				}
				break;
			case 3:
				if(_gthis.selection != null) {
					_gthis.clearSelection();
					_gthis.draw();
					return;
				}
				var p = _gthis.pick();
				if(p != null) {
					p.layer.set_current(p.k);
					var _g7 = p.layer.data;
					if(_g7[1] == 3) {
						var insts = _g7[3];
						var i4 = insts[p.index];
						var obj = p.layer.getTileObjects().h[i4.o];
						if(obj != null) {
							p.layer.currentWidth = obj.w;
							p.layer.currentHeight = obj.h;
							p.layer.saveState();
						}
						_gthis.flipMode = i4.flip;
						_gthis.rotation = i4.rot;
					}
					_gthis.setLayer(p.layer);
				}
				break;
			}
		});
		this.content.mouseup(function(e4) {
			_gthis.set_mouseCapture(null);
			onMouseUp(e4);
			if(_gthis.curPos == null) {
				_gthis.startPos = null;
				return;
			}
			if(e4.which == 1 && _gthis.selection == null && _gthis.currentLayer.enabled() && _gthis.curPos.x >= 0 && _gthis.curPos.y >= 0) {
				_gthis.setObject();
			}
			_gthis.startPos = null;
			if(_gthis.selection != null) {
				_gthis.moveSelection();
				_gthis.save();
				_gthis.draw();
			}
		});
	}
	,setObject: function() {
		var _g = this.currentLayer.data;
		if(_g[1] == 1) {
			var objs = _g[3];
			var idCol = _g[2];
			var l = this.currentLayer;
			var fc = l.floatCoord;
			var px = fc ? this.curPos.xf : this.curPos.x;
			var py = fc ? this.curPos.yf : this.curPos.y;
			var w = 0.;
			var h = 0.;
			if(l.hasSize) {
				if(this.startPos == null) {
					return;
				}
				var sx = fc ? this.startPos.xf : this.startPos.x;
				var sy = fc ? this.startPos.yf : this.startPos.y;
				w = px - sx;
				h = py - sy;
				px = sx;
				py = sy;
				if(w < 0) {
					px += w;
					w = -w;
				}
				if(h < 0) {
					py += h;
					h = -h;
				}
				if(!fc) {
					++w;
					++h;
				}
				if(w < 0.5) {
					w = fc ? 0.5 : 1;
				}
				if(h < 0.5) {
					h = fc ? 0.5 : 1;
				}
			}
			var _g1 = 0;
			var _g2 = objs.length;
			while(_g1 < _g2) {
				var i = _g1++;
				var o = objs[i];
				if(o.x == px && o.y == py && w <= 1 && h <= 1) {
					this.editProps(l,i);
					this.setCursor();
					return;
				}
			}
			var o1 = { x : px, y : py};
			objs.push(o1);
			if(idCol != null) {
				o1[idCol] = l.indexToId[this.currentLayer.current];
			}
			var _g3 = 0;
			var _g11 = l.baseSheet.sheet.columns;
			while(_g3 < _g11.length) {
				var c = _g11[_g3];
				++_g3;
				if(c.opt || c.name == "x" || c.name == "y" || c.name == idCol) {
					continue;
				}
				var v = this.model.base.getDefault(c);
				if(v != null) {
					o1[c.name] = v;
				}
			}
			if(l.hasSize) {
				o1.width = w;
				o1.height = h;
				this.setCursor();
			}
			objs.sort(function(o11,o2) {
				var r = Reflect.compare(o11.y,o2.y);
				if(r == 0) {
					return Reflect.compare(o11.x,o2.x);
				} else {
					return r;
				}
			});
			if(this.hasProps(l,true)) {
				this.editProps(l,Lambda.indexOf(objs,o1));
			}
			this.save();
			this.draw();
		}
	}
	,deleteSelection: function() {
		var _g = 0;
		var _g1 = this.layers;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(!l.enabled()) {
				continue;
			}
			l.dirty = true;
			var sx = this.selection.x;
			var sy = this.selection.y;
			var sw = this.selection.w;
			var sh = this.selection.h;
			var _g2 = l.data;
			switch(_g2[1]) {
			case 0:
				var data = _g2[2];
				var sx1 = this.selection.x | 0;
				var sy1 = this.selection.y | 0;
				var sw1 = Math.ceil(this.selection.x + this.selection.w) - sx1;
				var sh1 = Math.ceil(this.selection.y + this.selection.h) - sy1;
				var _g3 = 0;
				var _g21 = sw1;
				while(_g3 < _g21) {
					var dx = _g3++;
					var _g5 = 0;
					var _g4 = sh1;
					while(_g5 < _g4) {
						var dy = _g5++;
						data[sx1 + dx + (sy1 + dy) * this.width] = 0;
					}
				}
				break;
			case 1:
				var objs = _g2[3];
				var _g22 = 0;
				var _g31 = objs.slice();
				while(_g22 < _g31.length) {
					var o = _g31[_g22];
					++_g22;
					var ow = l.hasSize ? o.width : 1;
					var oh = l.hasSize ? o.height : 1;
					if(sx + sw <= o.x || sy + sh <= o.y || sx >= o.x + ow || sy >= o.y + oh) {
						continue;
					}
					HxOverrides.remove(objs,o);
				}
				break;
			case 2:
				var data1 = _g2[3];
				var sx2 = this.selection.x | 0;
				var sy2 = this.selection.y | 0;
				var sw2 = Math.ceil(this.selection.x + this.selection.w) - sx2;
				var sh2 = Math.ceil(this.selection.y + this.selection.h) - sy2;
				var _g32 = 0;
				var _g23 = sw2;
				while(_g32 < _g23) {
					var dx1 = _g32++;
					var _g51 = 0;
					var _g41 = sh2;
					while(_g51 < _g41) {
						var dy1 = _g51++;
						data1[sx2 + dx1 + (sy2 + dy1) * this.width] = 0;
					}
				}
				break;
			case 3:
				var insts = _g2[3];
				var objs1 = l.getTileObjects();
				var _g24 = 0;
				var _g33 = insts.slice();
				while(_g24 < _g33.length) {
					var i = _g33[_g24];
					++_g24;
					var o1 = objs1.h[i.o];
					var ow1 = o1 == null ? 1 : o1.w;
					var oh1 = o1 == null ? 1 : o1.h;
					if(sx + sw <= i.x || sy + sh <= i.y || sx >= i.x + ow1 || sy >= i.y + oh1) {
						continue;
					}
					HxOverrides.remove(insts,i);
				}
				break;
			}
		}
	}
	,moveSelection: function() {
		var dx = this.selection.x - this.selection.sx;
		var dy = this.selection.y - this.selection.sy;
		if(dx == 0 && dy == 0) {
			return;
		}
		var ix = dx | 0;
		var iy = dy | 0;
		var _g = 0;
		var _g1 = this.layers;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(!l.enabled()) {
				continue;
			}
			var sx = this.selection.x;
			var sy = this.selection.y;
			var sw = this.selection.w;
			var sh = this.selection.h;
			l.dirty = true;
			var _g2 = l.data;
			switch(_g2[1]) {
			case 0:
				var data = _g2[2];
				var sx1 = this.selection.x | 0;
				var sy1 = this.selection.y | 0;
				var sw1 = Math.ceil(this.selection.x + this.selection.w) - sx1;
				var sh1 = Math.ceil(this.selection.y + this.selection.h) - sy1;
				var ndata = [];
				var _g3 = 0;
				var _g21 = this.height;
				while(_g3 < _g21) {
					var y = _g3++;
					var _g5 = 0;
					var _g4 = this.width;
					while(_g5 < _g4) {
						var x = _g5++;
						var k;
						if(x >= sx1 && x < sx1 + sw1 && y >= sy1 && y < sy1 + sh1) {
							var tx = x - ix;
							var ty = y - iy;
							if(tx >= 0 && tx < this.width && ty >= 0 && ty < this.height) {
								k = data[tx + ty * this.width];
							} else {
								k = 0;
							}
							if(k == 0 && !(x >= sx1 - ix && x < sx1 + sw1 - ix && y >= sy1 - iy && y < sy1 + sh1 - iy)) {
								k = data[x + y * this.width];
							}
						} else if(x >= sx1 - ix && x < sx1 + sw1 - ix && y >= sy1 - iy && y < sy1 + sh1 - iy) {
							k = 0;
						} else {
							k = data[x + y * this.width];
						}
						ndata.push(k);
					}
				}
				var _g31 = 0;
				var _g22 = data.length;
				while(_g31 < _g22) {
					var i = _g31++;
					data[i] = ndata[i];
				}
				break;
			case 1:
				var objs = _g2[3];
				sx -= dx;
				sy -= dy;
				var _g23 = 0;
				var _g32 = objs.slice();
				while(_g23 < _g32.length) {
					var o = _g32[_g23];
					++_g23;
					var ow = l.hasSize ? o.width : 1;
					var oh = l.hasSize ? o.height : 1;
					if(sx + sw <= o.x || sy + sh <= o.y || sx >= o.x + ow || sy >= o.y + oh) {
						continue;
					}
					o.x += l.hasFloatCoord ? dx : ix;
					o.y += l.hasFloatCoord ? dy : iy;
					if(o.x < 0 || o.y < 0 || o.x >= this.width || o.y >= this.height) {
						HxOverrides.remove(objs,o);
					}
				}
				break;
			case 2:
				var data1 = _g2[3];
				var sx2 = this.selection.x | 0;
				var sy2 = this.selection.y | 0;
				var sw2 = Math.ceil(this.selection.x + this.selection.w) - sx2;
				var sh2 = Math.ceil(this.selection.y + this.selection.h) - sy2;
				var ndata1 = [];
				var _g33 = 0;
				var _g24 = this.height;
				while(_g33 < _g24) {
					var y1 = _g33++;
					var _g51 = 0;
					var _g41 = this.width;
					while(_g51 < _g41) {
						var x1 = _g51++;
						var k1;
						if(x1 >= sx2 && x1 < sx2 + sw2 && y1 >= sy2 && y1 < sy2 + sh2) {
							var tx1 = x1 - ix;
							var ty1 = y1 - iy;
							if(tx1 >= 0 && tx1 < this.width && ty1 >= 0 && ty1 < this.height) {
								k1 = data1[tx1 + ty1 * this.width];
							} else {
								k1 = 0;
							}
							if(k1 == 0 && !(x1 >= sx2 - ix && x1 < sx2 + sw2 - ix && y1 >= sy2 - iy && y1 < sy2 + sh2 - iy)) {
								k1 = data1[x1 + y1 * this.width];
							}
						} else if(x1 >= sx2 - ix && x1 < sx2 + sw2 - ix && y1 >= sy2 - iy && y1 < sy2 + sh2 - iy) {
							k1 = 0;
						} else {
							k1 = data1[x1 + y1 * this.width];
						}
						ndata1.push(k1);
					}
				}
				var _g34 = 0;
				var _g25 = data1.length;
				while(_g34 < _g25) {
					var i1 = _g34++;
					data1[i1] = ndata1[i1];
				}
				break;
			case 3:
				var insts = _g2[3];
				sx -= dx;
				sy -= dy;
				var objs1 = l.getTileObjects();
				var _g26 = 0;
				var _g35 = insts.slice();
				while(_g26 < _g35.length) {
					var i2 = _g35[_g26];
					++_g26;
					var o1 = objs1.h[i2.o];
					var ow1 = o1 == null ? 1 : o1.w;
					var oh1 = o1 == null ? 1 : o1.h;
					if(sx + sw <= i2.x || sy + sh <= i2.y || sx >= i2.x + ow1 || sy >= i2.y + oh1) {
						continue;
					}
					i2.x += l.hasFloatCoord ? dx : ix;
					i2.y += l.hasFloatCoord ? dy : iy;
					if(i2.x < 0 || i2.y < 0 || i2.x >= this.width || i2.y >= this.height) {
						HxOverrides.remove(insts,i2);
					}
				}
				break;
			}
		}
		this.save();
		this.draw();
	}
	,updateCursorPos: function() {
		if(this.currentLayer == null) {
			return;
		}
		var off = $(this.view.getCanvas()).parent().offset();
		var cxf = ((this.mousePos.x - off.left) / this.zoomView | 0) / this.tileSize;
		var cyf = ((this.mousePos.y - off.top) / this.zoomView | 0) / this.tileSize;
		var cx = cxf | 0;
		var cy = cyf | 0;
		if(cx < this.width && cy < this.height) {
			this.cursor.show();
			var fc = this.currentLayer.floatCoord;
			var border = 0;
			var ccx = fc ? cxf : cx;
			var ccy = fc ? cyf : cy;
			if(ccx < 0) {
				ccx = 0;
			}
			if(ccy < 0) {
				ccy = 0;
			}
			if(fc) {
				if(ccx > this.width) {
					ccx = this.width;
				}
				if(ccy > this.height) {
					ccy = this.height;
				}
			} else {
				if(ccx >= this.width) {
					ccx = this.width - 1;
				}
				if(ccy >= this.height) {
					ccy = this.height - 1;
				}
			}
			if(this.currentLayer.hasSize && this.mouseDown != null) {
				var px = fc ? this.startPos.xf : this.startPos.x;
				var py = fc ? this.startPos.yf : this.startPos.y;
				var pw = (fc ? cxf : cx) - px;
				var ph = (fc ? cyf : cy) - py;
				if(pw < 0) {
					px += pw;
					pw = -pw;
				}
				if(ph < 0) {
					py += ph;
					ph = -ph;
				}
				if(!fc) {
					++pw;
					++ph;
				}
				if(pw < 0.5) {
					pw = fc ? 0.5 : 1;
				}
				if(ph < 0.5) {
					ph = fc ? 0.5 : 1;
				}
				ccx = px;
				ccy = py;
				this.cursorImage.setSize(pw * this.tileSize * this.zoomView | 0,ph * this.tileSize * this.zoomView | 0);
			}
			if(this.currentLayer.images == null) {
				border = 1;
			}
			this.cursor.css({ marginLeft : (ccx * this.tileSize * this.zoomView - border | 0) + "px", marginTop : (ccy * this.tileSize * this.zoomView - border | 0) + "px"});
			this.curPos = { x : cx, y : cy, xf : cxf, yf : cyf};
			this.content.find(".cursorPosition").text(cx + "," + cy);
			if(this.mouseDown != null) {
				this.set((cx / this.mouseDown.w | 0) * this.mouseDown.w + this.mouseDown.rx,(cy / this.mouseDown.h | 0) * this.mouseDown.h + this.mouseDown.ry,false);
			}
			if(this.deleteMode != null) {
				this.doDelete();
			}
		} else {
			this.cursor.hide();
			this.curPos = null;
			this.content.find(".cursorPosition").text("");
		}
		if(this.selection != null) {
			var fc1 = this.currentLayer.floatCoord;
			var ccx1 = fc1 ? cxf : cx;
			var ccy1 = fc1 ? cyf : cy;
			if(ccx1 < 0) {
				ccx1 = 0;
			}
			if(ccy1 < 0) {
				ccy1 = 0;
			}
			if(fc1) {
				if(ccx1 > this.width) {
					ccx1 = this.width;
				}
				if(ccy1 > this.height) {
					ccy1 = this.height;
				}
			} else {
				if(ccx1 >= this.width) {
					ccx1 = this.width - 1;
				}
				if(ccy1 >= this.height) {
					ccy1 = this.height - 1;
				}
			}
			if(!this.selection.down) {
				if(this.startPos != null) {
					this.selection.x = this.selection.sx + (ccx1 - this.startPos.x);
					this.selection.y = this.selection.sy + (ccy1 - this.startPos.y);
				} else {
					this.selection.sx = this.selection.x;
					this.selection.sy = this.selection.y;
				}
				this.setCursor();
				return;
			}
			var x0 = ccx1 < this.selection.sx ? ccx1 : this.selection.sx;
			var y0 = ccy1 < this.selection.sy ? ccy1 : this.selection.sy;
			var x1 = ccx1 < this.selection.sx ? this.selection.sx : ccx1;
			var y1 = ccy1 < this.selection.sy ? this.selection.sy : ccy1;
			this.selection.x = x0;
			this.selection.y = y0;
			this.selection.w = x1 - x0;
			this.selection.h = y1 - y0;
			if(!fc1) {
				this.selection.w += 1;
				this.selection.h += 1;
			}
			this.setCursor();
		}
	}
	,hasProps: function(l,required) {
		if(required == null) {
			required = false;
		}
		var idCol;
		var _g = l.data;
		if(_g[1] == 1) {
			var idCol1 = _g[2];
			idCol = idCol1;
		} else {
			idCol = null;
		}
		var _g1 = 0;
		var _g2 = l.baseSheet.sheet.columns;
		while(_g1 < _g2.length) {
			var c = _g2[_g1];
			++_g1;
			if(c.name != "x" && c.name != "y" && c.name != idCol && (!required || !c.opt && this.model.base.getDefault(c) == null)) {
				return true;
			}
		}
		return false;
	}
	,editProps: function(l,index) {
		var _gthis = this;
		if(!this.hasProps(l)) {
			return;
		}
		var o = Reflect.field(this.obj,l.name)[index];
		var scroll = this.content.find(".scrollContent");
		var popup = $("<div>").addClass("popup").prependTo(scroll);
		$(window).on("mousedown",null,function(_) {
			popup.remove();
			$(window).off("mousedown");
			if(_gthis.view != null) {
				_gthis.draw();
			}
		});
		popup.mousedown(function(e) {
			e.stopPropagation();
		});
		popup.mouseup(function(e1) {
			e1.stopPropagation();
		});
		popup.click(function(e2) {
			e2.stopPropagation();
		});
		var table = $("<table>").appendTo(popup);
		var value = this.model;
		var main = (value instanceof Main) ? value : null;
		var _g = 0;
		var _g1 = l.baseSheet.sheet.columns;
		while(_g < _g1.length) {
			var c = [_g1[_g]];
			++_g;
			var tr = $("<tr>").appendTo(table);
			var th = $("<th>").text(c[0].name).appendTo(tr);
			var td = [$("<td>").html(main.valueHtml(c[0],Reflect.field(o,c[0].name),l.baseSheet,o)).appendTo(tr)];
			var tmp = (function(td1,c1) {
				return function(e3) {
					var psheet = new cdb_Sheet(null,{ columns : l.baseSheet.sheet.columns, props : l.baseSheet.sheet.props, name : l.baseSheet.sheet.name, lines : Reflect.field(_gthis.obj,l.name), separators : []},l.baseSheet.getPath() + ":" + index,{ sheet : _gthis.sheet, column : Lambda.indexOf(_gthis.sheet.sheet.columns,Lambda.find(_gthis.sheet.sheet.columns,(function() {
						return function(c2) {
							return c2.name == l.name;
						};
					})())), line : index});
					main.editCell(c1[0],td1[0],psheet,index);
					e3.preventDefault();
					e3.stopPropagation();
				};
			})(td,c);
			td[0].click(tmp);
		}
		var x = (o.x + 1) * this.tileSize * this.zoomView;
		var y = (o.y + 1) * this.tileSize * this.zoomView;
		var cw = this.width * this.tileSize * this.zoomView;
		var ch = this.height * this.tileSize * this.zoomView;
		if(x > cw - popup.width() - 30) {
			x = cw - popup.width() - 30;
		}
		if(y > ch - popup.height() - 30) {
			y = ch - popup.height() - 30;
		}
		var scroll1 = this.content.find(".scroll");
		if(x < scroll1.scrollLeft() + 20) {
			x = scroll1.scrollLeft() + 20;
		}
		if(y < scroll1.scrollTop() + 20) {
			y = scroll1.scrollTop() + 20;
		}
		if(x + popup.width() > scroll1.scrollLeft() + scroll1.width() - 20) {
			x = scroll1.scrollLeft() + scroll1.width() - 20 - popup.width();
		}
		if(y + popup.height() > scroll1.scrollTop() + scroll1.height() - 20) {
			y = scroll1.scrollTop() + scroll1.height() - 20 - popup.height();
		}
		popup.css({ marginLeft : (x | 0) + "px", marginTop : (y | 0) + "px"});
	}
	,updateZoom: function(f) {
		var tx = 0;
		var ty = 0;
		var sc = this.content.find(".scroll");
		if(f != null) {
			$(".popup").remove();
			var width = sc.width();
			var height = sc.height();
			var cx = (sc.scrollLeft() + width * 0.5) / this.zoomView;
			var cy = (sc.scrollTop() + height * 0.5) / this.zoomView;
			if(f) {
				this.zoomView *= 1.2;
			} else {
				this.zoomView /= 1.2;
			}
			tx = Math.round(cx * this.zoomView - width * 0.5);
			ty = Math.round(cy * this.zoomView - height * 0.5);
		}
		this.savePrefs();
		this.view.setSize(this.width * this.tileSize * this.zoomView | 0,this.height * this.tileSize * this.zoomView | 0);
		this.view.set_zoom(this.zoomView);
		this.draw();
		this.updateCursorPos();
		this.setCursor();
		if(f != null) {
			sc.scrollLeft(tx);
			sc.scrollTop(ty);
		}
	}
	,paint: function(x,y) {
		var l = this.currentLayer;
		if(!l.enabled()) {
			return;
		}
		var _g = l.data;
		switch(_g[1]) {
		case 0:
			var data = _g[2];
			var k = data[x + y * this.width];
			if(k == l.current || l.blanks[l.current]) {
				return;
			}
			var todo = [x,y];
			while(todo.length > 0) {
				var y1 = todo.pop();
				var x1 = todo.pop();
				if(data[x1 + y1 * this.width] != k) {
					continue;
				}
				data[x1 + y1 * this.width] = l.current;
				l.dirty = true;
				if(x1 > 0) {
					todo.push(x1 - 1);
					todo.push(y1);
				}
				if(y1 > 0) {
					todo.push(x1);
					todo.push(y1 - 1);
				}
				if(x1 < this.width - 1) {
					todo.push(x1 + 1);
					todo.push(y1);
				}
				if(y1 < this.height - 1) {
					todo.push(x1);
					todo.push(y1 + 1);
				}
			}
			this.save();
			this.draw();
			break;
		case 2:
			var data1 = _g[3];
			var k1 = data1[x + y * this.width];
			if(k1 == l.current + 1 || l.blanks[l.current]) {
				return;
			}
			var px = x;
			var py = y;
			var zero = [];
			var todo1 = [x,y];
			while(todo1.length > 0) {
				var y2 = todo1.pop();
				var x2 = todo1.pop();
				if(data1[x2 + y2 * this.width] != k1) {
					continue;
				}
				var dx = (x2 - px) % l.currentWidth;
				if(dx < 0) {
					dx += l.currentWidth;
				}
				var dy = (y2 - py) % l.currentHeight;
				if(dy < 0) {
					dy += l.currentHeight;
				}
				var t = l.current + (this.palette.randomMode ? Std.random(l.currentWidth) + Std.random(l.currentHeight) * l.stride : dx + dy * l.stride);
				if(l.blanks[t]) {
					zero.push(x2 + y2 * this.width);
				}
				data1[x2 + y2 * this.width] = t + 1;
				l.dirty = true;
				if(x2 > 0) {
					todo1.push(x2 - 1);
					todo1.push(y2);
				}
				if(y2 > 0) {
					todo1.push(x2);
					todo1.push(y2 - 1);
				}
				if(x2 < this.width - 1) {
					todo1.push(x2 + 1);
					todo1.push(y2);
				}
				if(y2 < this.height - 1) {
					todo1.push(x2);
					todo1.push(y2 + 1);
				}
			}
			var _g1 = 0;
			while(_g1 < zero.length) {
				var z = zero[_g1];
				++_g1;
				data1[z] = 0;
			}
			this.save();
			this.draw();
			break;
		default:
		}
	}
	,onKey: function(e) {
		var _gthis = this;
		var l = this.currentLayer;
		if(e.ctrlKey) {
			var _g = e.keyCode;
			switch(_g) {
			case 46:
				var p = this.pick();
				if(p != null) {
					this.deleteAll(p.layer,p.k,p.index);
				}
				break;
			case 115:
				this.action("close");
				break;
			}
			return;
		}
		if($("input[type=text]:focus").length > 0 || this.currentLayer == null) {
			return;
		}
		$(".popup").remove();
		var l1 = this.currentLayer;
		var _g1 = e.keyCode;
		switch(_g1) {
		case 9:
			var i = (this.layers.indexOf(l1) + (e.shiftKey ? this.layers.length - 1 : 1)) % this.layers.length;
			this.setLayer(this.layers[i]);
			e.preventDefault();
			e.stopPropagation();
			break;
		case 27:
			this.clearSelection();
			this.draw();
			break;
		case 32:
			e.preventDefault();
			if(this.spaceDown) {
				return;
			}
			this.spaceDown = true;
			var canvas = $(this.view.getCanvas());
			canvas.css({ cursor : "move"});
			this.cursor.hide();
			var s = canvas.closest(".scroll");
			var curX = null;
			var curY = null;
			canvas.on("mousemove",null,function(e1) {
				var tx = e1.pageX;
				var ty = e1.pageY;
				if(curX == null) {
					curX = tx;
					curY = ty;
				}
				var dx = tx - curX;
				var dy = ty - curY;
				var tmp = s.scrollLeft() - dx;
				s.scrollLeft(tmp);
				var tmp1 = s.scrollTop() - dy;
				s.scrollTop(tmp1);
				curX += dx;
				curY += dy;
				_gthis.mousePos.x = e1.pageX;
				_gthis.mousePos.y = e1.pageY;
				e1.stopPropagation();
			});
			break;
		case 37:
			e.preventDefault();
			var w = l1.currentWidth;
			var h = l1.currentHeight;
			if(l1.current % l1.stride > w - 1) {
				var _g2 = l1;
				_g2.set_current(_g2.current - w);
				if(w != 1 || h != 1) {
					l1.currentWidth = w;
					l1.currentHeight = h;
					l1.saveState();
				}
				this.setCursor();
			}
			break;
		case 38:
			e.preventDefault();
			var w1 = l1.currentWidth;
			var h1 = l1.currentHeight;
			if(l1.current >= l1.stride * h1) {
				var _g3 = l1;
				_g3.set_current(_g3.current - l1.stride * h1);
				if(w1 != 1 || h1 != 1) {
					l1.currentWidth = w1;
					l1.currentHeight = h1;
					l1.saveState();
				}
				this.setCursor();
			}
			break;
		case 39:
			e.preventDefault();
			var w2 = l1.currentWidth;
			var h2 = l1.currentHeight;
			if(l1.current % l1.stride < l1.stride - w2 && l1.images != null && l1.current + w2 < l1.images.length) {
				var _g4 = l1;
				_g4.set_current(_g4.current + w2);
				if(w2 != 1 || h2 != 1) {
					l1.currentWidth = w2;
					l1.currentHeight = h2;
					l1.saveState();
				}
				this.setCursor();
			}
			break;
		case 40:
			e.preventDefault();
			var w3 = l1.currentWidth;
			var h3 = l1.currentHeight;
			if(l1.images != null && l1.current + l1.stride * h3 < l1.images.length) {
				var _g5 = l1;
				_g5.set_current(_g5.current + l1.stride * h3);
				if(w3 != 1 || h3 != 1) {
					l1.currentWidth = w3;
					l1.currentHeight = h3;
					l1.saveState();
				}
				this.setCursor();
			}
			break;
		case 46:
			if(this.selection != null) {
				this.deleteSelection();
				this.clearSelection();
				this.save();
				this.draw();
				return;
			}
			break;
		case 68:
			if(this.currentLayer.hasRotFlip) {
				this.rotation++;
				this.rotation %= 4;
				this.savePrefs();
			}
			this.setCursor();
			break;
		case 70:
			if(this.currentLayer.hasRotFlip) {
				this.flipMode = !this.flipMode;
				this.savePrefs();
			}
			this.setCursor();
			break;
		case 71:
			if(l1.hasFloatCoord) {
				this.action("lockGrid",l1.floatCoord);
				this.content.find("[name=lockGrid]").prop("checked",!l1.floatCoord);
			}
			break;
		case 73:
			this.paletteOption("small");
			break;
		case 76:
			this.action("lock",!l1.lock);
			this.content.find("[name=lock]").prop("checked",l1.lock);
			break;
		case 79:
			if(this.palette != null && l1.tileProps != null) {
				var mode = "object";
				var found = false;
				var _g6 = 0;
				var _g11 = l1.tileProps.sets;
				while(_g6 < _g11.length) {
					var t = _g11[_g6];
					++_g6;
					if(t.x + t.y * l1.stride == l1.current && t.t == mode) {
						found = true;
						HxOverrides.remove(l1.tileProps.sets,t);
						break;
					}
				}
				if(!found) {
					l1.tileProps.sets.push({ x : l1.current % l1.stride, y : l1.current / l1.stride | 0, w : l1.currentWidth, h : l1.currentHeight, t : mode, opts : { }});
					var _g7 = 0;
					var _g12 = this.layers;
					while(_g7 < _g12.length) {
						var l2 = _g12[_g7];
						++_g7;
						if(l2.tileProps == l1.tileProps) {
							var _g21 = l2.data;
							if(_g21[1] == 3) {
								var insts = _g21[3];
								var found1 = [];
								var _g22 = 0;
								while(_g22 < insts.length) {
									var i1 = insts[_g22];
									++_g22;
									if(i1.o == l1.current) {
										found1.push({ x : i1.x, y : i1.y, i : []});
									} else {
										var d = i1.o - l1.current;
										var dx1 = d % l1.stride;
										var dy1 = d / l1.stride | 0;
										var _g31 = 0;
										while(_g31 < found1.length) {
											var f = found1[_g31];
											++_g31;
											if(f.x == i1.x - dx1 && f.y == i1.y - dy1) {
												f.i.push(i1);
											}
										}
									}
								}
								var count = l1.currentWidth * l1.currentHeight - 1;
								var _g23 = 0;
								while(_g23 < found1.length) {
									var f1 = found1[_g23];
									++_g23;
									if(f1.i.length == count) {
										var _g32 = 0;
										var _g41 = f1.i;
										while(_g32 < _g41.length) {
											var i2 = _g41[_g32];
											++_g32;
											l2.dirty = true;
											HxOverrides.remove(insts,i2);
										}
									}
								}
							}
						}
					}
				}
				this.setCursor();
				this.save();
				this.draw();
			}
			break;
		case 82:
			this.paletteOption("random");
			break;
		case 86:
			this.action("visible",!l1.visible);
			this.content.find("[name=visible]").prop("checked",l1.visible);
			break;
		case 107:
			this.updateZoom(true);
			break;
		case 109:
			this.updateZoom(false);
			break;
		case 111:
			this.zoomView = 1;
			this.updateZoom();
			break;
		default:
		}
		if(this.curPos == null) {
			return;
		}
		var _g13 = e.keyCode;
		switch(_g13) {
		case 46:
			if(this.deleteMode != null) {
				return;
			}
			this.deleteMode = { l : null};
			this.doDelete();
			break;
		case 69:
			var p1 = this.pick(function(l3) {
				var _g14 = l3.data;
				if(_g14[1] == 1) {
					return _gthis.hasProps(l3);
				} else {
					return false;
				}
			});
			if(p1 == null) {
				return;
			}
			var _g15 = p1.layer.data;
			if(_g15[1] == 1) {
				var objs = _g15[3];
				$(".popup").remove();
				this.editProps(p1.layer,p1.index);
			}
			break;
		case 80:
			this.paint(this.curPos.x,this.curPos.y);
			break;
		case 83:
			if(this.selection != null) {
				if(this.selection.down) {
					return;
				}
				this.clearSelection();
			}
			var x = l1.floatCoord ? this.curPos.xf : this.curPos.x;
			var y = l1.floatCoord ? this.curPos.yf : this.curPos.y;
			this.selection = { sx : x, sy : y, x : x, y : y, w : 1, h : 1, down : true};
			this.cursor.addClass("select");
			this.setCursor();
			break;
		default:
		}
	}
	,clearSelection: function() {
		this.selection = null;
		this.cursor.removeClass("select");
		this.cursor.css({ width : "auto", height : "auto"});
		this.setCursor();
	}
	,deleteAll: function(l,k,index) {
		var _g = l.data;
		switch(_g[1]) {
		case 0:
			var data = _g[2];
			var _g1 = 0;
			var _g2 = this.width * this.height;
			while(_g1 < _g2) {
				var i = _g1++;
				if(data[i] == k + 1) {
					data[i] = 0;
				}
			}
			break;
		case 1:
			var objs = _g[3];
			return;
		case 2:
			var data1 = _g[3];
			var _g11 = 0;
			var _g3 = this.width * this.height;
			while(_g11 < _g3) {
				var i1 = _g11++;
				if(data1[i1] == k + 1) {
					data1[i1] = 0;
				}
			}
			break;
		case 3:
			var insts = _g[3];
			var _g4 = 0;
			var _g12 = insts.slice();
			while(_g4 < _g12.length) {
				var i2 = _g12[_g4];
				++_g4;
				if(i2.o == k) {
					HxOverrides.remove(insts,i2);
				}
			}
			break;
		}
		l.dirty = true;
		this.save();
		this.draw();
	}
	,doDelete: function() {
		var _gthis = this;
		var p = this.pick(this.deleteMode.l == null ? null : function(l2) {
			return l2 == _gthis.deleteMode.l;
		});
		if(p == null) {
			return;
		}
		this.deleteMode.l = p.layer;
		var _g = p.layer.data;
		switch(_g[1]) {
		case 0:
			var data = _g[2];
			if(data[p.index] == 0) {
				return;
			}
			data[p.index] = 0;
			p.layer.dirty = true;
			this.cursor.css({ opacity : 0}).fadeTo(100,1);
			this.save();
			this.draw();
			break;
		case 1:
			var objs = _g[3];
			if(HxOverrides.remove(objs,objs[p.index])) {
				this.save();
				this.draw();
			}
			break;
		case 2:
			var data1 = _g[3];
			var changed = false;
			var w = this.currentLayer.currentWidth;
			var h = this.currentLayer.currentHeight;
			if(this.palette.randomMode) {
				h = 1;
				w = h;
			}
			var _g1 = 0;
			var _g2 = h;
			while(_g1 < _g2) {
				var dy = _g1++;
				var _g3 = 0;
				var _g21 = w;
				while(_g3 < _g21) {
					var dx = _g3++;
					var i = p.index + dx + dy * this.width;
					if(data1[i] == 0) {
						continue;
					}
					data1[i] = 0;
					changed = true;
				}
			}
			if(changed) {
				p.layer.dirty = true;
				this.cursor.css({ opacity : 0}).fadeTo(100,1);
				this.save();
				this.draw();
			}
			break;
		case 3:
			var insts = _g[3];
			if(HxOverrides.remove(insts,insts[p.index])) {
				p.layer.dirty = true;
				this.save();
				this.draw();
				return;
			}
			break;
		}
	}
	,onKeyUp: function(e) {
		var _g = e.keyCode;
		switch(_g) {
		case 32:
			this.spaceDown = false;
			var canvas = $(this.view.getCanvas());
			canvas.off("mousemove");
			canvas.css({ cursor : ""});
			this.updateCursorPos();
			break;
		case 46:
			this.deleteMode = null;
			if(this.needSave) {
				this.save();
			}
			break;
		case 83:
			if(this.selection != null) {
				this.selection.down = false;
				this.selection.sx = this.selection.x;
				this.selection.sy = this.selection.y;
				this.setCursor();
			}
			break;
		default:
		}
	}
	,set: function(x,y,replace) {
		var _gthis = this;
		if(this.selection != null) {
			return;
		}
		if(this.palette.paintMode) {
			this.paint(x,y);
			return;
		}
		var l = this.currentLayer;
		if(!l.enabled()) {
			return;
		}
		var _g = l.data;
		switch(_g[1]) {
		case 0:
			var data = _g[2];
			if(data[x + y * this.width] == l.current || l.blanks[l.current]) {
				return;
			}
			data[x + y * this.width] = l.current;
			l.dirty = true;
			this.save();
			this.draw();
			break;
		case 1:
			break;
		case 2:
			var data1 = _g[3];
			var changed = false;
			if(this.palette.randomMode) {
				var putObjs = l.getSelObjects();
				var putObj = putObjs[Std.random(putObjs.length)];
				if(putObj != null) {
					var id = putObj.x + putObj.y * l.stride + 1;
					var _g1 = 0;
					var _g2 = putObj.w;
					while(_g1 < _g2) {
						var dx = _g1++;
						var _g3 = 0;
						var _g21 = putObj.h;
						while(_g3 < _g21) {
							var dy = _g3++;
							var k = id + dx + dy * l.stride;
							var p = x + dx + (y + dy) * this.width;
							var old = data1[p];
							if(old == k || l.blanks[k - 1]) {
								continue;
							}
							if(replace && old > 0) {
								var _g5 = 0;
								var _g4 = this.width * this.height;
								while(_g5 < _g4) {
									var i = _g5++;
									if(data1[i] == old) {
										data1[i] = k;
									}
								}
							} else {
								data1[p] = k;
							}
							changed = true;
						}
					}
					changed = true;
				} else {
					var p1 = x + y * this.width;
					var old1 = data1[p1];
					if(replace && old1 > 0) {
						var _g11 = 0;
						var _g6 = this.width * this.height;
						while(_g11 < _g6) {
							var i1 = _g11++;
							if(data1[i1] == old1) {
								var id1 = l.current + Std.random(l.currentWidth) + Std.random(l.currentHeight) * l.stride + 1;
								if(old1 == id1 || l.blanks[id1 - 1]) {
									continue;
								}
								data1[i1] = id1;
							}
						}
					} else {
						var id2 = l.current + Std.random(l.currentWidth) + Std.random(l.currentHeight) * l.stride + 1;
						if(old1 == id2 || l.blanks[id2 - 1]) {
							return;
						}
						data1[p1] = id2;
					}
					changed = true;
				}
			} else {
				var _g12 = 0;
				var _g7 = l.currentHeight;
				while(_g12 < _g7) {
					var dy1 = _g12++;
					var _g31 = 0;
					var _g22 = l.currentWidth;
					while(_g31 < _g22) {
						var dx1 = _g31++;
						var p2 = x + dx1 + (y + dy1) * this.width;
						var id3 = l.current + dx1 + dy1 * l.stride + 1;
						var old2 = data1[p2];
						if(old2 == id3 || l.blanks[id3 - 1]) {
							continue;
						}
						if(replace && old2 > 0) {
							var _g51 = 0;
							var _g41 = this.width * this.height;
							while(_g51 < _g41) {
								var i2 = _g51++;
								if(data1[i2] == old2) {
									data1[i2] = id3;
								}
							}
						} else {
							data1[p2] = id3;
						}
						changed = true;
					}
				}
			}
			if(!changed) {
				return;
			}
			l.dirty = true;
			this.save();
			this.draw();
			break;
		case 3:
			var insts = _g[3];
			var objs = l.getTileObjects();
			var putObjs1 = l.getSelObjects();
			var putObj1 = putObjs1[Std.random(putObjs1.length)];
			var dx2 = putObj1 == null ? 0.5 : putObj1.w * 0.5;
			var dy2 = putObj1 == null ? 0.5 : putObj1.h - 0.5;
			var x1 = l.floatCoord ? this.curPos.xf : this.curPos.x;
			var y1 = l.floatCoord ? this.curPos.yf : this.curPos.y;
			if(putObj1 != null) {
				x1 += (putObjs1[0].w - putObj1.w) * 0.5;
				y1 += putObjs1[0].h - putObj1.h;
			}
			var _g8 = 0;
			while(_g8 < insts.length) {
				var i3 = insts[_g8];
				++_g8;
				var o = objs.h[i3.o];
				var ox = i3.x + (o == null ? 0.5 : o.w * 0.5);
				var oy = i3.y + (o == null ? 0.5 : o.h - 0.5);
				if(x1 + dx2 >= ox - 0.5 && y1 + dy2 >= oy - 0.5 && x1 + dx2 < ox + 0.5 && y1 + dy2 < oy + 0.5) {
					if(i3.o == l.current && i3.x == x1 && i3.y == y1 && i3.flip == this.flipMode && i3.rot == this.rotation) {
						return;
					}
					HxOverrides.remove(insts,i3);
				}
			}
			if(putObj1 != null) {
				insts.push({ x : x1, y : y1, o : putObj1.x + putObj1.y * l.stride, rot : this.rotation, flip : this.flipMode});
			} else {
				var _g13 = 0;
				var _g9 = l.currentHeight;
				while(_g13 < _g9) {
					var dy3 = _g13++;
					var _g32 = 0;
					var _g23 = l.currentWidth;
					while(_g32 < _g23) {
						var dx3 = _g32++;
						insts.push({ x : x1 + dx3, y : y1 + dy3, o : l.current + dx3 + dy3 * l.stride, rot : this.rotation, flip : this.flipMode});
					}
				}
			}
			insts.sort(function(i11,i21) {
				var o1 = objs.h[i11.o];
				var o2 = objs.h[i21.o];
				var dy4 = ((i11.y + (o1 == null ? 1 : o1.h)) * _gthis.tileSize | 0) - ((i21.y + (o2 == null ? 1 : o2.h)) * _gthis.tileSize | 0);
				if(dy4 == 0) {
					var o3 = objs.h[i11.o];
					var o4 = objs.h[i21.o];
					return ((i11.x + (o3 == null ? 0.5 : o3.w * 0.5)) * _gthis.tileSize | 0) - ((i21.x + (o4 == null ? 0.5 : o4.w * 0.5)) * _gthis.tileSize | 0);
				} else {
					return dy4;
				}
			});
			l.dirty = true;
			this.save();
			this.draw();
			break;
		}
	}
	,draw: function() {
		this.view.fill(-7303024);
		var _g1 = 0;
		var _g = this.layers.length;
		while(_g1 < _g) {
			var index = _g1++;
			var l = this.layers[index];
			if(!l.visible) {
				continue;
			}
			l.draw(this.view);
		}
		this.view.flush();
	}
	,save: function() {
		if(this.mouseDown != null || this.deleteMode != null) {
			this.needSave = true;
			return;
		}
		this.needSave = false;
		var _g = 0;
		var _g1 = this.layers;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			l.save();
		}
		this.model.save();
	}
	,savePrefs: function() {
		var sc = this.content.find(".scroll");
		var state = { zoomView : this.zoomView, curLayer : this.currentLayer == null ? null : this.currentLayer.name, scrollX : sc.scrollLeft() | 0, scrollY : sc.scrollTop() | 0, paintMode : this.palette.paintMode, randomMode : this.palette.randomMode, paletteMode : this.palette.mode, paletteModeCursor : this.palette.modeCursor, smallPalette : this.palette.small, rotation : this.rotation, flipMode : this.flipMode};
		js_Browser.getLocalStorage().setItem(this.sheetPath + "#" + this.index,haxe_Serializer.run(state));
	}
	,scale: function(s) {
		if(s == null || isNaN(s)) {
			return;
		}
		var _g = 0;
		var _g1 = this.layers;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(!l.visible) {
				continue;
			}
			l.dirty = true;
			l.scale(s);
		}
		this.save();
		this.draw();
	}
	,scroll: function(dx,dy) {
		if(dx == null || isNaN(dx)) {
			dx = 0;
		}
		if(dy == null || isNaN(dy)) {
			dy = 0;
		}
		var _g = 0;
		var _g1 = this.layers;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(!l.visible) {
				continue;
			}
			l.dirty = true;
			l.scroll(dx,dy);
		}
		this.save();
		this.draw();
	}
	,setTileSize: function(value) {
		this.props.tileSize = this.tileSize = value;
		var _g = 0;
		var _g1 = this.layers;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(!l.hasFloatCoord) {
				continue;
			}
			var _g2 = l.data;
			if(_g2[1] == 1) {
				var objs = _g2[3];
				var _g21 = 0;
				while(_g21 < objs.length) {
					var o = objs[_g21];
					++_g21;
					o.x = (o.x * this.tileSize | 0) / this.tileSize;
					o.y = (o.y * this.tileSize | 0) / this.tileSize;
					if(l.hasSize) {
						o.width = (o.width * this.tileSize | 0) / this.tileSize;
						o.height = (o.height * this.tileSize | 0) / this.tileSize;
					}
				}
			}
		}
		this.setCursor();
		this.save();
		this.draw();
	}
	,setLayerMode: function(mode) {
		if(this.currentLayer.tileProps == null) {
			js_Browser.alert("Choose file first");
			return;
		}
		this.currentLayer.setMode(mode);
		this.save();
		this.reload();
	}
	,paletteOption: function(name,val) {
		if(this.palette.option(name,val)) {
			this.save();
			this.draw();
		}
	}
	,setLayer: function(l) {
		var old = this.currentLayer;
		if(l == old) {
			this.setCursor();
			return;
		}
		this.currentLayer = l;
		if(!l.hasRotFlip) {
			this.flipMode = false;
			this.rotation = 0;
		}
		this.savePrefs();
		this.content.find("[name=alpha]").val(Std.string(l.props.alpha * 100 | 0));
		this.content.find("[name=visible]").prop("checked",l.visible);
		this.content.find("[name=lock]").prop("checked",l.lock);
		var tmp = l.hasFloatCoord ? "" : "none";
		this.content.find("[name=lockGrid]").prop("checked",!l.floatCoord).closest(".item").css({ display : tmp});
		this.content.find("[name=mode]").val("" + (l.props.mode != null ? l.props.mode : "tiles"));
		var tmp1 = this.content.find("[name=color]");
		var css;
		if(l.idToIndex == null || (l.images == null || l.hasSize) && l.colors == null) {
			var _g = l.data;
			var css1;
			switch(_g[1]) {
			case 2:case 3:
				css1 = true;
				break;
			default:
				css1 = false;
			}
			css = !css1;
		} else {
			css = false;
		}
		var css2 = { display : css ? "" : "none"};
		tmp1.spectrum("set",this.toColor(l.props.color)).closest(".item").css(css2);
		var _g1 = l.data;
		switch(_g1[1]) {
		case 2:
			var t = _g1[2];
			this.content.find("[name=size]").val("" + t.size).closest(".item").show();
			this.content.find("[name=file]").closest(".item").show();
			break;
		case 3:
			var t1 = _g1[2];
			this.content.find("[name=size]").val("" + t1.size).closest(".item").show();
			this.content.find("[name=file]").closest(".item").show();
			break;
		default:
			this.content.find("[name=size]").closest(".item").hide();
			this.content.find("[name=file]").closest(".item").hide();
		}
		var _g2 = l.data;
		if(_g2[1] == 3) {
			this.palette.randomMode = false;
			this.palette.paintMode = false;
			this.savePrefs();
		}
		this.palette.reset();
		if(l.images == null) {
			this.setCursor();
			return;
		}
		this.palette.layerChanged(l);
		this.setCursor();
	}
	,setCursor: function() {
		var l = this.currentLayer;
		if(l == null) {
			this.cursor.hide();
			return;
		}
		this.content.find(".menu .item.selected").removeClass("selected");
		l.comp.addClass("selected");
		this.palette.updateSelect();
		var size = this.zoomView < 1 ? this.tileSize * this.zoomView | 0 : Math.ceil(this.tileSize * this.zoomView);
		if(this.selection != null) {
			this.cursorImage.setSize(0,0);
			this.cursor.show();
			this.cursor.css({ border : "", marginLeft : (this.selection.x * this.tileSize * this.zoomView - 1 | 0) + "px", marginTop : (this.selection.y * this.tileSize * this.zoomView | 0) + "px", width : (this.selection.w * this.tileSize * this.zoomView | 0) + "px", height : (this.selection.h * this.tileSize * this.zoomView | 0) + "px"});
			return;
		}
		var cur = l.current;
		var w = this.palette.randomMode ? 1 : l.currentWidth;
		var h = this.palette.randomMode ? 1 : l.currentHeight;
		var _g = l.data;
		if(_g[1] == 3) {
			var o = l.getSelObjects();
			if(o.length > 0) {
				cur = o[0].x + o[0].y * l.stride;
				w = o[0].w;
				h = o[0].h;
			}
		}
		this.cursorImage.setSize(size * w,size * h);
		var px = 0;
		var py = 0;
		if(l.images != null) {
			var _g1 = l.data;
			if(_g1[1] == 1) {
				var i = l.images[cur];
				var w1 = Math.ceil(i.width * this.zoomView);
				var h1 = Math.ceil(i.height * this.zoomView);
				this.cursorImage.setSize(w1,h1);
				this.cursorImage.clear();
				this.cursorImage.drawScaled(i,0,0,w1,h1);
				px = w1 - size >> 1;
				py = h1 - size;
			} else {
				this.cursorImage.clear();
				var _g2 = 0;
				var _g11 = h;
				while(_g2 < _g11) {
					var y = _g2++;
					var _g4 = 0;
					var _g3 = w;
					while(_g4 < _g3) {
						var x = _g4++;
						var i1 = l.images[cur + x + y * l.stride];
						this.cursorImage.drawSub(i1,0,0,i1.width,i1.height,x * size,y * size,size,size);
					}
				}
				this.cursor.css({ border : "none"});
				if(this.flipMode || this.rotation != 0) {
					var tw = size * w;
					var th = size * h;
					this.tmpImage.setSize(tw,th);
					var m = { a : 0., b : 0., c : 0., d : 0., x : 0., y : 0.};
					var rot = this.rotation;
					m.a = 1;
					m.b = 0;
					m.c = 0;
					m.d = 1;
					m.x = -tw * 0.5;
					m.y = -th * 0.5;
					if(rot != 0) {
						var a = Math.PI * rot / 2;
						var c = Math.cos(a);
						var s = Math.sin(a);
						var x1 = m.x;
						var y1 = m.y;
						m.a = c;
						m.b = s;
						m.c = -s;
						m.d = c;
						m.x = x1 * c - y1 * s;
						m.y = x1 * s + y1 * c;
					}
					if(this.flipMode) {
						m.a = -m.a;
						m.c = -m.c;
						m.x = -m.x;
					}
					m.x += Math.abs(m.a * tw * 0.5 + m.c * th * 0.5);
					m.y += Math.abs(m.b * tw * 0.5 + m.d * th * 0.5);
					this.tmpImage.clear();
					this.tmpImage.draw(this.cursorImage,0,0);
					var cw = tw * m.a + th * m.c | 0;
					var ch = tw * m.b + th * m.d | 0;
					this.cursorImage.setSize(cw < 0 ? -cw : cw,ch < 0 ? -ch : ch);
					this.cursorImage.clear();
					this.cursorImage.drawMat(this.tmpImage,m);
				}
			}
			this.cursorImage.fill(1616617979);
			if(l.hasSize) {
				this.cursor.css({ border : "1px solid black"});
			}
		} else {
			var c1 = l.colors == null ? l.props.color : l.colors[cur];
			var lum = ((c1 & 255) + (c1 >> 8 & 255) + (c1 >> 16 & 255)) / 765;
			this.cursorImage.fill(c1 | -16777216);
			this.cursor.css({ border : "1px solid " + (lum < 0.25 ? "white" : "black")});
		}
		var canvas = this.cursorImage.getCanvas();
		canvas.style.marginLeft = -px + "px";
		canvas.style.marginTop = -py + "px";
	}
	,__class__: Level
};
var K = function() { };
$hxClasses["K"] = K;
K.__name__ = ["K"];
var Model = function() {
	this.openedList = new haxe_ds_StringMap();
	this.prefs = { windowPos : { x : 50, y : 50, w : 800, h : 600, max : false}, curFile : null, curSheet : 0, recent : []};
	this.existsCache = new haxe_ds_StringMap();
	this.loadPrefs();
};
$hxClasses["Model"] = Model;
Model.__name__ = ["Model"];
Model.prototype = {
	quickExists: function(path) {
		var _this = this.existsCache;
		var c = __map_reserved[path] != null ? _this.getReserved(path) : _this.h[path];
		if(c == null) {
			c = { t : -1e9, r : false};
			var _this1 = this.existsCache;
			if(__map_reserved[path] != null) {
				_this1.setReserved(path,c);
			} else {
				_this1.h[path] = c;
			}
		}
		var t = new Date().getTime() / 1000;
		if(c.t < t - 10) {
			c.r = sys_FileSystem.exists(path);
			c.t = t;
		}
		return c.r;
	}
	,getImageData: function(key) {
		return Reflect.field(this.imageBank,key);
	}
	,getAbsPath: function(file) {
		if(file.charAt(0) == "/" || file.charAt(1) == ":") {
			return file;
		} else {
			return new haxe_io_Path(this.prefs.curFile).dir.split("\\").join("/") + "/" + file;
		}
	}
	,getSheet: function(name) {
		return this.base.getSheet(name);
	}
	,save: function(history) {
		if(history == null) {
			history = true;
		}
		var _gthis = this;
		var sdata = this.quickSave();
		if(history && (this.curSavedData == null || sdata.d != this.curSavedData.d || sdata.o != this.curSavedData.o)) {
			this.history.push(this.curSavedData);
			this.redo = [];
			if(this.history.length > 100 || sdata.d.length * (this.history.length + this.redo.length) * 2 > 314572800) {
				this.history.shift();
			}
			this.curSavedData = sdata;
		}
		if(this.prefs.curFile == null) {
			return;
		}
		try {
			js_node_Fs.writeFileSync(this.prefs.curFile,sdata.d);
		} catch( e ) {
			var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
			haxe_Timer.delay(function() {
				js_node_Fs.writeFileSync(_gthis.prefs.curFile,sdata.d);
			},500);
		}
	}
	,saveImages: function() {
		if(this.prefs.curFile == null) {
			return;
		}
		var img = this.prefs.curFile.split(".");
		img.pop();
		var path = img.join(".") + ".img";
		if(this.imageBank == null) {
			js_node_Fs.unlinkSync(path);
		} else {
			js_node_Fs.writeFileSync(path,JSON.stringify(this.imageBank,null,"\t"));
		}
	}
	,quickSave: function() {
		return { d : this.base.save(), o : haxe_Serializer.run(this.openedList)};
	}
	,quickLoad: function(sdata) {
		this.base.load(sdata.d);
		this.openedList = haxe_Unserializer.run(sdata.o);
	}
	,compressionEnabled: function() {
		return this.base.data.compress;
	}
	,error: function(msg) {
		js_Browser.alert(msg);
	}
	,load: function(noError) {
		if(noError == null) {
			noError = false;
		}
		this.history = [];
		this.redo = [];
		this.base = new cdb_Database();
		try {
			this.base.load(js_node_Fs.readFileSync(this.prefs.curFile,{ encoding : "utf8"}));
			if(this.prefs.curSheet > this.base.sheets.length) {
				this.prefs.curSheet = 0;
			} else {
				while(this.base.sheets[this.prefs.curSheet].sheet.props.hide) this.prefs.curSheet--;
			}
		} catch( e ) {
			if(!noError) {
				this.error(Std.string((e instanceof js__$Boot_HaxeError) ? e.val : e));
			}
			this.prefs.curFile = null;
			this.prefs.curSheet = 0;
		}
		try {
			var img = this.prefs.curFile.split(".");
			img.pop();
			this.imageBank = JSON.parse(js_node_Fs.readFileSync(img.join(".") + ".img",{ encoding : "utf8"}));
		} catch( e1 ) {
			var e2 = (e1 instanceof js__$Boot_HaxeError) ? e1.val : e1;
			this.imageBank = null;
		}
		this.curSavedData = this.quickSave();
	}
	,cleanImages: function() {
		if(this.imageBank == null) {
			return;
		}
		var used = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = this.base.sheets;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = s.sheet.columns;
			while(_g2 < _g3.length) {
				var c = _g3[_g2];
				++_g2;
				var _g4 = c.type;
				if(_g4[1] == 7) {
					var _g41 = 0;
					var _g5 = s.getLines();
					while(_g41 < _g5.length) {
						var obj = _g5[_g41];
						++_g41;
						var v = Reflect.field(obj,c.name);
						if(v != null) {
							if(__map_reserved[v] != null) {
								used.setReserved(v,true);
							} else {
								used.h[v] = true;
							}
						}
					}
				}
			}
		}
		var _g6 = 0;
		var _g11 = Reflect.fields(this.imageBank);
		while(_g6 < _g11.length) {
			var f = _g11[_g6];
			++_g6;
			if(!(__map_reserved[f] != null ? used.getReserved(f) : used.h[f])) {
				Reflect.deleteField(this.imageBank,f);
			}
		}
	}
	,loadPrefs: function() {
		try {
			this.prefs = haxe_Unserializer.run(js_Browser.getLocalStorage().getItem("prefs"));
			if(this.prefs.recent == null) {
				this.prefs.recent = [];
			}
		} catch( e ) {
			var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
		}
	}
	,savePrefs: function() {
		js_Browser.getLocalStorage().setItem("prefs",haxe_Serializer.run(this.prefs));
	}
	,__class__: Model
};
var Main = function() {
	var _gthis = this;
	Model.call(this);
	this.window = js_node_webkit_Window.get();
	this.window.on("resize",$bind(this,this.onResize));
	this.window.on("focus",function(_) {
		js_node_webkit_App.clearCache();
	});
	this.initMenu();
	this.levels = [];
	this.mousePos = { x : 0, y : 0};
	this.sheetCursors = new haxe_ds_StringMap();
	this.window.window.addEventListener("keydown",$bind(this,this.onKey));
	this.window.window.addEventListener("keypress",$bind(this,this.onKeyPress));
	this.window.window.addEventListener("keyup",$bind(this,this.onKeyUp));
	this.window.window.addEventListener("mousemove",$bind(this,this.onMouseMove));
	$(".modal").keypress(function(e) {
		e.stopPropagation();
	}).keydown(function(e1) {
		e1.stopPropagation();
	});
	$("#search input").keydown(function(e2) {
		if(e2.keyCode == 27) {
			$("#search i").click();
			return;
		}
	}).keyup(function(_1) {
		var tmp = $(this).val();
		_gthis.searchFilter(tmp);
	});
	$("#search i").click(function(_2) {
		_gthis.searchFilter(null);
		$("#search").toggle();
	});
	this.cursor = { s : null, x : 0, y : 0};
	this.pages = new JqPages(this);
	this.load(true);
	var t = new haxe_Timer(1000);
	t.run = $bind(this,this.checkTime);
};
$hxClasses["Main"] = Main;
Main.__name__ = ["Main"];
Main.main = function() {
	if(js_node_Fs.accessSync == null) {
		js_node_Fs.accessSync = function(path) {
			if(!js_node_Fs.existsSync(path)) {
				throw new js__$Boot_HaxeError(path + " does not exists");
			}
		};
	}
	Main.inst = new Main();
	window["_"] = Main.inst;
};
Main.__super__ = Model;
Main.prototype = $extend(Model.prototype,{
	searchFilter: function(filter) {
		if(filter == "") {
			filter = null;
		}
		if(filter != null) {
			filter = filter.toLowerCase();
		}
		var lines = $("table.sheet tr").not(".head");
		lines.removeClass("filtered");
		if(filter != null) {
			var _g_i = 0;
			var _g_j = lines;
			while(_g_i < _g_j.length) {
				var t = _g_j[_g_i++];
				if(t.textContent.toLowerCase().indexOf(filter) < 0) {
					t.classList.add("filtered");
				}
			}
			while(lines.length > 0) {
				lines = lines.filter(".list").not(".filtered").prev();
				lines.removeClass("filtered");
			}
		}
	}
	,onResize: function(_) {
		if(this.level != null) {
			this.level.onResize();
		}
		this.pages.onResize();
	}
	,onMouseMove: function(e) {
		this.mousePos.x = e.clientX;
		this.mousePos.y = e.clientY;
	}
	,setClipBoard: function(schema,data) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < data.length) {
			var o = data[_g1];
			++_g1;
			_g.push(this.cursor.s.objToString(o,true));
		}
		this.clipboard = { text : Std.string(_g), data : data, schema : schema};
		js_node_webkit_Clipboard.get().set(this.clipboard.text,"text");
	}
	,moveCursor: function(dx,dy,shift,ctrl) {
		if(this.cursor.s == null) {
			return;
		}
		if(this.cursor.x == -1 && ctrl) {
			if(dy != 0) {
				this.moveLine(this.cursor.s,this.cursor.y,dy);
			}
			this.updateCursor();
			return;
		}
		if(dx < 0 && this.cursor.x >= 0) {
			this.cursor.x--;
		}
		if(dy < 0 && this.cursor.y > 0) {
			this.cursor.y--;
		}
		if(dx > 0 && this.cursor.x < this.cursor.s.sheet.columns.length - 1) {
			this.cursor.x++;
		}
		if(dy > 0 && this.cursor.y < this.cursor.s.sheet.lines.length - 1) {
			this.cursor.y++;
		}
		this.cursor.select = null;
		this.updateCursor();
	}
	,isInput: function() {
		if(window.document.activeElement != null) {
			return window.document.activeElement.nodeName == "INPUT";
		} else {
			return false;
		}
	}
	,onKeyPress: function(e) {
		if(!e.ctrlKey && !this.isInput()) {
			var c = $(".cursor").not(".edit");
			if(c.length > 0) {
				if(e.keyCode == 13) {
					e.preventDefault();
				}
				c.dblclick();
			}
		}
	}
	,getSelection: function() {
		if(this.cursor.s == null) {
			return null;
		}
		var x1 = this.cursor.x < 0 ? 0 : this.cursor.x;
		var x2 = this.cursor.x < 0 ? this.cursor.s.sheet.columns.length - 1 : this.cursor.select != null ? this.cursor.select.x : x1;
		var y1 = this.cursor.y;
		var y2 = this.cursor.select != null ? this.cursor.select.y : y1;
		if(x2 < x1) {
			var tmp = x2;
			x2 = x1;
			x1 = tmp;
		}
		if(y2 < y1) {
			var tmp1 = y2;
			y2 = y1;
			y1 = tmp1;
		}
		return { x1 : x1, x2 : x2, y1 : y1, y2 : y2};
	}
	,onKey: function(e) {
		if(this.isInput()) {
			return;
		}
		var inCDB = this.level == null && this.pages.curPage < 0;
		var _g = e.keyCode;
		switch(_g) {
		case 9:
			if(e.ctrlKey) {
				var sheets = this.base.sheets.filter(function(s) {
					return !s.sheet.props.hide;
				});
				var pos = (this.level == null ? Lambda.indexOf(sheets,this.viewSheet) : sheets.length + Lambda.indexOf(this.levels,this.level)) + 1;
				var s1 = sheets[pos % (sheets.length + this.levels.length)];
				if(s1 != null) {
					this.selectSheet(s1);
				} else {
					var level = this.levels[pos - sheets.length];
					if(level != null) {
						this.selectLevel(level);
					}
				}
			} else {
				this.moveCursor(e.shiftKey ? -1 : 1,0,false,false);
			}
			break;
		case 13:
			if(inCDB) {
				if(this.cursor.s != null && $(".cursor.t_list,.cursor.t_properties").click().length > 0) {
					e.preventDefault();
				}
			}
			break;
		case 27:
			if(this.cursor.s != null && this.cursor.s.parent != null) {
				var p = this.cursor.s.parent;
				this.setCursor(p.sheet,p.column,p.line);
				$(".cursor").click();
			} else if(this.cursor.select != null) {
				this.cursor.select = null;
				this.updateCursor();
			}
			break;
		case 32:
			e.preventDefault();
			break;
		case 37:
			this.moveCursor(-1,0,e.shiftKey,e.ctrlKey);
			break;
		case 38:
			if($(".cursor textarea").length == 0) {
				this.moveCursor(0,-1,e.shiftKey,e.ctrlKey);
				e.preventDefault();
			}
			break;
		case 39:
			this.moveCursor(1,0,e.shiftKey,e.ctrlKey);
			break;
		case 40:
			if($(".cursor textarea").length == 0) {
				this.moveCursor(0,1,e.shiftKey,e.ctrlKey);
				e.preventDefault();
			}
			break;
		case 45:
			if(inCDB) {
				if(this.cursor.s != null) {
					this.newLine(this.cursor.s,this.cursor.y);
					this.moveCursor(0,1,false,false);
				}
			}
			break;
		case 46:
			if(inCDB) {
				$(".selected.deletable").change();
				if(this.cursor.s != null) {
					if(this.cursor.s.sheet.props.isProps) {
						var l = this.getLine(this.cursor.s,this.cursor.y);
						if(l != null) {
							Reflect.deleteField(this.cursor.s.sheet.lines[0],l.attr("colName"));
						}
					} else if(this.cursor.x < 0) {
						var s2 = this.getSelection();
						var y = s2.y2;
						while(y >= s2.y1) {
							this.cursor.s.deleteLine(y);
							--y;
						}
						this.cursor.y = s2.y1;
						this.cursor.select = null;
					} else {
						var s3 = this.getSelection();
						var _g1 = s3.y1;
						var _g2 = s3.y2 + 1;
						while(_g1 < _g2) {
							var y1 = _g1++;
							var obj = this.cursor.s.sheet.lines[y1];
							var _g3 = s3.x1;
							var _g21 = s3.x2 + 1;
							while(_g3 < _g21) {
								var x = _g3++;
								var c = this.cursor.s.sheet.columns[x];
								var def = this.base.getDefault(c);
								if(def == null) {
									Reflect.deleteField(obj,c.name);
								} else {
									obj[c.name] = def;
								}
							}
						}
					}
				}
				this.refresh();
				this.save();
			}
			break;
		case 67:
			if(e.ctrlKey) {
				if(this.cursor.s != null) {
					var s4 = this.getSelection();
					var data = [];
					var _g11 = s4.y1;
					var _g4 = s4.y2 + 1;
					while(_g11 < _g4) {
						var y2 = _g11++;
						var obj1 = this.cursor.s.sheet.lines[y2];
						var out = { };
						var _g31 = s4.x1;
						var _g22 = s4.x2 + 1;
						while(_g31 < _g22) {
							var x1 = _g31++;
							var c1 = this.cursor.s.sheet.columns[x1];
							var v = Reflect.field(obj1,c1.name);
							if(v != null) {
								out[c1.name] = v;
							}
						}
						data.push(out);
					}
					var _g5 = [];
					var _g23 = s4.x1;
					var _g12 = s4.x2 + 1;
					while(_g23 < _g12) {
						var x2 = _g23++;
						_g5.push(this.cursor.s.sheet.columns[x2]);
					}
					this.setClipBoard(_g5,data);
				}
			}
			break;
		case 70:
			if(e.ctrlKey && inCDB) {
				var s5 = $("#search");
				s5.show();
				s5.find("input").focus().select();
			}
			break;
		case 86:
			if(e.ctrlKey) {
				if(this.cursor.s == null || this.clipboard == null || js_node_webkit_Clipboard.get().get("text") != this.clipboard.text) {
					return;
				}
				var sheet = this.cursor.s;
				var posX = this.cursor.x < 0 ? 0 : this.cursor.x;
				var posY = this.cursor.y < 0 ? 0 : this.cursor.y;
				var _g6 = 0;
				var _g13 = this.clipboard.data;
				while(_g6 < _g13.length) {
					var obj11 = _g13[_g6];
					++_g6;
					if(posY == sheet.sheet.lines.length) {
						sheet.newLine();
					}
					var obj2 = sheet.sheet.lines[posY];
					var _g32 = 0;
					var _g24 = this.clipboard.schema.length;
					while(_g32 < _g24) {
						var cid = _g32++;
						var c11 = this.clipboard.schema[cid];
						var c2 = sheet.sheet.columns[cid + posX];
						if(c2 == null) {
							continue;
						}
						var f = this.base.getConvFunction(c11.type,c2.type);
						var v1 = Reflect.field(obj11,c11.name);
						if(f == null) {
							v1 = this.base.getDefault(c2);
						} else {
							if(v1 != null) {
								v1 = JSON.parse(JSON.stringify(v1));
							}
							if(f.f != null) {
								v1 = f.f(v1);
							}
						}
						if(v1 == null && !c2.opt) {
							v1 = this.base.getDefault(c2);
						}
						if(v1 == null) {
							Reflect.deleteField(obj2,c2.name);
						} else {
							obj2[c2.name] = v1;
						}
					}
					++posY;
				}
				sheet.sync();
				this.refresh();
				this.save();
			}
			break;
		case 88:
			if(e.ctrlKey) {
				this.onKey({ keyCode : 67, ctrlKey : true});
				this.onKey({ keyCode : 46});
			}
			break;
		case 89:
			if(e.ctrlKey && this.pages.curPage < 0) {
				if(this.redo.length > 0) {
					this.history.push(this.curSavedData);
					this.curSavedData = this.redo.pop();
					this.quickLoad(this.curSavedData);
					this.initContent();
					this.save(false);
				}
			}
			break;
		case 90:
			if(e.ctrlKey && this.pages.curPage < 0) {
				if(this.history.length > 0) {
					this.redo.push(this.curSavedData);
					this.curSavedData = this.history.pop();
					this.quickLoad(this.curSavedData);
					this.initContent();
					this.save(false);
				}
			}
			break;
		case 113:
			if(inCDB) {
				$(".cursor").not(".edit").dblclick();
			}
			break;
		case 114:
			if(this.cursor.s != null) {
				this.showReferences(this.cursor.s,this.cursor.y);
			}
			break;
		case 115:
			if(this.cursor.s != null && this.cursor.x >= 0) {
				var c3 = this.cursor.s.sheet.columns[this.cursor.x];
				var id = Reflect.field(this.cursor.s.sheet.lines[this.cursor.y],c3.name);
				var _g7 = c3.type;
				if(_g7[1] == 6) {
					var s6 = _g7[2];
					var sd = this.base.getSheet(s6);
					if(sd != null) {
						var _this = sd.index;
						var k = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
						if(k != null) {
							var index = Lambda.indexOf(sd.sheet.lines,k.obj);
							if(index >= 0) {
								var _this1 = this.sheetCursors;
								var value = { s : sd, x : 0, y : index};
								if(__map_reserved[s6] != null) {
									_this1.setReserved(s6,value);
								} else {
									_this1.h[s6] = value;
								}
								this.selectSheet(sd);
							}
						}
					}
				}
			}
			break;
		default:
		}
		if(this.level != null) {
			this.level.onKey(e);
		}
		if(this.pages.curPage >= 0) {
			this.pages.onKey(e);
		}
	}
	,onKeyUp: function(e) {
		if(this.level != null && !this.isInput()) {
			this.level.onKeyUp(e);
		}
	}
	,getLine: function(sheet,index) {
		return $("table[sheet='" + sheet.getPath() + "'] > tbody > tr").not(".head,.separator,.list").eq(index);
	}
	,showReferences: function(sheet,index) {
		var _gthis = this;
		var results = sheet.getReferences(index);
		if(results == null) {
			return;
		}
		if(results.length == 0) {
			this.setErrorMessage("Not found");
			var f = $bind(this,this.setErrorMessage);
			haxe_Timer.delay(function() {
				f();
			},500);
			return;
		}
		var line = this.getLine(sheet,index);
		line.next("tr.list").change();
		var res = $("<tr>").addClass("list");
		$("<td>").appendTo(res);
		var cell = $("<td>").attr("colspan","" + (sheet.sheet.columns.length + (sheet.sheet.props.level != null ? 1 : 0))).appendTo(res);
		var div = $("<div>").appendTo(cell);
		div.hide();
		var content = $("<table>").appendTo(div);
		var cols = $("<tr>").addClass("head");
		$("<td>").addClass("start").appendTo(cols).click(function(_) {
			res.change();
		});
		var name = "path";
		$("<td>").text(name).appendTo(cols);
		var name1 = "id";
		$("<td>").text(name1).appendTo(cols);
		content.append(cols);
		var index1 = 0;
		var _g = 0;
		while(_g < results.length) {
			var rs = [results[_g]];
			++_g;
			var l = $("<tr>").appendTo(content).addClass("clickable");
			$("<td>").text("" + index1++).appendTo(l);
			var slast = [rs[0].s[rs[0].s.length - 1]];
			$("<td>").text(slast[0].s.sheet.name.split("@").join(".") + "." + slast[0].c).appendTo(l);
			var path = [];
			var _g2 = 0;
			var _g1 = rs[0].s.length;
			while(_g2 < _g1) {
				var i = _g2++;
				var s = rs[0].s[i];
				var oid = Reflect.field(rs[0].o.path[i],s.id);
				if(oid == null || oid == "") {
					path.push(s.s.sheet.name.split("@").pop() + "[" + rs[0].o.indexes[i] + "]");
				} else {
					path.push(oid);
				}
			}
			$("<td>").text(path.join(".")).appendTo(l);
			l.click((function(slast1,rs1) {
				return function(e) {
					var key = null;
					var _g21 = 0;
					var _g11 = rs1[0].s.length - 1;
					while(_g21 < _g11) {
						var i1 = _g21++;
						var p = rs1[0].s[i1];
						key = p.s.getPath() + "@" + p.c + ":" + rs1[0].o.indexes[i1];
						var _this = _gthis.openedList;
						if(__map_reserved[key] != null) {
							_this.setReserved(key,true);
						} else {
							_this.h[key] = true;
						}
					}
					var starget = rs1[0].s[0].s;
					var this1 = _gthis.sheetCursors;
					var key1 = starget.sheet.name;
					var value = { s : new cdb_Sheet(_gthis.base,{ name : slast1[0].s.sheet.name, separators : [], lines : [], columns : [], props : { }},key), x : -1, y : rs1[0].o.indexes[rs1[0].o.indexes.length - 1]};
					var _this1 = this1;
					if(__map_reserved[key1] != null) {
						_this1.setReserved(key1,value);
					} else {
						_this1.h[key1] = value;
					}
					_gthis.selectSheet(starget);
					e.stopPropagation();
				};
			})(slast,rs));
		}
		res.change(function(e1) {
			div.slideUp(100,function() {
				res.remove();
			});
			e1.stopPropagation();
		});
		res.insertAfter(line);
		div.slideDown(100);
	}
	,moveLine: function(sheet,index,delta) {
		this.getLine(sheet,index).next("tr.list").change();
		var index1 = sheet.moveLine(index,delta);
		if(index1 != null) {
			this.setCursor(sheet,-1,index1,null,false);
			this.refresh();
			this.save();
		}
	}
	,changed: function(sheet,c,index,old) {
		var _g = c.type;
		switch(_g[1]) {
		case 7:
			this.saveImages();
			break;
		case 14:
			var obj = sheet.sheet.lines[index];
			var oldV = old;
			var newV = Reflect.field(obj,c.name);
			if(newV != null && oldV != null && oldV.file != newV.file && !sys_FileSystem.exists(this.getAbsPath(oldV.file)) && sys_FileSystem.exists(this.getAbsPath(newV.file))) {
				var change = false;
				var _g1 = 0;
				var _g2 = sheet.sheet.lines.length;
				while(_g1 < _g2) {
					var i = _g1++;
					var t = Reflect.field(sheet.sheet.lines[i],c.name);
					if(t != null && t.file == oldV.file) {
						t.file = newV.file;
						change = true;
					}
				}
				if(change) {
					this.refresh();
				}
			}
			sheet.updateValue(c,index,old);
			break;
		default:
			sheet.updateValue(c,index,old);
		}
		this.save();
	}
	,setErrorMessage: function(msg) {
		if(msg == null) {
			$(".errorMsg").hide();
		} else {
			$(".errorMsg").text(msg).show();
		}
	}
	,tileHtml: function(v,isInline) {
		var path = this.getAbsPath(v.file);
		if(!this.quickExists(path)) {
			if(isInline) {
				return "";
			}
			return "<span class=\"error\">" + v.file + "</span>";
		}
		var id = Main.UID++;
		var width = v.size * (v.width == null ? 1 : v.width);
		var height = v.size * (v.height == null ? 1 : v.height);
		var max = width > height ? width : height;
		var zoom = max <= 32 ? 2 : 64 / max;
		var inl = isInline ? "display:inline-block;" : "";
		var url = "file://" + path;
		var html = "<div class=\"tile\" id=\"_c" + id + "\" style=\"width : " + (width * zoom | 0) + "px; height : " + (height * zoom | 0) + "px; background : url('" + url + "') -" + (v.size * v.x * zoom | 0) + "px -" + (v.size * v.y * zoom | 0) + "px; opacity:0; " + inl + "\"></div>";
		html += "<img src=\"" + url + "\" style=\"display:none\" onload=\"$('#_c" + id + "').css({opacity:1, backgroundSize : ((this.width*" + zoom + ")|0)+'px ' + ((this.height*" + zoom + ")|0)+'px' " + (zoom > 1 ? ", imageRendering : 'pixelated'" : "") + "}); if( this.parentNode != null ) this.parentNode.removeChild(this)\"/>";
		return html;
	}
	,valueHtml: function(c,v,sheet,obj) {
		if(v == null) {
			if(c.opt) {
				return "&nbsp;";
			}
			return "<span class=\"error\">#NULL</span>";
		}
		var _g = c.type;
		switch(_g[1]) {
		case 0:
			if(v == "") {
				return "<span class=\"error\">#MISSING</span>";
			} else {
				var _this = this.base.getSheet(sheet.sheet.name).index;
				var key = v;
				if((__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]).obj == obj) {
					return v;
				} else {
					return "<span class=\"error\">#DUP(" + Std.string(v) + ")</span>";
				}
			}
			break;
		case 1:case 12:
			if(v == "") {
				return "&nbsp;";
			} else {
				return StringTools.replace(StringTools.htmlEscape(v),"\n","<br/>");
			}
			break;
		case 2:
			if(v) {
				return "Y";
			} else {
				return "N";
			}
			break;
		case 3:case 4:
			var _g1 = c.display;
			if(_g1 == null) {
				return Std.string(v) + "";
			} else if(_g1 == 1) {
				return Math.round(v * 10000) / 100 + "%";
			} else {
				return Std.string(v) + "";
			}
			break;
		case 5:
			var values = _g[2];
			return values[v];
		case 6:
			var sname = _g[2];
			if(v == "") {
				return "<span class=\"error\">#MISSING</span>";
			} else {
				var s = this.base.getSheet(sname);
				var _this1 = s.index;
				var key1 = v;
				var i = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
				if(i == null) {
					return "<span class=\"error\">#REF(" + Std.string(v) + ")</span>";
				} else {
					return (i.ico == null ? "" : this.tileHtml(i.ico,true) + " ") + StringTools.htmlEscape(i.disp);
				}
			}
			break;
		case 7:
			if(v == "") {
				return "<span class=\"error\">#MISSING</span>";
			} else {
				var data = Reflect.field(this.imageBank,v);
				if(data == null) {
					return "<span class=\"error\">#NOTFOUND(" + Std.string(v) + ")</span>";
				} else {
					return "<img src=\"" + data + "\"/>";
				}
			}
			break;
		case 8:
			var a = v;
			var ps = sheet.base.getSheet(sheet.sheet.name + "@" + c.name);
			var out = [];
			var size = 0;
			var _g2 = 0;
			while(_g2 < a.length) {
				var v1 = a[_g2];
				++_g2;
				var vals = [];
				var _g11 = 0;
				var _g21 = ps.sheet.columns;
				while(_g11 < _g21.length) {
					var c1 = _g21[_g11];
					++_g11;
					var _g3 = c1.type;
					switch(_g3[1]) {
					case 8:case 17:
						continue;
					default:
						vals.push(this.valueHtml(c1,Reflect.field(v1,c1.name),ps,v1));
					}
				}
				var v2 = vals.length == 1 ? vals[0] : "" + Std.string(vals);
				if(size > 500) {
					out.push("...");
					break;
				}
				var vstr = v2;
				if(v2.indexOf("<") >= 0) {
					var _this_r = new RegExp("<img src=\"[^\"]+\" style=\"display:none\"[^>]+>","g".split("u").join(""));
					vstr = vstr.replace(_this_r,"");
					var _this_r1 = new RegExp("<img src=\"[^\"]+\"/>","g".split("u").join(""));
					vstr = vstr.replace(_this_r1,"[I]");
					var _this_r2 = new RegExp("<div id=\"[^>]+></div>","g".split("u").join(""));
					vstr = vstr.replace(_this_r2,"[D]");
				}
				size += vstr.length;
				out.push(v2);
			}
			if(out.length == 0) {
				return "[]";
			}
			return out.join(", ");
		case 9:
			var name = _g[2];
			var t = this.base.getCustomType(name);
			var a1 = v;
			var cas = t.cases[a1[0]];
			var str = cas.name;
			if(cas.args.length > 0) {
				str += "(";
				var out1 = [];
				var pos = 1;
				var _g12 = 1;
				var _g4 = a1.length;
				while(_g12 < _g4) {
					var i1 = _g12++;
					out1.push(this.valueHtml(cas.args[i1 - 1],a1[i1],sheet,this));
				}
				str += out1.join(",");
				str += ")";
			}
			return str;
		case 10:
			var values1 = _g[2];
			var v3 = v;
			var flags = [];
			var _g13 = 0;
			var _g5 = values1.length;
			while(_g13 < _g5) {
				var i2 = _g13++;
				if((v3 & 1 << i2) != 0) {
					flags.push(StringTools.htmlEscape(values1[i2]));
				}
			}
			if(flags.length == 0) {
				return String.fromCharCode(8709);
			} else {
				return flags.join("|<wbr>");
			}
			break;
		case 11:
			var id = Main.UID++;
			return "<div class=\"color\" style=\"background-color:#" + StringTools.hex(v,6) + "\"></div>";
		case 13:
			var path = this.getAbsPath(v);
			var url = "file://" + path;
			var ext = v.split(".").pop().toLowerCase();
			var html = v == "" ? "<span class=\"error\">#MISSING</span>" : StringTools.htmlEscape(v);
			if(v != "" && !this.quickExists(path)) {
				html = "<span class=\"error\">" + html + "</span>";
			} else if(ext == "png" || ext == "jpg" || ext == "jpeg" || ext == "gif") {
				html = "<span class=\"preview\">" + html + "<div class=\"previewContent\"><div class=\"label\"></div><img src=\"" + url + "\" onload=\"$(this).parent().find('.label').text(this.width+'x'+this.height)\"/></div></span>";
			}
			if(v != "") {
				html += " <input type=\"submit\" value=\"open\" onclick=\"_.openFile('" + path + "')\"/>";
			}
			return html;
		case 14:
			return this.tileHtml(v);
		case 15:
			var v4 = v;
			var path1 = this.getAbsPath(v4.file);
			if(!this.quickExists(path1)) {
				return "<span class=\"error\">" + v4.file + "</span>";
			} else {
				return "#DATA";
			}
			break;
		case 16:
			var str1 = Std.string(v).split("\n").join(" ").split("\t").join("");
			if(str1.length > 50) {
				str1 = HxOverrides.substr(str1,0,47) + "...";
			}
			return str1;
		case 17:
			var ps1 = sheet.base.getSheet(sheet.sheet.name + "@" + c.name);
			var out2 = [];
			var _g6 = 0;
			var _g14 = ps1.sheet.columns;
			while(_g6 < _g14.length) {
				var c2 = _g14[_g6];
				++_g6;
				var pval = Reflect.field(v,c2.name);
				if(pval == null && c2.opt) {
					continue;
				}
				out2.push("<span class='propName'>" + c2.name + "</span> <span class='propVal'>" + this.valueHtml(c2,pval,ps1,v) + "</span>");
			}
			return out2.join("<br/>");
		}
	}
	,popupLine: function(sheet,index) {
		var _gthis = this;
		var n = new js_node_webkit_Menu();
		var nup = new js_node_webkit_MenuItem({ label : "Move Up"});
		var ndown = new js_node_webkit_MenuItem({ label : "Move Down"});
		var nins = new js_node_webkit_MenuItem({ label : "Insert"});
		var ndel = new js_node_webkit_MenuItem({ label : "Delete"});
		var nsep = new js_node_webkit_MenuItem({ label : "Separator", type : "checkbox"});
		var nref = new js_node_webkit_MenuItem({ label : "Show References"});
		var m = nup;
		n.append(m);
		var m1 = ndown;
		n.append(m1);
		var m2 = nins;
		n.append(m2);
		var m3 = ndel;
		n.append(m3);
		var m4 = nsep;
		n.append(m4);
		var m5 = nref;
		n.append(m5);
		var sepIndex = Lambda.indexOf(sheet.sheet.separators,index);
		nsep.checked = sepIndex >= 0;
		nins.click = function() {
			_gthis.newLine(sheet,index);
		};
		nup.click = function() {
			_gthis.moveLine(sheet,index,-1);
		};
		ndown.click = function() {
			_gthis.moveLine(sheet,index,1);
		};
		ndel.click = function() {
			sheet.deleteLine(index);
			_gthis.refresh();
			_gthis.save();
		};
		nsep.click = function() {
			if(sepIndex >= 0) {
				sheet.sheet.separators.splice(sepIndex,1);
				if(sheet.sheet.props.separatorTitles != null) {
					sheet.sheet.props.separatorTitles.splice(sepIndex,1);
				}
			} else {
				sepIndex = sheet.sheet.separators.length;
				var _g1 = 0;
				var _g = sheet.sheet.separators.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(sheet.sheet.separators[i] > index) {
						sepIndex = i;
						break;
					}
				}
				sheet.sheet.separators.splice(sepIndex,0,index);
				if(sheet.sheet.props.separatorTitles != null && sheet.sheet.props.separatorTitles.length > sepIndex) {
					sheet.sheet.props.separatorTitles.splice(sepIndex,0,null);
				}
			}
			_gthis.refresh();
			_gthis.save();
		};
		nref.click = function() {
			_gthis.showReferences(sheet,index);
		};
		if(sheet.sheet.props.hide) {
			nsep.enabled = false;
		}
		n.popup(this.mousePos.x,this.mousePos.y);
	}
	,popupColumn: function(sheet,c,isProperties) {
		var _gthis = this;
		var n = new js_node_webkit_Menu();
		var nedit = new js_node_webkit_MenuItem({ label : "Edit"});
		var nins = new js_node_webkit_MenuItem({ label : "Add Column"});
		var nleft = new js_node_webkit_MenuItem({ label : "Move Left"});
		var nright = new js_node_webkit_MenuItem({ label : "Move Right"});
		var ndel = new js_node_webkit_MenuItem({ label : "Delete"});
		var ndisp = new js_node_webkit_MenuItem({ label : "Display Column", type : "checkbox"});
		var nicon = new js_node_webkit_MenuItem({ label : "Display Icon", type : "checkbox"});
		var m = nedit;
		n.append(m);
		var m1 = nins;
		n.append(m1);
		var m2 = nleft;
		n.append(m2);
		var m3 = nright;
		n.append(m3);
		var m4 = ndel;
		n.append(m4);
		var m5 = ndisp;
		n.append(m5);
		var m6 = nicon;
		n.append(m6);
		var _g = c.type;
		switch(_g[1]) {
		case 3:case 4:
			var conv = new js_node_webkit_MenuItem({ label : "Convert"});
			var cm = new js_node_webkit_Menu();
			var k_f;
			var k_n = "* 10";
			k_f = function(s) {
				return s * 10;
			};
			var m7 = new js_node_webkit_MenuItem({ label : k_n});
			m7.click = function() {
				var _g1 = 0;
				var _g11 = sheet.getLines();
				while(_g1 < _g11.length) {
					var obj = _g11[_g1];
					++_g1;
					var t = Reflect.field(obj,c.name);
					if(t != null) {
						var t2 = k_f(t);
						if(c.type == cdb_ColumnType.TInt) {
							t2 = t2 | 0;
						}
						obj[c.name] = t2;
					}
				}
				_gthis.refresh();
				_gthis.save();
			};
			cm.append(m7);
			var k_f1;
			var k_n1 = "/ 10";
			k_f1 = function(s1) {
				return s1 / 10;
			};
			var m8 = new js_node_webkit_MenuItem({ label : k_n1});
			m8.click = function() {
				var _g2 = 0;
				var _g12 = sheet.getLines();
				while(_g2 < _g12.length) {
					var obj1 = _g12[_g2];
					++_g2;
					var t1 = Reflect.field(obj1,c.name);
					if(t1 != null) {
						var t21 = k_f1(t1);
						if(c.type == cdb_ColumnType.TInt) {
							t21 = t21 | 0;
						}
						obj1[c.name] = t21;
					}
				}
				_gthis.refresh();
				_gthis.save();
			};
			cm.append(m8);
			var k_f2;
			var k_n2 = "+ 1";
			k_f2 = function(s2) {
				return s2 + 1;
			};
			var m9 = new js_node_webkit_MenuItem({ label : k_n2});
			m9.click = function() {
				var _g3 = 0;
				var _g13 = sheet.getLines();
				while(_g3 < _g13.length) {
					var obj2 = _g13[_g3];
					++_g3;
					var t3 = Reflect.field(obj2,c.name);
					if(t3 != null) {
						var t22 = k_f2(t3);
						if(c.type == cdb_ColumnType.TInt) {
							t22 = t22 | 0;
						}
						obj2[c.name] = t22;
					}
				}
				_gthis.refresh();
				_gthis.save();
			};
			cm.append(m9);
			var k_f3;
			var k_n3 = "- 1";
			k_f3 = function(s3) {
				return s3 - 1;
			};
			var m10 = new js_node_webkit_MenuItem({ label : k_n3});
			m10.click = function() {
				var _g4 = 0;
				var _g14 = sheet.getLines();
				while(_g4 < _g14.length) {
					var obj3 = _g14[_g4];
					++_g4;
					var t4 = Reflect.field(obj3,c.name);
					if(t4 != null) {
						var t23 = k_f3(t4);
						if(c.type == cdb_ColumnType.TInt) {
							t23 = t23 | 0;
						}
						obj3[c.name] = t23;
					}
				}
				_gthis.refresh();
				_gthis.save();
			};
			cm.append(m10);
			conv.submenu = cm;
			n.append(conv);
			break;
		case 0:case 1:case 5:case 10:
			var conv1 = new js_node_webkit_MenuItem({ label : "Convert"});
			var cm1 = new js_node_webkit_Menu();
			var _g5 = 0;
			var _g15 = [{ n : "lowercase", f : function(s4) {
				return s4.toLowerCase();
			}},{ n : "UPPERCASE", f : function(s5) {
				return s5.toUpperCase();
			}},{ n : "UpperIdent", f : function(s6) {
				return HxOverrides.substr(s6,0,1).toUpperCase() + HxOverrides.substr(s6,1,null);
			}},{ n : "lowerIdent", f : function(s7) {
				return HxOverrides.substr(s7,0,1).toLowerCase() + HxOverrides.substr(s7,1,null);
			}}];
			while(_g5 < _g15.length) {
				var k = [_g15[_g5]];
				++_g5;
				var m11 = new js_node_webkit_MenuItem({ label : k[0].n});
				m11.click = (function(k1) {
					return function() {
						var _g21 = c.type;
						switch(_g21[1]) {
						case 5:
							var values = _g21[2];
							var _g31 = 0;
							var _g22 = values.length;
							while(_g31 < _g22) {
								var i = _g31++;
								values[i] = k1[0].f(values[i]);
							}
							break;
						case 10:
							var values1 = _g21[2];
							var _g32 = 0;
							var _g23 = values1.length;
							while(_g32 < _g23) {
								var i1 = _g32++;
								values1[i1] = k1[0].f(values1[i1]);
							}
							break;
						default:
							var refMap = new haxe_ds_StringMap();
							var _g24 = 0;
							var _g33 = sheet.getLines();
							while(_g24 < _g33.length) {
								var obj4 = _g33[_g24];
								++_g24;
								var t5 = Reflect.field(obj4,c.name);
								if(t5 != null && t5 != "") {
									var t24 = k1[0].f(t5);
									if(t24 == null && !c.opt) {
										t24 = "";
									}
									if(t24 == null) {
										Reflect.deleteField(obj4,c.name);
									} else {
										obj4[c.name] = t24;
										if(t24 != "") {
											if(__map_reserved[t5] != null) {
												refMap.setReserved(t5,t24);
											} else {
												refMap.h[t5] = t24;
											}
										}
									}
								}
							}
							if(c.type == cdb_ColumnType.TId) {
								_gthis.base.updateRefs(sheet,refMap);
							}
							sheet.sync();
						}
						_gthis.refresh();
						_gthis.save();
					};
				})(k);
				cm1.append(m11);
			}
			conv1.submenu = cm1;
			n.append(conv1);
			break;
		default:
		}
		ndisp.checked = sheet.sheet.props.displayColumn == c.name;
		nicon.checked = sheet.sheet.props.displayIcon == c.name;
		ndisp.enabled = false;
		nicon.enabled = false;
		var _g16 = c.type;
		switch(_g16[1]) {
		case 1:case 6:
			ndisp.enabled = true;
			break;
		case 14:
			nicon.enabled = true;
			break;
		default:
		}
		nedit.click = function() {
			_gthis.newColumn(sheet.sheet.name,c);
		};
		nleft.click = function() {
			var index = Lambda.indexOf(sheet.sheet.columns,c);
			if(index > 0) {
				HxOverrides.remove(sheet.sheet.columns,c);
				sheet.sheet.columns.splice(index - 1,0,c);
				_gthis.refresh();
				_gthis.save();
			}
		};
		nright.click = function() {
			var index1 = Lambda.indexOf(sheet.sheet.columns,c);
			if(index1 < sheet.sheet.columns.length - 1) {
				HxOverrides.remove(sheet.sheet.columns,c);
				sheet.sheet.columns.splice(index1 + 1,0,c);
				_gthis.refresh();
				_gthis.save();
			}
		};
		ndel.click = function() {
			if(!isProperties || window.confirm("Do you really want to delete this property for all objects?")) {
				_gthis.deleteColumn(sheet,c.name);
			}
		};
		ndisp.click = function() {
			if(sheet.sheet.props.displayColumn == c.name) {
				sheet.sheet.props.displayColumn = null;
			} else {
				sheet.sheet.props.displayColumn = c.name;
			}
			sheet.sync();
			_gthis.refresh();
			_gthis.save();
		};
		nicon.click = function() {
			if(sheet.sheet.props.displayIcon == c.name) {
				sheet.sheet.props.displayIcon = null;
			} else {
				sheet.sheet.props.displayIcon = c.name;
			}
			sheet.sync();
			_gthis.refresh();
			_gthis.save();
		};
		nins.click = function() {
			var sheet1 = sheet.sheet.name;
			var tmp = Lambda.indexOf(sheet.sheet.columns,c) + 1;
			_gthis.newColumn(sheet1,null,tmp);
		};
		n.popup(this.mousePos.x,this.mousePos.y);
	}
	,popupSheet: function(s,li) {
		var _gthis = this;
		var n = new js_node_webkit_Menu();
		var nins = new js_node_webkit_MenuItem({ label : "Add Sheet"});
		var nleft = new js_node_webkit_MenuItem({ label : "Move Left"});
		var nright = new js_node_webkit_MenuItem({ label : "Move Right"});
		var nren = new js_node_webkit_MenuItem({ label : "Rename"});
		var ndel = new js_node_webkit_MenuItem({ label : "Delete"});
		var nindex = new js_node_webkit_MenuItem({ label : "Add Index", type : "checkbox"});
		var ngroup = new js_node_webkit_MenuItem({ label : "Add Group", type : "checkbox"});
		var m = nins;
		n.append(m);
		var m1 = nleft;
		n.append(m1);
		var m2 = nright;
		n.append(m2);
		var m3 = nren;
		n.append(m3);
		var m4 = ndel;
		n.append(m4);
		var m5 = nindex;
		n.append(m5);
		var m6 = ngroup;
		n.append(m6);
		nleft.click = function() {
			var prev = -1;
			var _g1 = 0;
			var _g = _gthis.base.sheets.length;
			while(_g1 < _g) {
				var i = _g1++;
				var s2 = _gthis.base.sheets[i];
				if(s == s2) {
					break;
				}
				if(!s2.sheet.props.hide) {
					prev = i;
				}
			}
			if(prev < 0) {
				return;
			}
			HxOverrides.remove(_gthis.base.sheets,s);
			_gthis.base.sheets.splice(prev,0,s);
			_gthis.prefs.curSheet = prev;
			_gthis.initContent();
			_gthis.save();
		};
		nright.click = function() {
			var found = null;
			var _g11 = 0;
			var _g2 = _gthis.base.sheets.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var s21 = _gthis.base.sheets[i1];
				if(s == s21) {
					found = -1;
				} else if(!s21.sheet.props.hide && found != null) {
					found = i1;
					break;
				}
			}
			if(found == null || found < 0) {
				return;
			}
			HxOverrides.remove(_gthis.base.sheets,s);
			_gthis.base.sheets.splice(found,0,s);
			_gthis.prefs.curSheet = found;
			_gthis.initContent();
			_gthis.save();
		};
		ndel.click = function() {
			_gthis.base.deleteSheet(s);
			_gthis.initContent();
			_gthis.save();
		};
		nins.click = function() {
			_gthis.newSheet();
		};
		nindex.checked = s.sheet.props.hasIndex;
		nindex.click = function() {
			if(s.sheet.props.hasIndex) {
				var _g3 = 0;
				var _g12 = s.getLines();
				while(_g3 < _g12.length) {
					var o = _g12[_g3];
					++_g3;
					Reflect.deleteField(o,"index");
				}
				s.sheet.props.hasIndex = false;
			} else {
				var _g4 = 0;
				var _g13 = s.sheet.columns;
				while(_g4 < _g13.length) {
					var c = _g13[_g4];
					++_g4;
					if(c.name == "index") {
						_gthis.error("Column 'index' already exists");
						return;
					}
				}
				s.sheet.props.hasIndex = true;
			}
			_gthis.save();
		};
		ngroup.checked = s.sheet.props.hasGroup;
		ngroup.click = function() {
			if(s.sheet.props.hasGroup) {
				var _g5 = 0;
				var _g14 = s.getLines();
				while(_g5 < _g14.length) {
					var o1 = _g14[_g5];
					++_g5;
					Reflect.deleteField(o1,"group");
				}
				s.sheet.props.hasGroup = false;
			} else {
				var _g6 = 0;
				var _g15 = s.sheet.columns;
				while(_g6 < _g15.length) {
					var c1 = _g15[_g6];
					++_g6;
					if(c1.name == "group") {
						_gthis.error("Column 'group' already exists");
						return;
					}
				}
				s.sheet.props.hasGroup = true;
			}
			_gthis.save();
		};
		nren.click = function() {
			li.dblclick();
		};
		if(s.sheet.props.level != null || s.hasColumn("width",[cdb_ColumnType.TInt]) && s.hasColumn("height",[cdb_ColumnType.TInt]) && s.hasColumn("props",[cdb_ColumnType.TDynamic])) {
			var nlevel = new js_node_webkit_MenuItem({ label : "Level", type : "checkbox"});
			nlevel.checked = s.sheet.props.level != null;
			n.append(nlevel);
			nlevel.click = function() {
				if(s.sheet.props.level != null) {
					Reflect.deleteField(s.sheet.props,"level");
				} else {
					s.sheet.props.level = { tileSets : { }};
				}
				_gthis.save();
				_gthis.refresh();
			};
		}
		n.popup(this.mousePos.x,this.mousePos.y);
	}
	,editCell: function(c,v,sheet,index) {
		var _gthis = this;
		var obj = sheet.sheet.lines[index];
		var val = Reflect.field(obj,c.name);
		var old = val;
		var html = _gthis.valueHtml(c,val,sheet,obj);
		if(v.hasClass("edit")) {
			return;
		}
		var editDone = function() {
			v.html(html);
			v.removeClass("edit");
			_gthis.setErrorMessage();
		};
		var _g = c.type;
		switch(_g[1]) {
		case 2:
			if(c.opt && val == false) {
				val = null;
				Reflect.deleteField(obj,c.name);
			} else {
				val = !val;
				obj[c.name] = val;
			}
			var tmp = _gthis.valueHtml(c,val,sheet,obj);
			v.html(tmp);
			_gthis.updateClasses(v,c,val);
			_gthis.changed(sheet,c,index,old);
			break;
		case 5:
			var values = _g[2];
			v.empty();
			var s = $("<select>");
			v.addClass("edit");
			var _g1 = 0;
			var _g2 = values.length;
			while(_g1 < _g2) {
				var i = _g1++;
				var tmp1 = $("<option>");
				var tmp2 = val == i ? "selected" : "_sel";
				tmp1.attr("value","" + i).attr(tmp2,"selected").text(values[i]).appendTo(s);
			}
			if(c.opt) {
				$("<option>").attr("value","-1").text("--- None ---").prependTo(s);
			}
			v.append(s);
			s.change(function(e) {
				val = Std.parseInt(s.val());
				if(val < 0) {
					val = null;
					Reflect.deleteField(obj,c.name);
				} else {
					obj[c.name] = val;
				}
				html = _gthis.valueHtml(c,val,sheet,obj);
				_gthis.updateClasses(v,c,val);
				_gthis.changed(sheet,c,index,old);
				editDone();
				e.stopPropagation();
			});
			s.keydown(function(e1) {
				var _g3 = e1.keyCode;
				switch(_g3) {
				case 9:
					s.blur();
					_gthis.moveCursor(e1.shiftKey ? -1 : 1,0,false,false);
					haxe_Timer.delay(function() {
						$(".cursor").dblclick();
					},1);
					e1.preventDefault();
					break;
				case 37:case 39:
					s.blur();
					return;
				default:
				}
				e1.stopPropagation();
			});
			s.blur(function(_) {
				editDone();
			});
			s.focus();
			var event = window.document.createEvent("MouseEvents");
			event.initMouseEvent("mousedown",true,true,window);
			s[0].dispatchEvent(event);
			break;
		case 6:
			var sname = _g[2];
			var sdat = this.base.getSheet(sname);
			if(sdat == null) {
				return;
			}
			v.empty();
			v.addClass("edit");
			var s1 = $("<select>");
			var _g4 = [];
			var _g11 = 0;
			var _g21 = sdat.all;
			while(_g11 < _g21.length) {
				var d = _g21[_g11];
				++_g11;
				_g4.push({ id : d.id, ico : d.ico, text : d.disp});
			}
			var elts = _g4;
			if(c.opt || val == null || val == "") {
				elts.unshift({ id : "~", ico : null, text : "--- None ---"});
			}
			v.append(s1);
			s1.change(function(e2) {
				e2.stopPropagation();
			});
			var props = { data : elts};
			if(sdat.sheet.props.displayIcon != null) {
				var buildElement = function(i1) {
					var text = StringTools.htmlEscape(i1.text);
					return $("<div>" + (i1.ico == null ? "<div style='display:inline-block;width:16px'/>" : _gthis.tileHtml(i1.ico,true)) + " " + text + "</div>");
				};
				props.templateResult = props.templateSelection = buildElement;
			}
			s1.select2(props);
			s1.select2("val",val == null ? "" : val);
			s1.select2("open");
			s1.change(function(e3) {
				val = s1.val();
				if(val == "~") {
					val = null;
					Reflect.deleteField(obj,c.name);
				} else {
					obj[c.name] = val;
				}
				html = _gthis.valueHtml(c,val,sheet,obj);
				_gthis.updateClasses(v,c,val);
				_gthis.changed(sheet,c,index,old);
				editDone();
			});
			s1.on("select2:close",null,function(_1) {
				editDone();
			});
			break;
		case 7:
			var i2 = $("<input>").attr("type","file").css("display","none").change(function(e4) {
				var j = $(this);
				var file = j.val();
				var ext = file.split(".").pop().toLowerCase();
				if(ext == "jpeg") {
					ext = "jpg";
				}
				if(ext != "png" && ext != "gif" && ext != "jpg") {
					_gthis.error("Unsupported image extension " + ext);
					return;
				}
				var bytes = haxe_io_Bytes.ofData(js_node_Fs.readFileSync(file));
				var md5 = haxe_crypto_Md5.make(bytes).toHex();
				if(_gthis.imageBank == null) {
					_gthis.imageBank = { };
				}
				if(!Object.prototype.hasOwnProperty.call(_gthis.imageBank,md5)) {
					var data = "data:image/" + ext + ";base64," + new haxe_crypto_BaseCode(haxe_io_Bytes.ofString("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")).encodeBytes(bytes).toString();
					_gthis.imageBank[md5] = data;
				}
				val = md5;
				obj[c.name] = val;
				var i3 = _gthis.valueHtml(c,val,sheet,obj);
				v.html(i3);
				_gthis.updateClasses(v,c,val);
				_gthis.changed(sheet,c,index,old);
				j.remove();
			});
			i2.appendTo($("body"));
			i2.click();
			break;
		case 10:
			var values1 = _g[2];
			var div = $("<div>").addClass("flagValues");
			div.click(function(e5) {
				e5.stopPropagation();
			}).dblclick(function(e6) {
				e6.stopPropagation();
			});
			var _g12 = 0;
			var _g5 = values1.length;
			while(_g12 < _g5) {
				var i4 = [_g12++];
				var f = $("<input>").attr("type","checkbox").prop("checked",(val & 1 << i4[0]) != 0).change((function(i5) {
					return function(e7) {
						val &= ~(1 << i5[0]);
						if($(this).prop("checked")) {
							val |= 1 << i5[0];
						}
						e7.stopPropagation();
					};
				})(i4));
				$("<label>").text(values1[i4[0]]).appendTo(div).append(f);
			}
			v.empty();
			v.append(div);
			this.cursor.onchange = function() {
				if(c.opt && val == 0) {
					val = null;
					Reflect.deleteField(obj,c.name);
				} else {
					obj[c.name] = val;
				}
				html = _gthis.valueHtml(c,val,sheet,obj);
				editDone();
				_gthis.save();
			};
			break;
		case 11:
			var id = Std.random(1);
			v.html("<div class=\"modal\" onclick=\"$('#_c" + id + "').spectrum('toggle')\"></div><input type=\"text\" id=\"_c" + id + "\"/>");
			var spect = $("#_c" + id);
			spect.spectrum({ color : "#" + StringTools.hex(val,6), showInput : true, showButtons : false, change : function() {
				spect.spectrum("hide");
			}, hide : function(vcol) {
				var color = Std.parseInt("0x" + Std.string(vcol.toHex()));
				val = color;
				obj[c.name] = color;
				var tmp3 = _gthis.valueHtml(c,val,sheet,obj);
				v.html(tmp3);
				_gthis.save();
			}}).spectrum("show");
			break;
		case 13:
			this.chooseFile(function(path) {
				val = path;
				if(path == null) {
					Reflect.deleteField(obj,c.name);
				} else {
					obj[c.name] = path;
				}
				html = _gthis.valueHtml(c,val,sheet,obj);
				v.html(html);
				_gthis.updateClasses(v,c,val);
				_gthis.changed(sheet,c,index,old);
				_gthis.save();
			});
			break;
		case 15:
			break;
		case 0:case 1:case 3:case 4:case 9:case 16:
			v.empty();
			var i6 = $(c.type == cdb_ColumnType.TString ? "<textarea>" : "<input>");
			v.addClass("edit");
			i6.appendTo(v);
			if(val != null) {
				var _g6 = c.type;
				switch(_g6[1]) {
				case 9:
					var t = _g6[2];
					var tmp4 = this.base.typeValToString(this.base.getCustomType(t),val);
					i6.val(tmp4);
					break;
				case 16:
					var tmp5 = JSON.stringify(val);
					i6.val(tmp5);
					break;
				default:
					i6.val("" + Std.string(val));
				}
			}
			i6.change(function(e8) {
				e8.stopPropagation();
			});
			i6.keydown(function(e9) {
				var _g7 = e9.keyCode;
				switch(_g7) {
				case 9:
					i6.blur();
					_gthis.moveCursor(e9.shiftKey ? -1 : 1,0,false,false);
					haxe_Timer.delay(function() {
						$(".cursor").dblclick();
					},1);
					e9.preventDefault();
					break;
				case 13:
					if(!i6.is("textarea") || !e9.shiftKey && !e9.altKey && !e9.ctrlKey) {
						i6.blur();
						e9.preventDefault();
					}
					break;
				case 27:
					editDone();
					break;
				case 38:case 40:
					if(!i6.is("textarea")) {
						i6.blur();
					}
					return;
				default:
				}
				e9.stopPropagation();
			});
			i6.blur(function(_2) {
				var nv = i6.val();
				var old1 = val;
				var prevObj;
				if(c.type == cdb_ColumnType.TId && old1 != null) {
					var _this = _gthis.base.getSheet(sheet.sheet.name).index;
					var key = val;
					prevObj = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
				} else {
					prevObj = null;
				}
				var prevTarget = null;
				if(nv == "" && c.opt) {
					if(val != null) {
						html = null;
						val = html;
						Reflect.deleteField(obj,c.name);
						_gthis.updateClasses(v,c,val);
						_gthis.changed(sheet,c,index,old);
					}
				} else {
					var val2;
					var _g8 = c.type;
					switch(_g8[1]) {
					case 0:
						val2 = _gthis.base.r_ident.match(nv) ? nv : null;
						break;
					case 3:
						val2 = Std.parseInt(nv);
						break;
					case 4:
						var f1 = parseFloat(nv);
						val2 = isNaN(f1) ? null : f1;
						break;
					case 9:
						var t1 = _g8[2];
						try {
							val2 = _gthis.base.parseTypeVal(_gthis.base.getCustomType(t1),nv);
						} catch( e10 ) {
							var e11 = (e10 instanceof js__$Boot_HaxeError) ? e10.val : e10;
							val2 = null;
						}
						break;
					case 16:
						try {
							val2 = _gthis.base.parseDynamic(nv);
						} catch( e12 ) {
							var e13 = (e12 instanceof js__$Boot_HaxeError) ? e12.val : e12;
							val2 = null;
						}
						break;
					default:
						val2 = nv;
					}
					if(val2 != val && val2 != null) {
						var _this1 = _gthis.base.getSheet(sheet.sheet.name).index;
						var key1 = val2;
						prevTarget = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
						if(c.type == cdb_ColumnType.TId && val != null && (prevObj == null || prevObj.obj == obj)) {
							var m = new haxe_ds_StringMap();
							var key2 = val;
							var value = val2;
							if(__map_reserved[key2] != null) {
								m.setReserved(key2,value);
							} else {
								m.h[key2] = value;
							}
							_gthis.base.updateRefs(sheet,m);
						}
						val = val2;
						obj[c.name] = val;
						_gthis.updateClasses(v,c,val);
						_gthis.changed(sheet,c,index,old);
						html = _gthis.valueHtml(c,val,sheet,obj);
					}
				}
				editDone();
				var tmp6;
				if(c.type == cdb_ColumnType.TId && prevObj != null && old1 != val) {
					var tmp7;
					if(prevObj.obj == obj) {
						var _this2 = _gthis.base.getSheet(sheet.sheet.name).index;
						tmp7 = (__map_reserved[old1] != null ? _this2.getReserved(old1) : _this2.h[old1]) != null;
					} else {
						tmp7 = false;
					}
					if(!tmp7) {
						if(prevTarget != null) {
							var _this3 = _gthis.base.getSheet(sheet.sheet.name).index;
							var key3 = val;
							tmp6 = (__map_reserved[key3] != null ? _this3.getReserved(key3) : _this3.h[key3]).obj != prevTarget.obj;
						} else {
							tmp6 = false;
						}
					} else {
						tmp6 = true;
					}
				} else {
					tmp6 = false;
				}
				if(tmp6) {
					_gthis.refresh();
					return;
				}
			});
			var _g9 = c.type;
			if(_g9[1] == 9) {
				var t2 = _g9[2];
				var t3 = this.base.getCustomType(t2);
				i6.keyup(function(_3) {
					var str = i6.val();
					try {
						if(str != "") {
							_gthis.base.parseTypeVal(t3,str);
						}
						_gthis.setErrorMessage();
						i6.removeClass("error");
					} catch( msg ) {
						var msg1 = (msg instanceof js__$Boot_HaxeError) ? msg.val : msg;
						if(typeof(msg1) == "string") {
							_gthis.setErrorMessage(msg1);
							i6.addClass("error");
						} else {
							throw msg;
						}
					}
				});
			}
			i6.focus();
			i6.select();
			break;
		case 8:case 12:case 14:case 17:
			throw new js__$Boot_HaxeError("assert2");
		}
	}
	,updateCursor: function() {
		$(".selected").removeClass("selected");
		$(".cursor").removeClass("cursor");
		$(".cursorLine").removeClass("cursorLine");
		if(this.cursor.s == null) {
			return;
		}
		if(this.cursor.y < 0) {
			this.cursor.y = 0;
			this.cursor.select = null;
		}
		if(this.cursor.y >= this.cursor.s.sheet.lines.length) {
			this.cursor.y = this.cursor.s.sheet.lines.length - 1;
			this.cursor.select = null;
		}
		var max = this.cursor.s.sheet.props.isProps ? 1 : this.cursor.s.sheet.columns.length;
		if(this.cursor.x >= max) {
			this.cursor.x = max - 1;
			this.cursor.select = null;
		}
		var l = this.getLine(this.cursor.s,this.cursor.y);
		if(this.cursor.x < 0) {
			l.addClass("selected");
			if(this.cursor.select != null) {
				var y = this.cursor.y;
				while(this.cursor.select.y != y) {
					if(this.cursor.select.y > y) {
						++y;
					} else {
						--y;
					}
					this.getLine(this.cursor.s,y).addClass("selected");
				}
			}
		} else {
			l.find("td.c").eq(this.cursor.x).addClass("cursor").closest("tr").addClass("cursorLine");
			if(this.cursor.select != null) {
				var s = this.getSelection();
				var _g1 = s.y1;
				var _g = s.y2 + 1;
				while(_g1 < _g) {
					var y1 = _g1++;
					this.getLine(this.cursor.s,y1).find("td.c").slice(s.x1,s.x2 + 1).addClass("selected");
				}
			}
		}
		var e = l[0];
		if(e != null) {
			e.scrollIntoViewIfNeeded();
		}
	}
	,refresh: function() {
		var t = $("<table>");
		this.checkCursor = true;
		this.fillTable(t,this.viewSheet);
		if(this.cursor.s != this.viewSheet && this.checkCursor) {
			this.setCursor(this.viewSheet,null,null,null,false);
		}
		var content = $("#content");
		content.empty();
		t.appendTo(content);
		$("<div>").appendTo(content).addClass("tableBottom");
		this.updateCursor();
	}
	,chooseFile: function(callb,cancel) {
		var _gthis = this;
		if(this.prefs.curFile == null) {
			this.error("Please save CDB file first");
			if(cancel != null) {
				cancel();
			}
			return;
		}
		var fs = $("#fileSelect");
		if(fs.attr("nwworkingdir") == null) {
			fs.attr("nwworkingdir",new haxe_io_Path(this.prefs.curFile).dir);
		}
		fs.off("change");
		fs.val("");
		fs.change(function(_) {
			fs.off("change");
			var path = fs.val().split("\\").join("/");
			fs.val("");
			if(path == "") {
				if(cancel != null) {
					cancel();
				}
				return;
			}
			fs.attr("nwworkingdir","");
			var parts = path.split("/");
			var base = _gthis.prefs.curFile.split("\\").join("/").split("/");
			base.pop();
			while(parts.length > 1 && base.length > 0 && parts[0] == base[0]) {
				parts.shift();
				base.shift();
			}
			if(parts.length == 0 || parts[0] != "" && parts[0].charAt(1) != ":") {
				while(base.length > 0) {
					parts.unshift("..");
					base.pop();
				}
			}
			var relPath = parts.join("/");
			callb(relPath);
		}).click();
	}
	,fillProps: function(content,sheet,props) {
		var _gthis = this;
		content.addClass("sheet");
		content.attr("sheet",sheet.getPath());
		var available = [];
		var index = 0;
		var _g = 0;
		var _g1 = sheet.sheet.columns;
		while(_g < _g1.length) {
			var c = [_g1[_g]];
			++_g;
			if(c[0].opt && !Object.prototype.hasOwnProperty.call(props,c[0].name)) {
				available.push(c[0]);
				continue;
			}
			var v = Reflect.field(props,c[0].name);
			var l = [$("<tr>").attr("colName",c[0].name).appendTo(content)];
			var th = $("<th>").text(c[0].name).appendTo(l[0]);
			var td = [$("<td>").addClass("c").addClass("t_" + HxOverrides.substr(c[0].type[0],1,null).toLowerCase()).html(this.valueHtml(c[0],v,sheet,props)).appendTo(l[0])];
			var index1 = [index++];
			var tmp = (function(index2) {
				return function(e) {
					_gthis.setCursor(sheet,0,index2[0]);
					e.stopPropagation();
				};
			})(index1);
			l[0].click(tmp);
			th.mousedown((function(l1,c1) {
				return function(e1) {
					if(e1.which == 3) {
						var f = $bind(_gthis,_gthis.popupColumn);
						var sheet1 = sheet;
						var c2 = c1[0];
						haxe_Timer.delay((function() {
							return function() {
								f(sheet1,c2,true);
							};
						})(),1);
						e1.preventDefault();
						l1[0].click();
						return;
					}
				};
			})(l,c));
			var tmp1 = (function(td1,c3) {
				return function(e2) {
					_gthis.editCell(c3[0],td1[0],sheet,0);
					e2.preventDefault();
					e2.stopPropagation();
				};
			})(td,c);
			td[0].dblclick(tmp1);
		}
		var end = $("<tr>").appendTo(content);
		end = $("<td>").attr("colspan","2").appendTo(end);
		var sel = $("<select>").appendTo(end);
		$("<option>").attr("value","").text("--- Choose ---").appendTo(sel);
		var _g2 = 0;
		while(_g2 < available.length) {
			var c4 = available[_g2];
			++_g2;
			$("<option>").attr("value",c4.name).text(c4.name).appendTo(sel);
		}
		$("<option>").attr("value","new").text("New property...").appendTo(sel);
		sel.change(function(e3) {
			e3.stopPropagation();
			var v1 = sel.val();
			if(v1 == "") {
				return;
			}
			sel.val("");
			if(v1 == "new") {
				_gthis.newColumn(sheet.sheet.name);
				return;
			}
			var _g3 = 0;
			while(_g3 < available.length) {
				var c5 = available[_g3];
				++_g3;
				if(c5.name == v1) {
					var field = c5.name;
					var value = _gthis.base.getDefault(c5,true);
					props[field] = value;
					_gthis.save();
					_gthis.refresh();
					return;
				}
			}
		});
	}
	,updateClasses: function(v,c,val) {
		var _g = c.type;
		switch(_g[1]) {
		case 2:
			v.removeClass("true, false").addClass(val == true ? "true" : "false");
			break;
		case 3:case 4:
			v.removeClass("zero");
			if(val == 0) {
				v.addClass("zero");
			}
			break;
		default:
		}
	}
	,fillTable: function(content,sheet) {
		var _gthis = this;
		if(sheet.sheet.columns.length == 0) {
			content.html("<a href=\"javascript:_.newColumn('" + sheet.sheet.name + "')\">Add a column</a>");
			return;
		}
		var todo = [];
		var inTodo = false;
		var cols = $("<tr>").addClass("head");
		var _g = [];
		var _g1 = 0;
		var _g2 = cdb_ColumnType.__constructs__.slice();
		while(_g1 < _g2.length) {
			var t = _g2[_g1];
			++_g1;
			_g.push(HxOverrides.substr(t,1,null).toLowerCase());
		}
		var types = _g;
		$("<th>").addClass("start").appendTo(cols).click(function(_) {
			if(sheet.sheet.props.hide) {
				content.change();
			} else {
				$("tr.list table").change();
			}
		});
		content.addClass("sheet");
		var tmp = sheet.getPath();
		content.attr("sheet",tmp);
		content.click(function(e) {
			e.stopPropagation();
		});
		var _g11 = [];
		var _g3 = 0;
		var _g21 = sheet.sheet.lines.length;
		while(_g3 < _g21) {
			var i = [_g3++];
			var l = $("<tr>");
			l.data("index",i[0]);
			var head = [$("<td>").addClass("start").text("" + i[0])];
			l.mousedown((function(head1,i1) {
				return function(e1) {
					if(e1.which == 3) {
						head1[0].click();
						var f = $bind(_gthis,_gthis.popupLine);
						var sheet1 = sheet;
						var index = i1[0];
						haxe_Timer.delay((function() {
							return function() {
								f(sheet1,index);
							};
						})(),1);
						e1.preventDefault();
						return;
					}
				};
			})(head,i)).click((function(i2) {
				return function(e2) {
					if(e2.shiftKey && _gthis.cursor.s == sheet && _gthis.cursor.x < 0) {
						_gthis.cursor.select = { x : -1, y : i2[0]};
						_gthis.updateCursor();
					} else {
						_gthis.setCursor(sheet,-1,i2[0]);
					}
				};
			})(i));
			head[0].appendTo(l);
			_g11.push(l);
		}
		var lines = _g11;
		var colCount = sheet.sheet.columns.length;
		if(sheet.sheet.props.level != null) {
			colCount += 1;
		}
		var _g31 = 0;
		var _g22 = sheet.sheet.columns.length;
		while(_g31 < _g22) {
			var cindex = [_g31++];
			var c = [sheet.sheet.columns[cindex[0]]];
			var col = $("<th>");
			col.text(c[0].name);
			col.addClass("t_" + HxOverrides.substr(c[0].type[0],1,null).toLowerCase());
			if(sheet.sheet.props.displayColumn == c[0].name) {
				col.addClass("display");
			}
			col.mousedown((function(c1) {
				return function(e3) {
					if(e3.which == 3) {
						var f1 = $bind(_gthis,_gthis.popupColumn);
						var sheet2 = sheet;
						var c2 = c1[0];
						haxe_Timer.delay((function() {
							return function() {
								f1(sheet2,c2);
							};
						})(),1);
						e3.preventDefault();
						return;
					}
				};
			})(c));
			col.dblclick((function(c3) {
				return function(_1) {
					_gthis.newColumn(sheet.sheet.name,c3[0]);
				};
			})(c));
			cols.append(col);
			var ctype = "t_" + types[c[0].type[1]];
			var _g5 = 0;
			var _g4 = sheet.sheet.lines.length;
			while(_g5 < _g4) {
				var index1 = [_g5++];
				var obj = [sheet.sheet.lines[index1[0]]];
				var val = [Reflect.field(obj[0],c[0].name)];
				var v = [$("<td>").addClass(ctype).addClass("c")];
				var l1 = [lines[index1[0]]];
				v[0].appendTo(l1[0]);
				this.updateClasses(v[0],c[0],val[0]);
				var html = [this.valueHtml(c[0],val[0],sheet,obj[0])];
				if(html[0] == "&nbsp;") {
					v[0].text(" ");
				} else if(html[0].indexOf("<") < 0 && html[0].indexOf("&") < 0) {
					v[0].text(html[0]);
				} else {
					v[0].html(html[0]);
				}
				v[0].data("index",cindex[0]);
				var tmp1 = (function(index2,cindex1) {
					return function(e4) {
						if(!inTodo) {
							if(e4.shiftKey && _gthis.cursor.s == sheet) {
								_gthis.cursor.select = { x : cindex1[0], y : index2[0]};
								_gthis.updateCursor();
								e4.stopImmediatePropagation();
							} else {
								_gthis.setCursor(sheet,cindex1[0],index2[0]);
							}
						}
						e4.stopPropagation();
					};
				})(index1,cindex);
				v[0].click(tmp1);
				var set = [(function(html1,v1,val1,obj1,index3,c4) {
					return function(val2) {
						var old = val1[0];
						val1[0] = val2;
						if(val1[0] == null) {
							Reflect.deleteField(obj1[0],c4[0].name);
						} else {
							obj1[0][c4[0].name] = val1[0];
						}
						var set1 = _gthis.valueHtml(c4[0],val1[0],sheet,obj1[0]);
						html1[0] = set1;
						v1[0].html(html1[0]);
						_gthis.changed(sheet,c4[0],index3[0],old);
					};
				})(html,v,val,obj,index1,c)];
				var _g6 = c[0].type;
				switch(_g6[1]) {
				case 7:
					v[0].find("img").addClass("deletable").change((function(obj2,c5) {
						return function(e5) {
							if(Reflect.field(obj2[0],c5[0].name) != null) {
								Reflect.deleteField(obj2[0],c5[0].name);
								_gthis.refresh();
								_gthis.save();
							}
						};
					})(obj,c)).click((function() {
						return function(e6) {
							$(this).addClass("selected");
							e6.stopPropagation();
						};
					})());
					var tmp2 = (function(v2,index4,c6) {
						return function(_2) {
							_gthis.editCell(c6[0],v2[0],sheet,index4[0]);
						};
					})(v,index1,c);
					v[0].dblclick(tmp2);
					break;
				case 8:
					var key = [sheet.getPath() + "@" + c[0].name + ":" + index1[0]];
					var tmp3 = (function(key1,html2,l2,v3,val3,obj3,index5,c7,cindex2) {
						return function(e7) {
							var next = l2[0].next("tr.list");
							if(next.length > 0) {
								if(next.data("name") == c7[0].name) {
									next.change();
									return;
								}
								next.change();
							}
							next = $("<tr>").addClass("list").data("name",c7[0].name);
							$("<td>").appendTo(next);
							var cell = $("<td>").attr("colspan","" + colCount).appendTo(next);
							var div = $("<div>").appendTo(cell);
							if(!inTodo) {
								div.hide();
							}
							var content1 = $("<table>").appendTo(div);
							var psheet = sheet.base.getSheet(sheet.sheet.name + "@" + c7[0].name);
							if(val3[0] == null) {
								val3[0] = [];
								obj3[0][c7[0].name] = val3[0];
							}
							psheet = new cdb_Sheet(_gthis.base,{ columns : psheet.sheet.columns, props : psheet.sheet.props, name : psheet.sheet.name, lines : val3[0], separators : []},key1[0],{ sheet : sheet, column : cindex2[0], line : index5[0]});
							_gthis.fillTable(content1,psheet);
							next.insertAfter(l2[0]);
							v3[0].text("...");
							v3[0].addClass("opened");
							var _this = _gthis.openedList;
							if(__map_reserved[key1[0]] != null) {
								_this.setReserved(key1[0],true);
							} else {
								_this.h[key1[0]] = true;
							}
							var tmp4 = (function(key2,html3,v4,val4,obj4,c8) {
								return function(e8) {
									if(c8[0].opt && val4[0].length == 0) {
										val4[0] = null;
										Reflect.deleteField(obj4[0],c8[0].name);
										_gthis.save();
									}
									var tmp5 = _gthis.valueHtml(c8[0],val4[0],sheet,obj4[0]);
									html3[0] = tmp5;
									v4[0].html(html3[0]);
									v4[0].removeClass("opened");
									var tmp6 = (function() {
										return function() {
											next.remove();
										};
									})();
									div.slideUp(100,tmp6);
									_gthis.openedList.remove(key2[0]);
									e8.stopPropagation();
								};
							})(key1,html2,v3,val3,obj3,c7);
							next.change(tmp4);
							if(inTodo) {
								if(_gthis.cursor.s != null && _gthis.cursor.s.getPath() == psheet.getPath()) {
									_gthis.cursor.s = psheet;
									_gthis.checkCursor = false;
								}
							} else {
								div.slideDown(100);
								_gthis.setCursor(psheet);
							}
							e7.stopPropagation();
						};
					})(key,html,l1,v,val,obj,index1,c,cindex);
					v[0].click(tmp3);
					var _this1 = this.openedList;
					if(__map_reserved[key[0]] != null ? _this1.getReserved(key[0]) : _this1.h[key[0]]) {
						todo.push((function(v5) {
							return function() {
								v5[0].click();
							};
						})(v));
					}
					break;
				case 12:
					break;
				case 13:
					v[0].find("input").addClass("deletable").change((function(obj5,c9) {
						return function(e9) {
							if(Reflect.field(obj5[0],c9[0].name) != null) {
								Reflect.deleteField(obj5[0],c9[0].name);
								_gthis.refresh();
								_gthis.save();
							}
						};
					})(obj,c));
					var tmp7 = (function(set2) {
						return function(_3) {
							var tmp8 = (function(set3) {
								return function(path) {
									set3[0](path);
									_gthis.save();
								};
							})(set2);
							_gthis.chooseFile(tmp8);
						};
					})(set);
					v[0].dblclick(tmp7);
					break;
				case 14:
					v[0].find("div").addClass("deletable").change((function(obj6,c10) {
						return function(e10) {
							if(Reflect.field(obj6[0],c10[0].name) != null) {
								Reflect.deleteField(obj6[0],c10[0].name);
								_gthis.refresh();
								_gthis.save();
							}
						};
					})(obj,c));
					var tmp9 = (function(set4,v6,val5,index6,c11) {
						return function(_4) {
							var rv = val5[0];
							var file = rv == null ? null : rv.file;
							var size = rv == null ? 16 : rv.size;
							var posX = rv == null ? 0 : rv.x;
							var posY = rv == null ? 0 : rv.y;
							var width = rv == null ? null : rv.width;
							var height = rv == null ? null : rv.height;
							if(width == null) {
								width = 1;
							}
							if(height == null) {
								height = 1;
							}
							if(file == null) {
								var i3 = index6[0] - 1;
								while(i3 >= 0) {
									var o = sheet.sheet.lines[i3--];
									var v21 = Reflect.field(o,c11[0].name);
									if(v21 != null) {
										file = v21.file;
										size = v21.size;
										break;
									}
								}
							}
							var setVal = (function(set5) {
								return function() {
									var v7 = { file : file, size : size, x : posX, y : posY};
									if(width != 1) {
										v7.width = width;
									}
									if(height != 1) {
										v7.height = height;
									}
									set5[0](v7);
								};
							})(set4);
							if(file == null) {
								var tmp10 = (function(v8) {
									return function(path1) {
										file = path1;
										setVal();
										v8[0].dblclick();
									};
								})(v6);
								_gthis.chooseFile(tmp10);
								return;
							}
							var dialog = $($(".tileSelect").parent().html()).prependTo($("body"));
							var maxWidth = 1000000;
							var maxHeight = 1000000;
							dialog.find(".tileView").css({ backgroundImage : "url(\"file://" + _gthis.getAbsPath(file) + "\")"}).mousemove((function() {
								return function(e11) {
									var off = $(this).offset();
									posX = size == 1 ? ((e11.pageX - off.left) / width | 0) * width : (e11.pageX - off.left) / size | 0;
									posY = size == 1 ? ((e11.pageY - off.top) / height | 0) * height : (e11.pageY - off.top) / size | 0;
									if((posX + width) * size > maxWidth) {
										posX = (maxWidth / size | 0) - width;
									}
									if((posY + height) * size > maxHeight) {
										posY = (maxHeight / size | 0) - height;
									}
									if(posX < 0) {
										posX = 0;
									}
									if(posY < 0) {
										posY = 0;
									}
									var tmp11 = size * posX - 1 + "px";
									var tmp12 = size * posY - 1 + "px";
									$(".tileCursor").not(".current").css({ marginLeft : tmp11, marginTop : tmp12});
								};
							})()).click((function() {
								return function(_5) {
									setVal();
									dialog.remove();
									_gthis.save();
								};
							})());
							dialog.find("[name=size]").val("" + size).change((function() {
								return function(_6) {
									size = Std.parseInt($(this).val());
									var tmp13 = size * width + "px";
									var tmp14 = size * height + "px";
									$(".tileCursor").css({ width : tmp13, height : tmp14});
									var tmp15 = size * posX - 2 + "px";
									var tmp16 = size * posY - 2 + "px";
									$(".tileCursor.current").css({ marginLeft : tmp15, marginTop : tmp16});
								};
							})()).change();
							dialog.find("[name=width]").val("" + width).change((function() {
								return function(_7) {
									width = Std.parseInt($(this).val());
									var tmp17 = size * width + "px";
									var tmp18 = size * height + "px";
									$(".tileCursor").css({ width : tmp17, height : tmp18});
								};
							})()).change();
							dialog.find("[name=height]").val("" + height).change((function() {
								return function(_8) {
									height = Std.parseInt($(this).val());
									var tmp19 = size * width + "px";
									var tmp20 = size * height + "px";
									$(".tileCursor").css({ width : tmp19, height : tmp20});
								};
							})()).change();
							dialog.find("[name=cancel]").click((function() {
								return function(_9) {
									dialog.remove();
								};
							})());
							dialog.find("[name=file]").click((function(v9) {
								return function(_10) {
									var tmp21 = (function(v10) {
										return function(f2) {
											file = f2;
											dialog.remove();
											setVal();
											_gthis.save();
											v10[0].dblclick();
										};
									})(v9);
									_gthis.chooseFile(tmp21);
								};
							})(v6));
							var tmp22 = (function() {
								return function(e12) {
									e12.stopPropagation();
								};
							})();
							dialog.keydown(tmp22).keypress((function() {
								return function(e13) {
									e13.stopPropagation();
								};
							})());
							dialog.show();
							var i4 = window.document.createElement("img");
							i4.onload = (function() {
								return function(_11) {
									maxWidth = i4.width;
									maxHeight = i4.height;
									dialog.find(".tileView").height(i4.height).width(i4.width);
									dialog.find(".tilePath").text(file + " (" + i4.width + "x" + i4.height + ")");
								};
							})();
							var tmp23 = _gthis.getAbsPath(file);
							i4.src = "file://" + tmp23;
						};
					})(set,v,val,index1,c);
					v[0].dblclick(tmp9);
					break;
				case 17:
					var key3 = [sheet.getPath() + "@" + c[0].name + ":" + index1[0]];
					var tmp24 = (function(key4,html4,l3,v11,val6,obj7,index7,c12,cindex3) {
						return function(e14) {
							var next1 = l3[0].next("tr.list");
							if(next1.length > 0) {
								if(next1.data("name") == c12[0].name) {
									next1.change();
									return;
								}
								next1.change();
							}
							next1 = $("<tr>").addClass("list").data("name",c12[0].name);
							$("<td>").appendTo(next1);
							var cell1 = $("<td>").attr("colspan","" + colCount).appendTo(next1);
							var div1 = $("<div>").appendTo(cell1);
							if(!inTodo) {
								div1.hide();
							}
							var content2 = $("<table>").addClass("props").appendTo(div1);
							var psheet1 = sheet.base.getSheet(sheet.sheet.name + "@" + c12[0].name);
							if(val6[0] == null) {
								val6[0] = { };
								obj7[0][c12[0].name] = val6[0];
							}
							var _gthis1 = _gthis.base;
							var psheet2 = psheet1.sheet.columns;
							var psheet3 = psheet1.sheet.props;
							var psheet4 = psheet1.sheet.name;
							var _g61 = [];
							var _g7 = 0;
							var _g8 = Reflect.fields(val6[0]);
							while(_g7 < _g8.length) {
								var f3 = _g8[_g7];
								++_g7;
								_g61.push(null);
							}
							psheet1 = new cdb_Sheet(_gthis1,{ columns : psheet2, props : psheet3, name : psheet4, lines : _g61, separators : []},key4[0],{ sheet : sheet, column : cindex3[0], line : index7[0]});
							psheet1.sheet.lines[0] = val6[0];
							_gthis.fillProps(content2,psheet1,val6[0]);
							next1.insertAfter(l3[0]);
							v11[0].text("...");
							v11[0].addClass("opened");
							var _this2 = _gthis.openedList;
							if(__map_reserved[key4[0]] != null) {
								_this2.setReserved(key4[0],true);
							} else {
								_this2.h[key4[0]] = true;
							}
							var tmp25 = (function(key5,html5,v12,val7,obj8,c13) {
								return function(e15) {
									if(c13[0].opt && Reflect.fields(val7[0]).length == 0) {
										val7[0] = null;
										Reflect.deleteField(obj8[0],c13[0].name);
										_gthis.save();
									}
									var tmp26 = _gthis.valueHtml(c13[0],val7[0],sheet,obj8[0]);
									html5[0] = tmp26;
									v12[0].html(html5[0]);
									v12[0].removeClass("opened");
									var tmp27 = (function() {
										return function() {
											next1.remove();
										};
									})();
									div1.slideUp(100,tmp27);
									_gthis.openedList.remove(key5[0]);
									e15.stopPropagation();
								};
							})(key4,html4,v11,val6,obj7,c12);
							next1.change(tmp25);
							if(inTodo) {
								if(_gthis.cursor.s != null && _gthis.cursor.s.getPath() == psheet1.getPath()) {
									_gthis.cursor.s = psheet1;
									_gthis.checkCursor = false;
								}
							} else {
								div1.slideDown(100);
								_gthis.setCursor(psheet1);
							}
							e14.stopPropagation();
						};
					})(key3,html,l1,v,val,obj,index1,c,cindex);
					v[0].click(tmp24);
					var _this3 = this.openedList;
					if(__map_reserved[key3[0]] != null ? _this3.getReserved(key3[0]) : _this3.h[key3[0]]) {
						todo.push((function(v13) {
							return function() {
								v13[0].click();
							};
						})(v));
					}
					break;
				default:
					var tmp28 = (function(v14,index8,c14) {
						return function(e16) {
							_gthis.editCell(c14[0],v14[0],sheet,index8[0]);
						};
					})(v,index1,c);
					v[0].dblclick(tmp28);
				}
			}
		}
		if(sheet.sheet.lines.length == 0) {
			var l4 = $("<tr><td colspan=\"" + (sheet.sheet.columns.length + 1) + "\"><a href=\"javascript:_.insertLine()\">Insert Line</a></td></tr>");
			l4.find("a").click(function(_12) {
				_gthis.setCursor(sheet);
			});
			lines.push(l4);
		}
		if(sheet.sheet.props.level != null) {
			var col1 = $("<td style='width:35px'>");
			cols.prepend(col1);
			var _g32 = 0;
			var _g23 = sheet.sheet.lines.length;
			while(_g32 < _g23) {
				var index9 = [_g32++];
				var l5 = [lines[index9[0]]];
				var c15 = $("<input type='submit' value='Edit'>");
				$("<td>").append(c15).prependTo(l5[0]);
				c15.click((function(l6,index10) {
					return function(_13) {
						l6[0].click();
						var found = null;
						var _g41 = 0;
						var _g51 = _gthis.levels;
						while(_g41 < _g51.length) {
							var l7 = _g51[_g41];
							++_g41;
							if(l7.sheet == sheet && l7.index == index10[0]) {
								found = l7;
							}
						}
						if(found == null) {
							found = new Level(_gthis,sheet,index10[0]);
							_gthis.levels.push(found);
							_gthis.selectLevel(found);
							_gthis.initContent();
						} else {
							_gthis.selectLevel(found);
						}
					};
				})(l5,index9));
			}
		}
		content.empty();
		content.append(cols);
		var snext = 0;
		var _g33 = 0;
		var _g24 = lines.length;
		while(_g33 < _g24) {
			var i5 = _g33++;
			while(sheet.sheet.separators[snext] == i5) {
				var sep = $("<tr>").addClass("separator").append("<td colspan=\"" + (colCount + 1) + "\">").appendTo(content);
				var content3 = [sep.find("td")];
				var title = [sheet.sheet.props.separatorTitles != null ? sheet.sheet.props.separatorTitles[snext] : null];
				if(title[0] != null) {
					content3[0].text(title[0]);
				}
				var pos = [snext];
				sep.dblclick((function(pos1,title1,content4) {
					return function(e17) {
						content4[0].empty();
						var tmp29 = $("<input>");
						var tmp30 = title1[0] == null ? "" : title1[0];
						tmp29.appendTo(content4[0]).focus().val(tmp30).blur((function(pos2,title2,content5) {
							return function(_14) {
								var tmp31 = $(this).val();
								title2[0] = tmp31;
								$(this).remove();
								content5[0].text(title2[0]);
								var titles = sheet.sheet.props.separatorTitles;
								if(titles == null) {
									titles = [];
								}
								while(titles.length < pos2[0]) titles.push(null);
								titles[pos2[0]] = title2[0] == "" ? null : title2[0];
								while(titles[titles.length - 1] == null && titles.length > 0) titles.pop();
								if(titles.length == 0) {
									titles = null;
								}
								sheet.sheet.props.separatorTitles = titles;
								_gthis.save();
							};
						})(pos1,title1,content4)).keypress((function() {
							return function(e18) {
								e18.stopPropagation();
							};
						})()).keydown((function(title3,content6) {
							return function(e19) {
								if(e19.keyCode == 13) {
									$(this).blur();
									e19.preventDefault();
								} else if(e19.keyCode == 27) {
									content6[0].text(title3[0]);
								}
								e19.stopPropagation();
							};
						})(title1,content4));
					};
				})(pos,title,content3));
				++snext;
			}
			content.append(lines[i5]);
		}
		inTodo = true;
		var _g25 = 0;
		while(_g25 < todo.length) {
			var t1 = todo[_g25];
			++_g25;
			t1();
		}
		inTodo = false;
	}
	,openFile: function(file) {
		js_node_webkit_Shell.openItem(file);
	}
	,setCursor: function(s,x,y,sel,update) {
		if(update == null) {
			update = true;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this.cursor.s = s;
		this.cursor.x = x;
		this.cursor.y = y;
		this.cursor.select = sel;
		var ch = this.cursor.onchange;
		if(ch != null) {
			this.cursor.onchange = null;
			ch();
		}
		if(update) {
			this.updateCursor();
		}
	}
	,selectSheet: function(s,manual) {
		if(manual == null) {
			manual = true;
		}
		this.viewSheet = s;
		this.pages.curPage = -1;
		var key = s.sheet.name;
		var _this = this.sheetCursors;
		this.cursor = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(this.cursor == null) {
			this.cursor = { x : 0, y : 0, s : s};
			var key1 = s.sheet.name;
			var value = this.cursor;
			var _this1 = this.sheetCursors;
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,value);
			} else {
				_this1.h[key1] = value;
			}
		}
		if(manual) {
			if(this.level != null) {
				this.level.dispose();
			}
			this.level = null;
		}
		this.prefs.curSheet = Lambda.indexOf(this.base.sheets,s);
		$("#sheets li").removeClass("active").filter("#sheet_" + this.prefs.curSheet).addClass("active");
		if(manual) {
			this.refresh();
		}
	}
	,selectLevel: function(l) {
		if(this.level != null) {
			this.level.dispose();
		}
		this.pages.curPage = -1;
		this.level = l;
		this.level.init();
		$("#sheets li").removeClass("active").filter("#level_" + l.sheetPath.split(".").join("_") + "_" + l.index).addClass("active");
	}
	,closeLevel: function(l) {
		l.dispose();
		var i = Lambda.indexOf(this.levels,l);
		HxOverrides.remove(this.levels,l);
		if(this.level == l) {
			this.level = null;
		}
		this.initContent();
	}
	,newSheet: function() {
		var s = $("#newsheet").show();
		s.find("#sheet_name").val("");
		s.find("#sheet_level").removeAttr("checked");
	}
	,deleteColumn: function(sheet,cname) {
		if(cname == null) {
			sheet = this.base.getSheet(this.colProps.sheet);
			cname = this.colProps.ref.name;
		}
		if(!sheet.deleteColumn(cname)) {
			return;
		}
		$("#newcol").hide();
		this.refresh();
		this.save();
	}
	,editTypes: function() {
		var _gthis = this;
		if(this.typesStr == null) {
			var tl = [];
			var _g = 0;
			var _g1 = this.base.getCustomTypes();
			while(_g < _g1.length) {
				var t = _g1[_g];
				++_g;
				tl.push("enum " + t.name + " {\n" + this.base.typeCasesToString(t,"\t") + "\n}");
			}
			this.typesStr = tl.join("\n\n");
		}
		var content = $("#content");
		content.html($("#editTypes").html());
		var text = content.find("textarea");
		var apply = content.find("input.button").first();
		var cancel = content.find("input.button").eq(1);
		var types;
		text.change(function(_) {
			var nstr = text.val();
			if(nstr == _gthis.typesStr) {
				return;
			}
			_gthis.typesStr = nstr;
			var errors = [];
			var t1 = StringTools.trim(_gthis.typesStr);
			var r = new EReg("^enum[ \r\n\t]+([A-Za-z0-9_]+)[ \r\n\t]*\\{([^}]*)\\}","");
			var oldTMap = _gthis.base.tmap;
			var descs = [];
			var tmap = new haxe_ds_StringMap();
			_gthis.base.tmap = tmap;
			types = [];
			while(r.match(t1)) {
				var name = r.matched(1);
				var desc = r.matched(2);
				if((__map_reserved[name] != null ? tmap.getReserved(name) : tmap.h[name]) != null) {
					errors.push("Duplicate type " + name);
				}
				var td = { name : name, cases : []};
				if(__map_reserved[name] != null) {
					tmap.setReserved(name,td);
				} else {
					tmap.h[name] = td;
				}
				descs.push(desc);
				types.push(td);
				t1 = StringTools.trim(r.matchedRight());
			}
			var _g2 = 0;
			while(_g2 < types.length) {
				var t2 = types[_g2];
				++_g2;
				try {
					t2.cases = _gthis.base.parseTypeCases(descs.shift());
				} catch( msg ) {
					errors.push((msg instanceof js__$Boot_HaxeError) ? msg.val : msg);
				}
			}
			_gthis.base.tmap = oldTMap;
			if(t1 != "") {
				errors.push("Invalid " + StringTools.htmlEscape(t1));
			}
			var tmp = errors.length == 0 ? null : errors.join("<br>");
			_gthis.setErrorMessage(tmp);
			if(errors.length == 0) {
				apply.removeAttr("disabled");
			} else {
				apply.attr("disabled","");
			}
		});
		text.keydown(function(e) {
			if(e.keyCode == 9) {
				e.preventDefault();
				new js_Selection(text[0]).insert("\t","","");
			}
			e.stopPropagation();
		});
		text.keyup(function(e1) {
			text.change();
			e1.stopPropagation();
		});
		text.val(this.typesStr);
		cancel.click(function(_1) {
			_gthis.typesStr = null;
			_gthis.setErrorMessage();
			_gthis.quickLoad(_gthis.curSavedData);
			_gthis.initContent();
		});
		apply.click(function(_2) {
			var tpairs = _gthis.base.makePairs(_gthis.base.getCustomTypes(),types);
			var _g3 = 0;
			while(_g3 < tpairs.length) {
				var p = tpairs[_g3];
				++_g3;
				if(p.b == null) {
					var t3 = p.a;
					var _g11 = 0;
					var _g21 = _gthis.base.sheets;
					while(_g11 < _g21.length) {
						var s = _g21[_g11];
						++_g11;
						var _g31 = 0;
						var _g4 = s.sheet.columns;
						while(_g31 < _g4.length) {
							var c = _g4[_g31];
							++_g31;
							var _g5 = c.type;
							if(_g5[1] == 9) {
								var name1 = _g5[2];
								if(name1 == t3.name) {
									_gthis.error("Type " + name1 + " used by " + s.sheet.name + "@" + c.name + " cannot be removed");
									return;
								}
							}
						}
					}
				}
			}
			var _g6 = 0;
			while(_g6 < types.length) {
				var t4 = [types[_g6]];
				++_g6;
				if(!Lambda.exists(tpairs,(function(t5) {
					return function(p1) {
						return p1.b == t5[0];
					};
				})(t4))) {
					_gthis.base.getCustomTypes().push(t4[0]);
				}
			}
			var _g7 = 0;
			while(_g7 < tpairs.length) {
				var p2 = tpairs[_g7];
				++_g7;
				if(p2.b == null) {
					HxOverrides.remove(_gthis.base.getCustomTypes(),p2.a);
				} else {
					try {
						_gthis.base.updateType(p2.a,p2.b);
					} catch( msg1 ) {
						var msg2 = (msg1 instanceof js__$Boot_HaxeError) ? msg1.val : msg1;
						if(typeof(msg2) == "string") {
							_gthis.error("Error while updating " + p2.b.name + " : " + msg2);
							return;
						} else {
							throw msg1;
						}
					}
				}
			}
			_gthis.initContent();
			_gthis.typesStr = null;
			_gthis.save();
		});
		this.typesStr = null;
		text.change();
	}
	,newColumn: function(sheetName,ref,index) {
		var form = $("#newcol form");
		this.colProps = { sheet : sheetName, ref : ref, index : index};
		var sheets = $("[name=sheet]");
		sheets.empty();
		var _g1 = 0;
		var _g = this.base.sheets.length;
		while(_g1 < _g) {
			var i = _g1++;
			var s = this.base.sheets[i];
			if(s.sheet.props.hide) {
				continue;
			}
			$("<option>").attr("value","" + i).text(s.sheet.name).appendTo(sheets);
		}
		var types = $("[name=ctype]");
		types.empty();
		types.off("change");
		types.change(function(_) {
			$("#col_options").toggleClass("t_edit",types.val() != "");
		});
		$("<option>").attr("value","").text("--- Select ---").appendTo(types);
		var _g2 = 0;
		var _g11 = this.base.getCustomTypes();
		while(_g2 < _g11.length) {
			var t = _g11[_g2];
			++_g2;
			$("<option>").attr("value","" + t.name).text(t.name).appendTo(types);
		}
		form.removeClass("edit").removeClass("create");
		if(ref != null) {
			form.addClass("edit");
			form.find("[name=name]").val(ref.name);
			form.find("[name=type]").val(HxOverrides.substr(ref.type[0],1,null).toLowerCase()).change();
			form.find("[name=req]").prop("checked",!ref.opt);
			var tmp = ref.display == null ? "0" : Std.string(ref.display);
			form.find("[name=display]").val(tmp);
			form.find("[name=localizable]").prop("checked",ref.kind == "localizable");
			var _g3 = ref.type;
			switch(_g3[1]) {
			case 5:
				var values = _g3[2];
				form.find("[name=values]").val(values.join(","));
				break;
			case 6:
				var sname = _g3[2];
				form.find("[name=sheet]").val("" + this.base.sheets.indexOf(this.base.getSheet(sname)));
				break;
			case 9:
				var name = _g3[2];
				form.find("[name=ctype]").val(name);
				break;
			case 10:
				var values1 = _g3[2];
				form.find("[name=values]").val(values1.join(","));
				break;
			case 12:
				var sname1 = _g3[2];
				form.find("[name=sheet]").val("" + this.base.sheets.indexOf(this.base.getSheet(sname1)));
				break;
			default:
			}
		} else {
			form.addClass("create");
			form.find("input").not("[type=submit]").val("");
			form.find("[name=req]").prop("checked",true);
			form.find("[name=localizable]").prop("checked",false);
		}
		types.change();
		$("#newcol").show();
	}
	,newLine: function(sheet,index) {
		sheet.newLine(index);
		this.refresh();
		this.save();
	}
	,insertLine: function() {
		if(this.cursor.s != null) {
			this.newLine(this.cursor.s);
		}
	}
	,createSheet: function(name,level) {
		name = StringTools.trim(name);
		if(!this.base.r_ident.match(name)) {
			this.error("Invalid sheet name");
			return;
		}
		var s = this.base.createSheet(name);
		if(s == null) {
			this.error("Sheet name already in use");
			return;
		}
		$("#newsheet").hide();
		this.prefs.curSheet = this.base.sheets.length - 1;
		s.sync();
		if(level) {
			this.initLevel(s);
		}
		this.initContent();
		this.save();
	}
	,initLevel: function(s) {
		var cols = [{ n : "id", t : cdb_ColumnType.TId},{ n : "width", t : cdb_ColumnType.TInt},{ n : "height", t : cdb_ColumnType.TInt},{ n : "props", t : cdb_ColumnType.TDynamic},{ n : "tileProps", t : cdb_ColumnType.TList},{ n : "layers", t : cdb_ColumnType.TList}];
		var _g = 0;
		while(_g < cols.length) {
			var c = cols[_g];
			++_g;
			if(s.hasColumn(c.n)) {
				if(!s.hasColumn(c.n,[c.t])) {
					this.error("Column " + c.n + " already exists but does not have type " + Std.string(c.t));
					return;
				}
			} else {
				var col = { name : c.n, type : c.t, typeStr : null};
				s.addColumn(col);
				if(c.n == "layers") {
					var s1 = s.base.getSheet(s.sheet.name + "@" + col.name);
					s1.addColumn({ name : "name", type : cdb_ColumnType.TString, typeStr : null});
					s1.addColumn({ name : "data", type : cdb_ColumnType.TTileLayer, typeStr : null});
				}
			}
		}
		if(s.sheet.props.level == null) {
			s.sheet.props.level = { tileSets : { }};
		}
		if(s.sheet.lines.length == 0 && s.parent == null) {
			var o = s.newLine();
			o.width = 128;
			o.height = 128;
		}
	}
	,createColumn: function() {
		var v = { };
		var cols = $("#col_form input, #col_form select").not("[type=submit]");
		var _g_i = 0;
		var _g_j = cols;
		while(_g_i < _g_j.length) {
			var i = $(_g_j[_g_i++]);
			v[i.attr("name")] = i.attr("type") == "checkbox" ? i.is(":checked") ? "on" : null : i.val();
		}
		var sheet = this.colProps.sheet == null ? this.viewSheet : this.base.getSheet(this.colProps.sheet);
		var refColumn = this.colProps.ref;
		var t;
		var _g = v.type;
		switch(_g) {
		case "bool":
			t = cdb_ColumnType.TBool;
			break;
		case "color":
			t = cdb_ColumnType.TColor;
			break;
		case "custom":
			var t1 = this.base.getCustomType(v.ctype);
			if(t1 == null) {
				this.error("Type not found");
				return;
			}
			t = cdb_ColumnType.TCustom(t1.name);
			break;
		case "dynamic":
			t = cdb_ColumnType.TDynamic;
			break;
		case "enum":
			var vals = StringTools.trim(v.values).split(",");
			if(vals.length == 0) {
				this.error("Missing value list");
				return;
			}
			var _g1 = [];
			var _g11 = 0;
			while(_g11 < vals.length) {
				var f = vals[_g11];
				++_g11;
				_g1.push(StringTools.trim(f));
			}
			t = cdb_ColumnType.TEnum(_g1);
			break;
		case "file":
			t = cdb_ColumnType.TFile;
			break;
		case "flags":
			var vals1 = StringTools.trim(v.values).split(",");
			if(vals1.length == 0) {
				this.error("Missing value list");
				return;
			}
			var _g2 = [];
			var _g12 = 0;
			while(_g12 < vals1.length) {
				var f1 = vals1[_g12];
				++_g12;
				_g2.push(StringTools.trim(f1));
			}
			t = cdb_ColumnType.TFlags(_g2);
			break;
		case "float":
			t = cdb_ColumnType.TFloat;
			break;
		case "id":
			t = cdb_ColumnType.TId;
			break;
		case "image":
			t = cdb_ColumnType.TImage;
			break;
		case "int":
			t = cdb_ColumnType.TInt;
			break;
		case "layer":
			var s = this.base.sheets[Std.parseInt(v.sheet)];
			if(s == null) {
				this.error("Sheet not found");
				return;
			}
			t = cdb_ColumnType.TLayer(s.sheet.name);
			break;
		case "list":
			t = cdb_ColumnType.TList;
			break;
		case "properties":
			t = cdb_ColumnType.TProperties;
			break;
		case "ref":
			var s1 = this.base.sheets[Std.parseInt(v.sheet)];
			if(s1 == null) {
				this.error("Sheet not found");
				return;
			}
			t = cdb_ColumnType.TRef(s1.sheet.name);
			break;
		case "string":
			t = cdb_ColumnType.TString;
			break;
		case "tilelayer":
			t = cdb_ColumnType.TTileLayer;
			break;
		case "tilepos":
			t = cdb_ColumnType.TTilePos;
			break;
		default:
			return;
		}
		var c = { type : t, typeStr : null, name : v.name};
		if(v.req != "on") {
			c.opt = true;
		}
		if(v.display != "0") {
			c.display = Std.parseInt(v.display);
		}
		if(v.localizable == "on") {
			c.kind = "localizable";
		}
		if(refColumn != null) {
			var err = this.base.updateColumn(sheet,refColumn,c);
			if(err != null) {
				this.refresh();
				this.save();
				this.error(err);
				return;
			}
		} else {
			var err1 = sheet.addColumn(c,this.colProps.index);
			if(err1 != null) {
				this.error(err1);
				return;
			}
			if(sheet.sheet.props.isProps && this.cursor.s.sheet.columns == sheet.sheet.columns) {
				var obj = this.cursor.s.sheet.lines[0];
				if(obj != null) {
					obj[c.name] = this.base.getDefault(c,true);
				}
			}
		}
		$("#newcol").hide();
		var _g1_i = 0;
		var _g1_j = cols;
		while(_g1_i < _g1_j.length) {
			var c1 = $(_g1_j[_g1_i++]);
			c1.val("");
		}
		this.refresh();
		this.save();
	}
	,initContent: function() {
		var _gthis = this;
		$("body").spectrum.clearAll();
		var sheets = $("ul#sheets");
		sheets.children().remove();
		var _g1 = 0;
		var _g = this.base.sheets.length;
		while(_g1 < _g) {
			var i = _g1++;
			var s = [this.base.sheets[i]];
			if(s[0].sheet.props.hide) {
				continue;
			}
			var li = [$("<li>")];
			li[0].text(s[0].sheet.name).attr("id","sheet_" + i).appendTo(sheets).click((function(s1) {
				return function(_) {
					_gthis.selectSheet(s1[0]);
				};
			})(s)).dblclick((function(li1,s2) {
				return function(_1) {
					li1[0].empty();
					$("<input>").val(s2[0].sheet.name).appendTo(li1[0]).focus().blur((function(li2,s3) {
						return function(_2) {
							li2[0].text(s3[0].sheet.name);
							var name = $(this).val();
							if(!_gthis.base.r_ident.match(name)) {
								_gthis.error("Invalid sheet name");
								return;
							}
							var f = _gthis.base.getSheet(name);
							if(f != null) {
								if(f != s3[0]) {
									_gthis.error("Sheet name already in use");
								}
								return;
							}
							var old = s3[0].sheet.name;
							s3[0].rename(name);
							_gthis.base.mapType((function() {
								return function(t) {
									switch(t[1]) {
									case 6:
										var o = t[2];
										if(o == old) {
											return cdb_ColumnType.TRef(name);
										} else {
											return t;
										}
										break;
									case 12:
										var o1 = t[2];
										if(o1 == old) {
											return cdb_ColumnType.TLayer(name);
										} else {
											return t;
										}
										break;
									default:
										return t;
									}
								};
							})());
							var _g2 = 0;
							var _g3 = _gthis.base.sheets;
							while(_g2 < _g3.length) {
								var s4 = _g3[_g2];
								++_g2;
								if(StringTools.startsWith(s4.sheet.name,old + "@")) {
									s4.rename(name + "@" + HxOverrides.substr(s4.sheet.name,old.length + 1,null));
								}
							}
							_gthis.initContent();
							_gthis.save();
						};
					})(li1,s2)).keydown((function() {
						return function(e) {
							if(e.keyCode == 13) {
								$(this).blur();
							} else if(e.keyCode == 27) {
								_gthis.initContent();
							}
							e.stopPropagation();
						};
					})()).keypress((function() {
						return function(e1) {
							e1.stopPropagation();
						};
					})());
				};
			})(li,s)).mousedown((function(li3,s5) {
				return function(e2) {
					if(e2.which == 3) {
						var f1 = $bind(_gthis,_gthis.popupSheet);
						var s6 = s5[0];
						var li4 = li3[0];
						haxe_Timer.delay((function() {
							return function() {
								f1(s6,li4);
							};
						})(),1);
						e2.stopPropagation();
					}
				};
			})(li,s));
		}
		this.pages.updateTabs();
		var s7 = this.base.sheets[this.prefs.curSheet];
		if(s7 == null) {
			s7 = this.base.sheets[0];
		}
		if(s7 != null) {
			this.selectSheet(s7,false);
		}
		var old1 = this.levels;
		var lcur = null;
		this.levels = [];
		var _g4 = 0;
		while(_g4 < old1.length) {
			var level = old1[_g4];
			++_g4;
			if(this.base.getSheet(level.sheetPath) == null) {
				continue;
			}
			var s8 = this.base.getSheet(level.sheetPath);
			if(s8.sheet.lines.length < level.index) {
				continue;
			}
			var l = [new Level(this,s8,level.index)];
			if(level == this.level) {
				lcur = l[0];
			}
			this.levels.push(l[0]);
			var li5 = $("<li>");
			var name1 = level.getName();
			if(name1 == "") {
				name1 = "???";
			}
			li5.text(name1).attr("id","level_" + l[0].sheetPath.split(".").join("_") + "_" + l[0].index).appendTo(sheets).click((function(l1) {
				return function(_3) {
					_gthis.selectLevel(l1[0]);
				};
			})(l));
		}
		if(this.pages.curPage >= 0) {
			this.pages.select();
		} else if(lcur != null) {
			this.selectLevel(lcur);
		} else if(this.base.sheets.length == 0) {
			$("#content").html("<a href='javascript:_.newSheet()'>Create a sheet</a>");
		} else {
			this.refresh();
		}
	}
	,cleanLayers: function() {
		var count = 0;
		var _g = 0;
		var _g1 = this.base.sheets;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.sheet.props.level == null) {
				continue;
			}
			var ts = s.sheet.props.level.tileSets;
			var usedLayers = new haxe_ds_StringMap();
			var _g2 = 0;
			var _g3 = s.sheet.columns;
			while(_g2 < _g3.length) {
				var c = _g3[_g2];
				++_g2;
				var _g4 = c.type;
				if(_g4[1] == 8) {
					var sub = s.base.getSheet(s.sheet.name + "@" + c.name);
					if(!sub.hasColumn("data",[cdb_ColumnType.TTileLayer])) {
						continue;
					}
					var _g41 = 0;
					var _g5 = sub.getLines();
					while(_g41 < _g5.length) {
						var obj = _g5[_g41];
						++_g41;
						var v = obj.data;
						if(v == null || v.file == null) {
							continue;
						}
						var key = v.file;
						if(__map_reserved[key] != null) {
							usedLayers.setReserved(key,true);
						} else {
							usedLayers.h[key] = true;
						}
					}
				}
			}
			var _g21 = 0;
			var _g31 = Reflect.fields(ts);
			while(_g21 < _g31.length) {
				var f = _g31[_g21];
				++_g21;
				if(!(__map_reserved[f] != null ? usedLayers.getReserved(f) : usedLayers.h[f])) {
					Reflect.deleteField(ts,f);
					++count;
				}
			}
		}
		return count;
	}
	,initMenu: function() {
		var _gthis = this;
		var modifier = "ctrl";
		if(Sys.systemName().indexOf("Mac") != -1) {
			modifier = "cmd";
		}
		var menu = new js_node_webkit_Menu({ type : "menubar"});
		var mfile = new js_node_webkit_MenuItem({ label : "File"});
		var mfiles = new js_node_webkit_Menu();
		var mnew = new js_node_webkit_MenuItem({ label : "New", key : "N", modifiers : modifier});
		var mopen = new js_node_webkit_MenuItem({ label : "Open...", key : "O", modifiers : modifier});
		var mrecent = new js_node_webkit_MenuItem({ label : "Recent Files"});
		var msave = new js_node_webkit_MenuItem({ label : "Save As...", key : "S", modifiers : "shift+" + modifier});
		var mclean = new js_node_webkit_MenuItem({ label : "Clean Images"});
		var mexport = new js_node_webkit_MenuItem({ label : "Export Localized texts"});
		this.mcompress = new js_node_webkit_MenuItem({ label : "Enable Compression", type : "checkbox"});
		this.mcompress.click = function() {
			_gthis.base.set_compress(_gthis.mcompress.checked);
			_gthis.save();
		};
		var mabout = new js_node_webkit_MenuItem({ label : "About"});
		var mexit = new js_node_webkit_MenuItem({ label : "Exit", key : "Q", modifiers : modifier});
		var mdebug = new js_node_webkit_MenuItem({ label : "Dev"});
		mnew.click = function() {
			_gthis.prefs.curFile = null;
			_gthis.load(true);
		};
		mdebug.click = function() {
			_gthis.window.showDevTools();
		};
		mopen.click = function() {
			var i = $("<input>").attr("type","file").css("display","none").change(function(e) {
				var j = $(this);
				_gthis.prefs.curFile = j.val();
				_gthis.load();
				j.remove();
			});
			i.appendTo($("body"));
			i.click();
		};
		msave.click = function() {
			var i1 = $("<input>").attr("type","file").attr("nwsaveas","new.cdb").css("display","none").change(function(e1) {
				var j1 = $(this);
				_gthis.prefs.curFile = j1.val();
				_gthis.save();
				j1.remove();
			});
			i1.appendTo($("body"));
			i1.click();
		};
		mclean.click = function() {
			var lcount = _gthis.cleanLayers();
			var icount = 0;
			if(_gthis.imageBank != null) {
				var count = Reflect.fields(_gthis.imageBank).length;
				_gthis.cleanImages();
				var count2 = Reflect.fields(_gthis.imageBank).length;
				icount = count - count2;
				if(count2 == 0) {
					_gthis.imageBank = null;
				}
			}
			var tmp = [lcount + " tileset data removed",icount + " unused images removed"].join("\n");
			_gthis.error(tmp);
			_gthis.refresh();
			if(lcount > 0) {
				_gthis.save();
			}
			if(icount > 0) {
				_gthis.saveImages();
			}
		};
		mexit.click = function() {
			process.exit(0);
		};
		mabout.click = function() {
			$("#about").show();
		};
		var mrecents = new js_node_webkit_Menu();
		var _g = 0;
		var _g1 = this.prefs.recent;
		while(_g < _g1.length) {
			var file = [_g1[_g]];
			++_g;
			var m = new js_node_webkit_MenuItem({ label : file[0]});
			m.click = (function(file1) {
				return function() {
					_gthis.prefs.curFile = file1[0];
					_gthis.load();
				};
			})(file);
			mrecents.append(m);
		}
		mrecent.submenu = mrecents;
		var m1 = mnew;
		mfiles.append(m1);
		var m2 = mopen;
		mfiles.append(m2);
		var m3 = mrecent;
		mfiles.append(m3);
		var m4 = msave;
		mfiles.append(m4);
		var m5 = mclean;
		mfiles.append(m5);
		var m6 = this.mcompress;
		mfiles.append(m6);
		var m7 = mexport;
		mfiles.append(m7);
		var m8 = mabout;
		mfiles.append(m8);
		var m9 = mexit;
		mfiles.append(m9);
		mfile.submenu = mfiles;
		mexport.click = function() {
			var lang = new cdb_Lang(_gthis.base.data);
			var xml = lang.buildXML();
			var i2 = $("<input>").attr("type","file").attr("nwsaveas","export.xml").css("display","none").change(function(e2) {
				var j2 = $(this);
				var file2 = j2.val();
				js_node_Fs.writeFileSync(file2,String.fromCharCode(65279) + xml);
				j2.remove();
			});
			i2.appendTo($("body"));
			i2.click();
		};
		menu.append(mfile);
		menu.append(mdebug);
		this.window.menu = menu;
		if(this.prefs.windowPos.x > 0 && this.prefs.windowPos.y > 0) {
			this.window.moveTo(this.prefs.windowPos.x,this.prefs.windowPos.y);
		}
		if(this.prefs.windowPos.w > 50 && this.prefs.windowPos.h > 50) {
			this.window.resizeTo(this.prefs.windowPos.w,this.prefs.windowPos.h);
		}
		this.window.show();
		if(this.prefs.windowPos.max) {
			this.window.maximize();
		}
		this.window.on("close",function() {
			if(_gthis.prefs.curFile == null && _gthis.base.sheets.length > 0) {
				if(!window.confirm("Do you want to exit without saving your changes?")) {
					return;
				}
			}
			if(!_gthis.prefs.windowPos.max) {
				_gthis.prefs.windowPos = { x : _gthis.window.x, y : _gthis.window.y, w : _gthis.window.width, h : _gthis.window.height, max : false};
			}
			_gthis.savePrefs();
			_gthis.window.close(true);
		});
		this.window.on("maximize",function() {
			_gthis.prefs.windowPos.max = true;
		});
		this.window.on("unmaximize",function() {
			_gthis.prefs.windowPos.max = false;
		});
	}
	,getFileTime: function() {
		try {
			return js_node_Fs.statSync(this.prefs.curFile).mtime.getTime();
		} catch( e ) {
			var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
			return 0.;
		}
	}
	,checkTime: function() {
		if(this.prefs.curFile == null) {
			return;
		}
		var fileTime = this.getFileTime();
		if(fileTime != this.lastSave && fileTime != 0) {
			this.load();
		}
	}
	,load: function(noError) {
		if(noError == null) {
			noError = false;
		}
		if(sys_FileSystem.exists(this.prefs.curFile + ".mine") && !Resolver.resolveConflict(this.prefs.curFile)) {
			this.error("CDB file has unresolved conflict, merge by hand before reloading.");
			return;
		}
		this.lastSave = this.getFileTime();
		Model.prototype.load.call(this,noError);
		this.initContent();
		HxOverrides.remove(this.prefs.recent,this.prefs.curFile);
		this.prefs.recent.unshift(this.prefs.curFile);
		if(this.prefs.recent.length > 8) {
			this.prefs.recent.pop();
		}
		this.mcompress.checked = this.base.data.compress;
	}
	,save: function(history) {
		if(history == null) {
			history = true;
		}
		Model.prototype.save.call(this,history);
		this.lastSave = this.getFileTime();
	}
	,__class__: Main
});
Math.__name__ = ["Math"];
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.isObject = function(v) {
	if(v == null) {
		return false;
	}
	var t = typeof(v);
	if(!(t == "string" || t == "object" && v.__enum__ == null)) {
		if(t == "function") {
			return (v.__name__ || v.__ename__) != null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
Reflect.copy = function(o) {
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		o2[f] = Reflect.field(o,f);
	}
	return o2;
};
var Resolver = function() {
	this.hasError = false;
};
$hxClasses["Resolver"] = Resolver;
Resolver.__name__ = ["Resolver"];
Resolver.resolveConflict = function(file) {
	return new Resolver().check(file);
};
Resolver.prototype = {
	check: function(file) {
		var minRev = 0;
		var maxRev = 0;
		var basePath = file.split("\\").join("/").split("/").pop();
		var _g = 0;
		var _g1 = js_node_Fs.readdirSync(HxOverrides.substr(file,0,-basePath.length));
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			if(StringTools.startsWith(f,basePath + ".r")) {
				var rev = Std.parseInt(HxOverrides.substr(f,basePath.length + 2,null));
				if(minRev == 0 || minRev > rev) {
					minRev = rev;
				}
				if(maxRev == 0 || maxRev < rev) {
					maxRev = rev;
				}
			}
		}
		var merged = js_node_Fs.readFileSync(file,{ encoding : "utf8"}).split("<<<<<<< .mine");
		if(merged.length == 1) {
			return true;
		}
		var endConflict = new EReg(">>>>>>> \\.r[0-9]+[\r\n]+","");
		var _g11 = 1;
		var _g2 = merged.length;
		while(_g11 < _g2) {
			var i = _g11++;
			endConflict.match(merged[i]);
			merged[i] = endConflict.matchedLeft().split("=======").shift() + endConflict.matchedRight();
		}
		var mine = JSON.parse(merged.join(""));
		var origin = JSON.parse(js_node_Fs.readFileSync(file + ".r" + minRev,{ encoding : "utf8"}));
		var other = JSON.parse(js_node_Fs.readFileSync(file + ".r" + maxRev,{ encoding : "utf8"}));
		this.hasError = false;
		try {
			this.resolveRec(mine,origin,other,[]);
		} catch( e ) {
			var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
			if(typeof(e1) == "string") {
				this.error(e1);
				this.hasError = true;
			} else {
				throw e;
			}
		}
		if(this.hasError) {
			return false;
		}
		try {
			js_node_Fs.writeFileSync(process.env["TEMP"] + "/" + basePath + ".merged" + minRev + "_" + maxRev,js_node_Fs.readFileSync(file,{ encoding : "utf8"}));
		} catch( e2 ) {
			var e3 = (e2 instanceof js__$Boot_HaxeError) ? e2.val : e2;
		}
		js_node_Fs.writeFileSync(file,JSON.stringify(other,null,"\t"));
		js_node_Fs.unlinkSync(file + ".mine");
		js_node_Fs.unlinkSync(file + ".r" + minRev);
		js_node_Fs.unlinkSync(file + ".r" + maxRev);
		return true;
	}
	,resolveError: function(message,path) {
		this.error(message + "\n  in\n" + path.join("."));
		this.hasError = true;
	}
	,resolveRec: function(mine,origin,other,path) {
		if(mine == origin || mine == other) {
			return other;
		}
		if(other == origin) {
			return mine;
		}
		if((mine instanceof Array) && mine.__enum__ == null) {
			var target = other;
			if(origin == null) {
				origin = [];
				if(target == null) {
					other = [];
					target = other;
				}
			} else if(target == null) {
				target = [];
			} else if(other.length != mine.length) {
				this.resolveError("Array resize conflict",path);
			}
			var _g1 = 0;
			var _g = mine.length;
			while(_g1 < _g) {
				var i = _g1++;
				var mv = mine[i];
				var name = Reflect.field(mv,"id");
				if(name == null) {
					name = Reflect.field(mv,"name");
				}
				path.push(typeof(name) == "string" ? name + "#" + i : "[" + i + "]");
				target[i] = this.resolveRec(mv,origin[i],target[i],path);
				path.pop();
			}
		} else if(Reflect.isObject(mine) && typeof(mine) != "string") {
			var target1 = other;
			if(origin == null) {
				origin = { };
				if(other == null) {
					other = { };
					target1 = other;
				}
			} else if(target1 == null) {
				target1 = { };
			}
			var _g2 = 0;
			var _g11 = Reflect.fields(target1);
			while(_g2 < _g11.length) {
				var f = _g11[_g2];
				++_g2;
				if(!Object.prototype.hasOwnProperty.call(mine,f)) {
					mine[f] = null;
				}
			}
			var _g3 = 0;
			var _g12 = Reflect.fields(mine);
			while(_g3 < _g12.length) {
				var f1 = _g12[_g3];
				++_g3;
				path.push(f1);
				target1[f1] = this.resolveRec(Reflect.field(mine,f1),Reflect.field(origin,f1),Reflect.field(target1,f1),path);
				path.pop();
			}
		} else {
			if(typeof(mine) == "string" && typeof(other) == "string") {
				try {
					var dorigin = cdb_Lz4Reader.decodeString(origin);
					var dmine = cdb_Lz4Reader.decodeString(mine);
					var dother = cdb_Lz4Reader.decodeString(other);
					if(dorigin.length != dmine.length || dorigin.length != dother.length) {
						throw new js__$Boot_HaxeError("resized");
					}
					var _g13 = 0;
					var _g4 = dorigin.length;
					while(_g13 < _g4) {
						var i1 = _g13++;
						var mine1 = dmine.b[i1];
						var origin1 = dorigin.b[i1];
						var other1 = dother.b[i1];
						if(mine1 == origin1 || mine1 == other1) {
							continue;
						}
						if(other1 == origin1) {
							dother.b[i1] = mine1 & 255;
						} else {
							throw new js__$Boot_HaxeError("conflict");
						}
					}
					return cdb_Lz4Reader.encodeBytes(dother,other.substr(0,5) == "BCJNG");
				} catch( e ) {
					var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
				}
			}
			var display = function(v) {
				var str = Std.string(v);
				if(str.length > 50) {
					str = HxOverrides.substr(str,0,50) + "...";
				}
				return str;
			};
			var r = window.confirm("A conflict has been found in " + path.join(".") + "\nOrigin = " + display(origin) + "    Mine = " + display(mine) + "    Other = " + display(other) + "\nDo you want to keep your changes (OK) or discard them (CANCEL) ?\n\n");
			if(!window.confirm("Are you sure ?")) {
				throw new js__$Boot_HaxeError("Resolve aborted");
			}
			if(r) {
				other = mine;
			}
		}
		return other;
	}
	,error: function(msg) {
		js_Browser.alert(msg);
	}
	,__class__: Resolver
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.int = function(x) {
	return x | 0;
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.htmlEscape = function(s,quotes) {
	s = s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
	if(quotes) {
		return s.split("\"").join("&quot;").split("'").join("&#039;");
	} else {
		return s;
	}
};
StringTools.htmlUnescape = function(s) {
	return s.split("&gt;").join(">").split("&lt;").join("<").split("&quot;").join("\"").split("&#039;").join("'").split("&amp;").join("&");
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return HxOverrides.substr(s,slen - elen,elen) == end;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var Sys = function() { };
$hxClasses["Sys"] = Sys;
Sys.__name__ = ["Sys"];
Sys.systemName = function() {
	var _g = process.platform;
	switch(_g) {
	case "darwin":
		return "Mac";
	case "freebsd":
		return "BSD";
	case "linux":
		return "Linux";
	case "win32":
		return "Windows";
	default:
		var other = _g;
		return other;
	}
};
var ValueType = $hxClasses["ValueType"] = { __ename__ : ["ValueType"], __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.getEnumName = function(e) {
	var a = e.__ename__;
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) {
		return null;
	}
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) {
		return null;
	}
	return e;
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum(e);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		if(a[0] != b[0]) {
			return false;
		}
		var _g1 = 2;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(!Type.enumEq(a[i],b[i])) {
				return false;
			}
		}
		var e = a.__enum__;
		if(e != b.__enum__ || e == null) {
			return false;
		}
	} catch( e1 ) {
		var e2 = (e1 instanceof js__$Boot_HaxeError) ? e1.val : e1;
		return false;
	}
	return true;
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = ["Xml"];
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.getReserved(att);
		} else {
			return _this.h[att];
		}
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			_this.setReserved(att,value);
		} else {
			_this.h[att] = value;
		}
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.existsReserved(att);
		} else {
			return _this.h.hasOwnProperty(att);
		}
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		return this.attributeMap.keys();
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		var ret = _g;
		return HxOverrides.iter(ret);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var cdb_ColumnType = $hxClasses["cdb.ColumnType"] = { __ename__ : ["cdb","ColumnType"], __constructs__ : ["TId","TString","TBool","TInt","TFloat","TEnum","TRef","TImage","TList","TCustom","TFlags","TColor","TLayer","TFile","TTilePos","TTileLayer","TDynamic","TProperties"] };
cdb_ColumnType.TId = ["TId",0];
cdb_ColumnType.TId.toString = $estr;
cdb_ColumnType.TId.__enum__ = cdb_ColumnType;
cdb_ColumnType.TString = ["TString",1];
cdb_ColumnType.TString.toString = $estr;
cdb_ColumnType.TString.__enum__ = cdb_ColumnType;
cdb_ColumnType.TBool = ["TBool",2];
cdb_ColumnType.TBool.toString = $estr;
cdb_ColumnType.TBool.__enum__ = cdb_ColumnType;
cdb_ColumnType.TInt = ["TInt",3];
cdb_ColumnType.TInt.toString = $estr;
cdb_ColumnType.TInt.__enum__ = cdb_ColumnType;
cdb_ColumnType.TFloat = ["TFloat",4];
cdb_ColumnType.TFloat.toString = $estr;
cdb_ColumnType.TFloat.__enum__ = cdb_ColumnType;
cdb_ColumnType.TEnum = function(values) { var $x = ["TEnum",5,values]; $x.__enum__ = cdb_ColumnType; $x.toString = $estr; return $x; };
cdb_ColumnType.TRef = function(sheet) { var $x = ["TRef",6,sheet]; $x.__enum__ = cdb_ColumnType; $x.toString = $estr; return $x; };
cdb_ColumnType.TImage = ["TImage",7];
cdb_ColumnType.TImage.toString = $estr;
cdb_ColumnType.TImage.__enum__ = cdb_ColumnType;
cdb_ColumnType.TList = ["TList",8];
cdb_ColumnType.TList.toString = $estr;
cdb_ColumnType.TList.__enum__ = cdb_ColumnType;
cdb_ColumnType.TCustom = function(name) { var $x = ["TCustom",9,name]; $x.__enum__ = cdb_ColumnType; $x.toString = $estr; return $x; };
cdb_ColumnType.TFlags = function(values) { var $x = ["TFlags",10,values]; $x.__enum__ = cdb_ColumnType; $x.toString = $estr; return $x; };
cdb_ColumnType.TColor = ["TColor",11];
cdb_ColumnType.TColor.toString = $estr;
cdb_ColumnType.TColor.__enum__ = cdb_ColumnType;
cdb_ColumnType.TLayer = function(type) { var $x = ["TLayer",12,type]; $x.__enum__ = cdb_ColumnType; $x.toString = $estr; return $x; };
cdb_ColumnType.TFile = ["TFile",13];
cdb_ColumnType.TFile.toString = $estr;
cdb_ColumnType.TFile.__enum__ = cdb_ColumnType;
cdb_ColumnType.TTilePos = ["TTilePos",14];
cdb_ColumnType.TTilePos.toString = $estr;
cdb_ColumnType.TTilePos.__enum__ = cdb_ColumnType;
cdb_ColumnType.TTileLayer = ["TTileLayer",15];
cdb_ColumnType.TTileLayer.toString = $estr;
cdb_ColumnType.TTileLayer.__enum__ = cdb_ColumnType;
cdb_ColumnType.TDynamic = ["TDynamic",16];
cdb_ColumnType.TDynamic.toString = $estr;
cdb_ColumnType.TDynamic.__enum__ = cdb_ColumnType;
cdb_ColumnType.TProperties = ["TProperties",17];
cdb_ColumnType.TProperties.toString = $estr;
cdb_ColumnType.TProperties.__enum__ = cdb_ColumnType;
var cdb__$Data_TileMode_$Impl_$ = {};
$hxClasses["cdb._Data.TileMode_Impl_"] = cdb__$Data_TileMode_$Impl_$;
cdb__$Data_TileMode_$Impl_$.__name__ = ["cdb","_Data","TileMode_Impl_"];
cdb__$Data_TileMode_$Impl_$._new = function(s) {
	var this1 = s;
	return this1;
};
cdb__$Data_TileMode_$Impl_$.ofString = function(s) {
	return cdb__$Data_TileMode_$Impl_$._new(s);
};
cdb__$Data_TileMode_$Impl_$.toString = function(this1) {
	return this1;
};
var cdb_Database = function() {
	this.r_ident = new EReg("^[A-Za-z_][A-Za-z0-9_]*$","");
	this.data = { sheets : [], customTypes : [], compress : false};
	this.sheets = [];
	this.sync();
};
$hxClasses["cdb.Database"] = cdb_Database;
cdb_Database.__name__ = ["cdb","Database"];
cdb_Database.prototype = {
	get_compress: function() {
		return this.data.compress;
	}
	,set_compress: function(b) {
		if(this.data.compress == b) {
			return b;
		}
		this.data.compress = b;
		var _g = 0;
		var _g1 = this.sheets;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = s.sheet.columns;
			while(_g2 < _g3.length) {
				var c = _g3[_g2];
				++_g2;
				var _g4 = c.type;
				switch(_g4[1]) {
				case 12:
					var _g41 = 0;
					var _g5 = s.getLines();
					while(_g41 < _g5.length) {
						var obj = _g5[_g41];
						++_g41;
						var ldat = Reflect.field(obj,c.name);
						if(ldat == null || ldat == "") {
							continue;
						}
						var _g6 = [];
						var _g7 = 0;
						while(_g7 < 256) {
							var i = _g7++;
							_g6.push(i);
						}
						var d = cdb__$Types_Layer_$Impl_$.decode(ldat,_g6);
						ldat = cdb__$Types_Layer_$Impl_$.encode(d,this.data.compress);
						obj[c.name] = ldat;
					}
					break;
				case 15:
					var _g42 = 0;
					var _g51 = s.getLines();
					while(_g42 < _g51.length) {
						var obj1 = _g51[_g42];
						++_g42;
						var ldat1 = Reflect.field(obj1,c.name);
						if(ldat1 == null || ldat1 == "") {
							continue;
						}
						var d1 = cdb__$Types_TileLayerData_$Impl_$.decode(ldat1.data);
						ldat1["data"] = cdb__$Types_TileLayerData_$Impl_$.encode(d1,this.data.compress);
					}
					break;
				default:
				}
			}
		}
		return b;
	}
	,getCustomType: function(name) {
		var _this = this.tmap;
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	,getSheet: function(name) {
		var _this = this.smap;
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	,createSheet: function(name) {
		var _g = 0;
		var _g1 = this.sheets;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.sheet.name == name) {
				return null;
			}
		}
		var s1 = { name : name, columns : [], lines : [], separators : [], props : { }};
		return this.addSheet(s1);
	}
	,addSheet: function(s) {
		var sobj = new cdb_Sheet(this,s);
		this.data.sheets.push(s);
		sobj.sync();
		this.sheets.push(sobj);
		return sobj;
	}
	,createSubSheet: function(s,c) {
		var s1 = { name : s.sheet.name + "@" + c.name, props : { hide : true}, separators : [], lines : [], columns : []};
		if(c.type == cdb_ColumnType.TProperties) {
			s1.props.isProps = true;
		}
		return this.addSheet(s1);
	}
	,sync: function() {
		this.smap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = this.sheets;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			s.sync();
		}
		this.tmap = new haxe_ds_StringMap();
		var _g2 = 0;
		var _g11 = this.data.customTypes;
		while(_g2 < _g11.length) {
			var t = _g11[_g2];
			++_g2;
			var key = t.name;
			var _this = this.tmap;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,t);
			} else {
				_this.h[key] = t;
			}
		}
	}
	,getCustomTypes: function() {
		return this.data.customTypes;
	}
	,load: function(content) {
		this.data = cdb_Parser.parse(content);
		var _g = [];
		var _g1 = 0;
		var _g2 = this.data.sheets;
		while(_g1 < _g2.length) {
			var s = _g2[_g1];
			++_g1;
			_g.push(new cdb_Sheet(this,s));
		}
		this.sheets = _g;
		this.sync();
	}
	,save: function() {
		var _g = 0;
		var _g1 = this.sheets;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = Reflect.fields(s.sheet.props);
			while(_g2 < _g3.length) {
				var p = _g3[_g2];
				++_g2;
				var v = Reflect.field(s.sheet.props,p);
				if(v == null || v == false) {
					Reflect.deleteField(s.sheet.props,p);
				}
			}
			if(s.sheet.props.hasIndex) {
				var lines = s.getLines();
				var _g31 = 0;
				var _g21 = lines.length;
				while(_g31 < _g21) {
					var i = _g31++;
					lines[i].index = i;
				}
			}
			if(s.sheet.props.hasGroup) {
				var lines1 = s.getLines();
				var gid = 0;
				var sindex = 0;
				var titles = s.sheet.props.separatorTitles;
				if(titles != null) {
					if(s.sheet.separators[sindex] == 0 && titles[sindex] != null) {
						++sindex;
					}
					var _g32 = 0;
					var _g22 = lines1.length;
					while(_g32 < _g22) {
						var i1 = _g32++;
						if(s.sheet.separators[sindex] == i1) {
							if(titles[sindex] != null) {
								++gid;
							}
							++sindex;
						}
						lines1[i1].group = gid;
					}
				}
			}
		}
		return cdb_Parser.save(this.data);
	}
	,getDefault: function(c,ignoreOpt) {
		if(ignoreOpt == null) {
			ignoreOpt = false;
		}
		if(c.opt && !ignoreOpt) {
			return null;
		}
		var _g = c.type;
		switch(_g[1]) {
		case 2:
			return false;
		case 3:case 4:case 5:case 10:case 11:
			return 0;
		case 6:
			var s = _g[2];
			var s1 = this.getSheet(s);
			var l = s1.sheet.lines[0];
			var id = "";
			if(l != null) {
				var _g1 = 0;
				var _g11 = s1.sheet.columns;
				while(_g1 < _g11.length) {
					var c1 = _g11[_g1];
					++_g1;
					if(c1.type == cdb_ColumnType.TId) {
						id = Reflect.field(l,c1.name);
						break;
					}
				}
			}
			return id;
		case 8:
			return [];
		case 0:case 1:case 7:case 12:case 13:
			return "";
		case 9:case 14:case 15:case 16:
			return null;
		case 17:
			return { };
		}
	}
	,typeStr: function(t) {
		switch(t[1]) {
		case 6:
			var n = t[2];
			return n;
		case 9:
			var n1 = t[2];
			return n1;
		default:
			return HxOverrides.substr(Std.string(t),1,null);
		}
	}
	,updateColumn: function(sheet,old,c) {
		if(old.name != c.name) {
			var _g = 0;
			var _g1 = sheet.sheet.columns;
			while(_g < _g1.length) {
				var c2 = _g1[_g];
				++_g;
				if(c2.name == c.name) {
					return "Column name already used";
				}
			}
			if(c.name == "index" && sheet.sheet.props.hasIndex) {
				return "Sheet already has an index";
			}
			if(c.name == "group" && sheet.sheet.props.hasGroup) {
				return "Sheet already has a group";
			}
			var _g2 = 0;
			var _g11 = sheet.getLines();
			while(_g2 < _g11.length) {
				var o = _g11[_g2];
				++_g2;
				var v = Reflect.field(o,old.name);
				Reflect.deleteField(o,old.name);
				if(v != null) {
					o[c.name] = v;
				}
			}
			var renameRec = null;
			renameRec = function(sheet1,col) {
				var s = sheet1.base.getSheet(sheet1.sheet.name + "@" + col.name);
				s.rename(sheet1.sheet.name + "@" + c.name);
				var _g3 = 0;
				var _g12 = s.sheet.columns;
				while(_g3 < _g12.length) {
					var c1 = _g12[_g3];
					++_g3;
					if(c1.type == cdb_ColumnType.TList || c1.type == cdb_ColumnType.TProperties) {
						renameRec(s,c1);
					}
				}
				s.sync();
			};
			var renameRec1 = renameRec;
			if(old.type == cdb_ColumnType.TList || old.type == cdb_ColumnType.TProperties) {
				renameRec1(sheet,old);
			}
			old.name = c.name;
		}
		if(!Type.enumEq(old.type,c.type)) {
			var conv = this.getConvFunction(old.type,c.type);
			if(conv == null) {
				return "Cannot convert " + this.typeStr(old.type) + " to " + this.typeStr(c.type);
			}
			var conv1 = conv.f;
			if(conv1 != null) {
				var _g4 = 0;
				var _g13 = sheet.getLines();
				while(_g4 < _g13.length) {
					var o1 = _g13[_g4];
					++_g4;
					var v1 = Reflect.field(o1,c.name);
					if(v1 != null) {
						v1 = conv1(v1);
						if(v1 != null) {
							o1[c.name] = v1;
						} else {
							Reflect.deleteField(o1,c.name);
						}
					}
				}
			}
			old.type = c.type;
			old.typeStr = null;
		}
		if(old.opt != c.opt) {
			if(old.opt) {
				var _g5 = 0;
				var _g14 = sheet.getLines();
				while(_g5 < _g14.length) {
					var o2 = _g14[_g5];
					++_g5;
					var v2 = Reflect.field(o2,c.name);
					if(v2 == null) {
						v2 = this.getDefault(c);
						if(v2 != null) {
							o2[c.name] = v2;
						}
					}
				}
			} else {
				var _g6 = old.type;
				if(_g6[1] != 5) {
					var def = this.getDefault(old);
					var _g7 = 0;
					var _g15 = sheet.getLines();
					while(_g7 < _g15.length) {
						var o3 = _g15[_g7];
						++_g7;
						var v3 = Reflect.field(o3,c.name);
						var _g21 = c.type;
						switch(_g21[1]) {
						case 8:
							var v4 = v3;
							if(v4.length == 0) {
								Reflect.deleteField(o3,c.name);
							}
							break;
						case 17:
							if(Reflect.fields(v3).length == 0) {
								Reflect.deleteField(o3,c.name);
							}
							break;
						default:
							if(v3 == def) {
								Reflect.deleteField(o3,c.name);
							}
						}
					}
				}
			}
			old.opt = c.opt;
		}
		if(c.display == null) {
			Reflect.deleteField(old,"display");
		} else {
			old.display = c.display;
		}
		if(c.kind == null) {
			Reflect.deleteField(old,"kind");
		} else {
			old.kind = c.kind;
		}
		sheet.sync();
		return null;
	}
	,makePairs: function(oldA,newA) {
		var pairs = [];
		var oldL = Lambda.list(oldA);
		var newL = Lambda.list(newA);
		var _g = 0;
		while(_g < oldA.length) {
			var a = oldA[_g];
			++_g;
			var _g1_head = newL.h;
			while(_g1_head != null) {
				var val = _g1_head.item;
				_g1_head = _g1_head.next;
				var b = val;
				if(a.name == b.name) {
					pairs.push({ a : a, b : b});
					oldL.remove(a);
					newL.remove(b);
					break;
				}
			}
		}
		var _g_head = oldL.h;
		while(_g_head != null) {
			var val1 = _g_head.item;
			_g_head = _g_head.next;
			var a1 = val1;
			var _g_head1 = newL.h;
			while(_g_head1 != null) {
				var val2 = _g_head1.item;
				_g_head1 = _g_head1.next;
				var b1 = val2;
				if(Lambda.indexOf(oldA,a1) == Lambda.indexOf(newA,b1)) {
					pairs.push({ a : a1, b : b1});
					oldL.remove(a1);
					newL.remove(b1);
					break;
				}
			}
		}
		var _g_head2 = oldL.h;
		while(_g_head2 != null) {
			var val3 = _g_head2.item;
			_g_head2 = _g_head2.next;
			var a2 = val3;
			pairs.push({ a : a2, b : null});
		}
		return pairs;
	}
	,getConvFunction: function(old,t) {
		var conv = null;
		if(Type.enumEq(old,t)) {
			return { f : null};
		}
		switch(old[1]) {
		case 1:
			switch(t[1]) {
			case 2:
				conv = function(s) {
					return s != "";
				};
				break;
			case 3:
				conv = Std.parseInt;
				break;
			case 4:
				conv = function(str) {
					var f = parseFloat(str);
					if(isNaN(f)) {
						return null;
					} else {
						return f;
					}
				};
				break;
			case 5:
				var values = t[2];
				var map = new haxe_ds_StringMap();
				var _g1 = 0;
				var _g = values.length;
				while(_g1 < _g) {
					var i = _g1++;
					var key = values[i].toLowerCase();
					if(__map_reserved[key] != null) {
						map.setReserved(key,i);
					} else {
						map.h[key] = i;
					}
				}
				conv = function(s1) {
					var key1 = s1.toLowerCase();
					return __map_reserved[key1] != null ? map.getReserved(key1) : map.h[key1];
				};
				break;
			case 0:case 6:case 12:
				var r_invalid_r = new RegExp("[^A-Za-z0-9_]","g".split("u").join(""));
				conv = function(r) {
					return r.replace(r_invalid_r,"_");
				};
				break;
			default:
				return null;
			}
			break;
		case 2:
			switch(t[1]) {
			case 1:
				conv = Std.string;
				break;
			case 3:case 4:
				conv = function(b) {
					if(b) {
						return 1;
					} else {
						return 0;
					}
				};
				break;
			default:
				return null;
			}
			break;
		case 3:
			switch(t[1]) {
			case 1:
				conv = Std.string;
				break;
			case 2:
				conv = function(v) {
					return v != 0;
				};
				break;
			case 4:
				break;
			case 5:
				var values1 = t[2];
				conv = function(i1) {
					if(i1 < 0 || i1 >= values1.length) {
						return null;
					} else {
						return i1;
					}
				};
				break;
			case 11:
				conv = function(i2) {
					return i2;
				};
				break;
			default:
				return null;
			}
			break;
		case 4:
			switch(t[1]) {
			case 1:
				conv = Std.string;
				break;
			case 2:
				conv = function(v1) {
					return v1 != 0;
				};
				break;
			case 3:
				conv = Std.int;
				break;
			default:
				return null;
			}
			break;
		case 5:
			switch(t[1]) {
			case 3:
				var values2 = old[2];
				break;
			case 5:
				var values11 = old[2];
				var values21 = t[2];
				var map1 = [];
				var _g2 = 0;
				var _g3 = [];
				var _g21 = 0;
				var _g11 = values11.length;
				while(_g21 < _g11) {
					var i3 = _g21++;
					_g3.push({ name : values11[i3], i : i3});
				}
				var _g31 = _g3;
				var _g12 = [];
				var _g32 = 0;
				var _g22 = values21.length;
				while(_g32 < _g22) {
					var i4 = _g32++;
					_g12.push({ name : values21[i4], i : i4});
				}
				var _g33 = this.makePairs(_g31,_g12);
				while(_g2 < _g33.length) {
					var p = _g33[_g2];
					++_g2;
					if(p.b == null) {
						continue;
					}
					map1[p.a.i] = p.b.i;
				}
				conv = function(i5) {
					return map1[i5];
				};
				break;
			case 10:
				var val1 = old[2];
				var val2 = t[2];
				if(Std.string(val1) == Std.string(val2)) {
					conv = function(i6) {
						return 1 << i6;
					};
				} else {
					return null;
				}
				break;
			default:
				return null;
			}
			break;
		case 0:case 6:case 12:
			if(t[1] != 1) {
				return null;
			}
			break;
		case 8:
			if(t[1] == 17) {
				conv = function(l) {
					return l[0];
				};
			} else {
				return null;
			}
			break;
		case 10:
			switch(t[1]) {
			case 3:
				var values3 = old[2];
				break;
			case 10:
				var values12 = old[2];
				var values22 = t[2];
				var map2 = [];
				var _g23 = 0;
				var _g4 = [];
				var _g24 = 0;
				var _g13 = values12.length;
				while(_g24 < _g13) {
					var i7 = _g24++;
					_g4.push({ name : values12[i7], i : i7});
				}
				var _g34 = _g4;
				var _g14 = [];
				var _g35 = 0;
				var _g25 = values22.length;
				while(_g35 < _g25) {
					var i8 = _g35++;
					_g14.push({ name : values22[i8], i : i8});
				}
				var _g36 = this.makePairs(_g34,_g14);
				while(_g23 < _g36.length) {
					var p1 = _g36[_g23];
					++_g23;
					if(p1.b == null) {
						continue;
					}
					map2[p1.a.i] = p1.b.i;
				}
				conv = function(i9) {
					var out = 0;
					var k = 0;
					while(i9 >= 1 << k) {
						if(map2[k] != null && (i9 & 1 << k) != 0) {
							out |= 1 << map2[k];
						}
						++k;
					}
					return out;
				};
				break;
			default:
				return null;
			}
			break;
		case 11:
			if(t[1] == 3) {
				conv = function(i10) {
					return i10;
				};
			} else {
				return null;
			}
			break;
		case 17:
			if(t[1] == 8) {
				conv = function(p2) {
					if(Reflect.fields(p2).length == 0) {
						return [];
					} else {
						return [p2];
					}
				};
			} else {
				return null;
			}
			break;
		default:
			return null;
		}
		return { f : conv};
	}
	,updateType: function(old,t) {
		var _gthis = this;
		var casesPairs = this.makePairs(old.cases,t.cases);
		var convMap = [];
		var _g = 0;
		while(_g < casesPairs.length) {
			var p = casesPairs[_g];
			++_g;
			if(p.b == null) {
				continue;
			}
			var id = Lambda.indexOf(t.cases,p.b);
			var conv = { def : [id], args : []};
			var args = this.makePairs(p.a.args,p.b.args);
			var _g1 = 0;
			while(_g1 < args.length) {
				var a = args[_g1];
				++_g1;
				if(a.b == null) {
					conv.args[Lambda.indexOf(p.a.args,a.a)] = (function() {
						return function(_) {
							return null;
						};
					})();
					continue;
				}
				var b = [a.b];
				var a1 = a.a;
				var c = this.getConvFunction(a1.type,b[0].type);
				if(c == null) {
					throw new js__$Boot_HaxeError("Cannot convert " + p.a.name + "." + a1.name + ":" + this.typeStr(a1.type) + " to " + p.b.name + "." + b[0].name + ":" + this.typeStr(b[0].type));
				}
				var f = [c.f];
				if(f[0] == null) {
					var tmp = (function() {
						return function(x) {
							return x;
						};
					})();
					f[0] = tmp;
				}
				if(a1.opt != b[0].opt) {
					var oldf = [f[0]];
					if(a1.opt) {
						var tmp1 = (function(oldf1,b1) {
							return function(v) {
								v = oldf1[0](v);
								if(v == null) {
									return _gthis.getDefault(b1[0]);
								} else {
									return v;
								}
							};
						})(oldf,b);
						f[0] = tmp1;
					} else {
						var def = [this.getDefault(a1)];
						var tmp2 = (function(def1,oldf2) {
							return function(v1) {
								if(v1 == def1[0]) {
									return null;
								} else {
									return oldf2[0](v1);
								}
							};
						})(def,oldf);
						f[0] = tmp2;
					}
				}
				var index = [Lambda.indexOf(p.b.args,b[0])];
				conv.args[Lambda.indexOf(p.a.args,a1)] = (function(index1,f1,b2) {
					return function(v2) {
						v2 = f1[0](v2);
						if(v2 == null && b2[0].opt) {
							return null;
						} else {
							return { index : index1[0], v : v2};
						}
					};
				})(index,f,b);
			}
			var _g11 = 0;
			var _g2 = p.b.args;
			while(_g11 < _g2.length) {
				var b3 = _g2[_g11];
				++_g11;
				conv.def.push(this.getDefault(b3));
			}
			while(conv.def[conv.def.length - 1] == null) conv.def.pop();
			var tmp3 = Lambda.indexOf(old.cases,p.a);
			convMap[tmp3] = conv;
		}
		var convertTypeRec = null;
		convertTypeRec = function(t1,v3) {
			if(t1 == null) {
				return null;
			}
			if(t1 == old) {
				var conv1 = convMap[v3[0]];
				if(conv1 == null) {
					return null;
				}
				var out = conv1.def.slice();
				var _g12 = 0;
				var _g3 = conv1.args.length;
				while(_g12 < _g3) {
					var i = _g12++;
					var v4 = conv1.args[i](v3[i + 1]);
					if(v4 == null) {
						continue;
					}
					out[v4.index + 1] = v4.v;
				}
				return out;
			}
			var c1 = t1.cases[v3[0]];
			var _g13 = 0;
			var _g4 = c1.args.length;
			while(_g13 < _g4) {
				var i1 = _g13++;
				var _g21 = c1.args[i1].type;
				if(_g21[1] == 9) {
					var tname = _g21[2];
					var av = v3[i1 + 1];
					if(av != null) {
						var convertTypeRec1 = _gthis.getCustomType(tname);
						v3[i1 + 1] = convertTypeRec(convertTypeRec1,av);
					}
				}
			}
			return v3;
		};
		var convertTypeRec2 = convertTypeRec;
		var _g5 = 0;
		var _g14 = this.sheets;
		while(_g5 < _g14.length) {
			var s = _g14[_g5];
			++_g5;
			var _g22 = 0;
			var _g31 = s.sheet.columns;
			while(_g22 < _g31.length) {
				var c2 = _g31[_g22];
				++_g22;
				var _g41 = c2.type;
				if(_g41[1] == 9) {
					var tname1 = _g41[2];
					var t2 = this.getCustomType(tname1);
					var _g42 = 0;
					var _g51 = s.getLines();
					while(_g42 < _g51.length) {
						var obj = _g51[_g42];
						++_g42;
						var v5 = Reflect.field(obj,c2.name);
						if(v5 != null) {
							v5 = convertTypeRec2(t2,v5);
							if(v5 == null) {
								Reflect.deleteField(obj,c2.name);
							} else {
								obj[c2.name] = v5;
							}
						}
					}
					if(tname1 == old.name && t.name != old.name) {
						c2.type = cdb_ColumnType.TCustom(t.name);
						c2.typeStr = null;
					}
				}
			}
		}
		if(t.name != old.name) {
			var _g6 = 0;
			var _g15 = this.getCustomTypes();
			while(_g6 < _g15.length) {
				var t21 = _g15[_g6];
				++_g6;
				var _g23 = 0;
				var _g32 = t21.cases;
				while(_g23 < _g32.length) {
					var c3 = _g32[_g23];
					++_g23;
					var _g43 = 0;
					var _g52 = c3.args;
					while(_g43 < _g52.length) {
						var a2 = _g52[_g43];
						++_g43;
						var _g61 = a2.type;
						if(_g61[1] == 9) {
							var n = _g61[2];
							if(n == old.name) {
								a2.type = cdb_ColumnType.TCustom(t.name);
								a2.typeStr = null;
							}
						}
					}
				}
			}
			this.tmap.remove(old.name);
			old.name = t.name;
			var key = old.name;
			var _this = this.tmap;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,old);
			} else {
				_this.h[key] = old;
			}
		}
		old.cases = t.cases;
	}
	,valToString: function(t,val,esc) {
		if(esc == null) {
			esc = false;
		}
		if(val == null) {
			return "null";
		}
		switch(t[1]) {
		case 1:
			var val1 = val;
			if(new EReg("^[A-Za-z0-9_]+$","g").match(val1) && !esc) {
				return val1;
			} else {
				return "\"" + val1.split("\\").join("\\\\").split("\"").join("\\\"") + "\"";
			}
			break;
		case 5:
			var values = t[2];
			return this.valToString(cdb_ColumnType.TString,values[val],esc);
		case 2:case 3:case 4:case 7:
			return Std.string(val);
		case 9:
			var t1 = t[2];
			return this.typeValToString(this.getCustomType(t1),val,esc);
		case 10:
			var values1 = t[2];
			var v = val;
			var flags = [];
			var _g1 = 0;
			var _g = values1.length;
			while(_g1 < _g) {
				var i = _g1++;
				if((v & 1 << i) != 0) {
					flags.push(this.valToString(cdb_ColumnType.TString,values1[i],esc));
				}
			}
			return Std.string(flags);
		case 11:
			var s = "#" + StringTools.hex(val,6);
			if(esc) {
				return "\"" + s + "\"";
			} else {
				return s;
			}
			break;
		case 0:case 6:case 12:case 13:
			if(esc) {
				return "\"" + Std.string(val) + "\"";
			} else {
				return val;
			}
			break;
		case 14:case 15:case 16:
			if(esc) {
				return JSON.stringify(val);
			} else {
				return Std.string(val);
			}
			break;
		case 8:case 17:
			return "???";
		}
	}
	,typeValToString: function(t,val,esc) {
		if(esc == null) {
			esc = false;
		}
		var c = t.cases[val[0]];
		var str = c.name;
		if(c.args.length > 0) {
			str += "(";
			var out = [];
			var _g1 = 1;
			var _g = val.length;
			while(_g1 < _g) {
				var i = _g1++;
				out.push(this.valToString(c.args[i - 1].type,val[i],esc));
			}
			str += out.join(",");
			str += ")";
		}
		return str;
	}
	,parseDynamic: function(s) {
		var _this_r = new RegExp("([{,]) *([a-zA-Z_][a-zA-Z0-9_]*) *:","g".split("u").join(""));
		s = s.replace(_this_r,"$1\"$2\":");
		return JSON.parse(s);
	}
	,parseVal: function(t,val) {
		switch(t[1]) {
		case 1:
			if(HxOverrides.cca(val,0) == 34) {
				var esc = false;
				var p = 1;
				var out_b = "";
				_hx_loop1: while(true) {
					if(p == val.length) {
						throw new js__$Boot_HaxeError("Unclosed \"");
					}
					var c = HxOverrides.cca(val,p++);
					if(esc) {
						out_b += String.fromCharCode(c);
						esc = false;
					} else if(c == null) {
						out_b += String.fromCharCode(c);
					} else {
						switch(c) {
						case 34:
							if(p < val.length) {
								throw new js__$Boot_HaxeError("Invalid content after string '" + val);
							}
							break _hx_loop1;
						case 92:
							esc = true;
							break;
						default:
							out_b += String.fromCharCode(c);
						}
					}
				}
				return out_b;
			} else if(new EReg("^[A-Za-z0-9_]+$","").match(val)) {
				return val;
			}
			throw new js__$Boot_HaxeError("String requires quotes '" + val + "'");
		case 2:
			if(val == "true") {
				return true;
			}
			if(val == "false") {
				return false;
			}
			break;
		case 3:
			if(new EReg("^-?[0-9]+$","").match(val)) {
				return Std.parseInt(val);
			}
			break;
		case 4:
			var f = parseFloat(val);
			if(!isNaN(f)) {
				return f;
			}
			break;
		case 6:
			var t1 = t[2];
			var _this = this.getSheet(t1).index;
			var r = __map_reserved[val] != null ? _this.getReserved(val) : _this.h[val];
			if(r == null) {
				throw new js__$Boot_HaxeError(val + " is not a known " + t1 + " id");
			}
			return r.id;
		case 9:
			var t2 = t[2];
			return this.parseTypeVal(this.getCustomType(t2),val);
		case 11:
			if(val.charAt(0) == "#") {
				val = "0x" + HxOverrides.substr(val,1,null);
			}
			if(new EReg("^-?[0-9]+$","").match(val) || new EReg("^0x[0-9A-Fa-f]+$","").match(val)) {
				return Std.parseInt(val);
			}
			break;
		default:
		}
		throw new js__$Boot_HaxeError("'" + val + "' should be " + this.typeStr(t));
	}
	,parseTypeVal: function(t,val) {
		if(t == null || val == null) {
			throw new js__$Boot_HaxeError("Missing val/type");
		}
		val = StringTools.trim(val);
		var missingCloseParent = false;
		var pos = val.indexOf("(");
		var id;
		var args = null;
		if(pos < 0) {
			id = val;
			args = [];
		} else {
			id = HxOverrides.substr(val,0,pos);
			val = HxOverrides.substr(val,pos + 1,null);
			if(StringTools.endsWith(val,")")) {
				val = HxOverrides.substr(val,0,val.length - 1);
			} else {
				missingCloseParent = true;
			}
			args = [];
			var p = 0;
			var start = 0;
			var pc = 0;
			while(p < val.length) {
				var _g = HxOverrides.cca(val,p++);
				if(_g != null) {
					switch(_g) {
					case 34:
						var esc = false;
						_hx_loop2: while(true) {
							if(p == val.length) {
								throw new js__$Boot_HaxeError("Unclosed \"");
							}
							var c = HxOverrides.cca(val,p++);
							if(esc) {
								esc = false;
							} else {
								switch(c) {
								case 34:
									break _hx_loop2;
								case 92:
									esc = true;
									break;
								}
							}
						}
						break;
					case 40:
						++pc;
						break;
					case 41:
						if(pc == 0) {
							throw new js__$Boot_HaxeError("Extra )");
						}
						--pc;
						break;
					case 44:
						if(pc == 0) {
							args.push(HxOverrides.substr(val,start,p - start - 1));
							start = p;
						}
						break;
					default:
					}
				}
			}
			if(pc > 0) {
				missingCloseParent = true;
			}
			if(p > start || start > 0 && p == start) {
				args.push(HxOverrides.substr(val,start,p - start));
			}
		}
		var _g1 = 0;
		var _g2 = t.cases.length;
		while(_g1 < _g2) {
			var i = _g1++;
			var c1 = t.cases[i];
			if(c1.name == id) {
				var vals = [i];
				var _g21 = 0;
				var _g3 = c1.args;
				while(_g21 < _g3.length) {
					var a = _g3[_g21];
					++_g21;
					var v = args.shift();
					if(v == null) {
						if(a.opt) {
							vals.push(null);
						} else {
							throw new js__$Boot_HaxeError("Missing argument " + a.name + " : " + this.typeStr(a.type));
						}
					} else {
						v = StringTools.trim(v);
						if(a.opt && v == "null") {
							vals.push(null);
							continue;
						}
						var val1;
						try {
							val1 = this.parseVal(a.type,v);
						} catch( e ) {
							var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
							if(typeof(e1) == "string") {
								throw new js__$Boot_HaxeError(e1 + " for " + a.name);
							} else {
								throw e;
							}
						}
						vals.push(val1);
					}
				}
				if(args.length > 0) {
					throw new js__$Boot_HaxeError("Extra argument '" + args.shift() + "'");
				}
				if(missingCloseParent) {
					throw new js__$Boot_HaxeError("Missing )");
				}
				while(vals[vals.length - 1] == null) vals.pop();
				return vals;
			}
		}
		throw new js__$Boot_HaxeError("Unkown value '" + id + "'");
	}
	,parseType: function(tstr) {
		switch(tstr) {
		case "Bool":
			return cdb_ColumnType.TBool;
		case "Float":
			return cdb_ColumnType.TFloat;
		case "Int":
			return cdb_ColumnType.TInt;
		case "String":
			return cdb_ColumnType.TString;
		default:
			if(this.getCustomType(tstr) != null) {
				return cdb_ColumnType.TCustom(tstr);
			} else if(this.getSheet(tstr) != null) {
				return cdb_ColumnType.TRef(tstr);
			} else {
				if(StringTools.endsWith(tstr,">")) {
					var tname = tstr.split("<").shift();
					var tparam = HxOverrides.substr(HxOverrides.substr(tstr,tname.length + 1,null),0,-1);
				}
				throw new js__$Boot_HaxeError("Unknown type " + tstr);
			}
		}
	}
	,typeCasesToString: function(t,prefix) {
		if(prefix == null) {
			prefix = "";
		}
		var arr = [];
		var _g = 0;
		var _g1 = t.cases;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var str = c.name;
			if(c.args.length > 0) {
				str += "( ";
				var out = [];
				var _g2 = 0;
				var _g3 = c.args;
				while(_g2 < _g3.length) {
					var a = _g3[_g2];
					++_g2;
					var k = "";
					if(a.opt) {
						k += "?";
					}
					k += a.name + " : " + this.typeStr(a.type);
					out.push(k);
				}
				str += out.join(", ");
				str += " )";
			}
			str += ";";
			arr.push(prefix + str);
		}
		return arr.join("\n");
	}
	,parseTypeCases: function(def) {
		var cases = [];
		var cmap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = new EReg("[\n;]","g").split(def);
		while(_g < _g1.length) {
			var line = _g1[_g];
			++_g;
			var line1 = StringTools.trim(line);
			if(line1 == "") {
				continue;
			}
			if(HxOverrides.cca(line1,line1.length - 1) == 59) {
				line1 = HxOverrides.substr(line1,1,null);
			}
			var pos = line1.indexOf("(");
			var name = null;
			var args = [];
			if(pos < 0) {
				name = line1;
			} else {
				name = HxOverrides.substr(line1,0,pos);
				line1 = HxOverrides.substr(line1,pos + 1,null);
				if(HxOverrides.cca(line1,line1.length - 1) != 41) {
					throw new js__$Boot_HaxeError("Missing closing parent in " + line1);
				}
				line1 = HxOverrides.substr(line1,0,line1.length - 1);
				var _g2 = 0;
				var _g3 = line1.split(",");
				while(_g2 < _g3.length) {
					var arg = _g3[_g2];
					++_g2;
					var tname = arg.split(":");
					if(tname.length != 2) {
						throw new js__$Boot_HaxeError("Required name:type in '" + arg + "'");
					}
					var opt = false;
					var id = StringTools.trim(tname[0]);
					if(id.charAt(0) == "?") {
						opt = true;
						id = StringTools.trim(HxOverrides.substr(id,1,null));
					}
					var t = StringTools.trim(tname[1]);
					if(!this.r_ident.match(id)) {
						throw new js__$Boot_HaxeError("Invalid identifier " + id);
					}
					var c = { name : id, type : this.parseType(t), typeStr : null};
					if(opt) {
						c.opt = true;
					}
					args.push(c);
				}
			}
			if(!this.r_ident.match(name)) {
				throw new js__$Boot_HaxeError("Invalid identifier " + line1);
			}
			if(__map_reserved[name] != null ? cmap.existsReserved(name) : cmap.h.hasOwnProperty(name)) {
				throw new js__$Boot_HaxeError("Duplicate identifier " + name);
			}
			if(__map_reserved[name] != null) {
				cmap.setReserved(name,true);
			} else {
				cmap.h[name] = true;
			}
			cases.push({ name : name, args : args});
		}
		return cases;
	}
	,mapType: function(callb) {
		var _g = 0;
		var _g1 = this.sheets;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = s.sheet.columns;
			while(_g2 < _g3.length) {
				var c = _g3[_g2];
				++_g2;
				var t = callb(c.type);
				if(t != c.type) {
					c.type = t;
					c.typeStr = null;
				}
			}
		}
		var _g4 = 0;
		var _g11 = this.getCustomTypes();
		while(_g4 < _g11.length) {
			var t1 = _g11[_g4];
			++_g4;
			var _g21 = 0;
			var _g31 = t1.cases;
			while(_g21 < _g31.length) {
				var c1 = _g31[_g21];
				++_g21;
				var _g41 = 0;
				var _g5 = c1.args;
				while(_g41 < _g5.length) {
					var a = _g5[_g41];
					++_g41;
					var t2 = callb(a.type);
					if(t2 != a.type) {
						a.type = t2;
						a.typeStr = null;
					}
				}
			}
		}
	}
	,updateRefs: function(sheet,refMap) {
		var _gthis = this;
		var convertTypeRec = null;
		convertTypeRec = function(t,o) {
			var c = t.cases[o[0]];
			var _g1 = 0;
			var _g = o.length - 1;
			while(_g1 < _g) {
				var i = _g1++;
				var v = o[i + 1];
				if(v == null) {
					continue;
				}
				var _g2 = c.args[i].type;
				switch(_g2[1]) {
				case 6:
					var n = _g2[2];
					if(n == sheet.sheet.name) {
						var key = v;
						var v1 = __map_reserved[key] != null ? refMap.getReserved(key) : refMap.h[key];
						if(v1 == null) {
							continue;
						}
						o[i + 1] = v1;
					}
					break;
				case 9:
					var name = _g2[2];
					var convertTypeRec1 = _gthis.getCustomType(name);
					convertTypeRec(convertTypeRec1,v);
					break;
				default:
				}
			}
		};
		var convertTypeRec2 = convertTypeRec;
		var _g3 = 0;
		var _g11 = this.sheets;
		while(_g3 < _g11.length) {
			var s = _g11[_g3];
			++_g3;
			var _g21 = 0;
			var _g31 = s.sheet.columns;
			while(_g21 < _g31.length) {
				var c1 = _g31[_g21];
				++_g21;
				var _g4 = c1.type;
				switch(_g4[1]) {
				case 6:
					var n1 = _g4[2];
					if(n1 == sheet.sheet.name) {
						var _g41 = 0;
						var _g5 = s.getLines();
						while(_g41 < _g5.length) {
							var obj = _g5[_g41];
							++_g41;
							var id = Reflect.field(obj,c1.name);
							if(id == null) {
								continue;
							}
							id = __map_reserved[id] != null ? refMap.getReserved(id) : refMap.h[id];
							if(id == null) {
								continue;
							}
							obj[c1.name] = id;
						}
					}
					break;
				case 9:
					var t1 = _g4[2];
					var _g42 = 0;
					var _g51 = s.getLines();
					while(_g42 < _g51.length) {
						var obj1 = _g51[_g42];
						++_g42;
						var o1 = Reflect.field(obj1,c1.name);
						if(o1 == null) {
							continue;
						}
						convertTypeRec2(this.getCustomType(t1),o1);
					}
					break;
				default:
				}
			}
		}
	}
	,deleteSheet: function(sheet) {
		HxOverrides.remove(this.sheets,sheet);
		this.smap.remove(sheet.sheet.name);
		var _g = 0;
		var _g1 = sheet.sheet.columns;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var _g2 = c.type;
			switch(_g2[1]) {
			case 8:case 17:
				this.deleteSheet(sheet.base.getSheet(sheet.sheet.name + "@" + c.name));
				break;
			default:
			}
		}
		this.mapType(function(t) {
			switch(t[1]) {
			case 6:
				var r = t[2];
				if(r == sheet.sheet.name) {
					return cdb_ColumnType.TString;
				} else {
					return t;
				}
				break;
			case 12:
				var r1 = t[2];
				if(r1 == sheet.sheet.name) {
					return cdb_ColumnType.TString;
				} else {
					return t;
				}
				break;
			default:
				return t;
			}
		});
	}
	,__class__: cdb_Database
};
var cdb_LocField = $hxClasses["cdb.LocField"] = { __ename__ : ["cdb","LocField"], __constructs__ : ["LName","LSub","LSingle"] };
cdb_LocField.LName = function(c) { var $x = ["LName",0,c]; $x.__enum__ = cdb_LocField; $x.toString = $estr; return $x; };
cdb_LocField.LSub = function(c,s,e) { var $x = ["LSub",1,c,s,e]; $x.__enum__ = cdb_LocField; $x.toString = $estr; return $x; };
cdb_LocField.LSingle = function(c,e) { var $x = ["LSingle",2,c,e]; $x.__enum__ = cdb_LocField; $x.toString = $estr; return $x; };
var cdb_Lang = function(root) {
	this.root = root;
};
$hxClasses["cdb.Lang"] = cdb_Lang;
cdb_Lang.__name__ = ["cdb","Lang"];
cdb_Lang.prototype = {
	onMissing: function(s) {
		console.log("Lang.hx:19:",s);
	}
	,getSub: function(s,c) {
		return this.getSheet(s.name + "@" + c.name);
	}
	,getSheet: function(name) {
		var _g = 0;
		var _g1 = this.root.sheets;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.name == name) {
				return s;
			}
		}
		return null;
	}
	,makeLocField: function(c,s) {
		var _g = c.type;
		switch(_g[1]) {
		case 1:
			if(c.kind == "localizable") {
				return cdb_LocField.LName(c);
			} else {
				return null;
			}
			break;
		case 8:case 17:
			var ssub = this.getSub(s,c);
			var fl = this.makeSheetFields(ssub);
			if(fl.length == 0) {
				return null;
			}
			return cdb_LocField.LSub(c,ssub,fl);
		default:
			return null;
		}
	}
	,makeSheetFields: function(s) {
		var fields = [];
		var _g = 0;
		var _g1 = s.columns;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var f = this.makeLocField(c,s);
			if(f != null) {
				if(f[1] == 1) {
					var fl = f[4];
					var c1 = f[2];
					if(c1.type == cdb_ColumnType.TProperties) {
						var _g2 = 0;
						while(_g2 < fl.length) {
							var f1 = fl[_g2];
							++_g2;
							fields.push(cdb_LocField.LSingle(c1,f1));
						}
					} else {
						fields.push(f);
					}
				} else {
					fields.push(f);
				}
			}
		}
		return fields;
	}
	,apply: function(xml) {
		var x = Xml.parse(xml).firstElement();
		var xsheets = new haxe_ds_StringMap();
		var e = x.elements();
		while(e.hasNext()) {
			var e1 = e.next();
			var key = e1.get("name");
			if(__map_reserved[key] != null) {
				xsheets.setReserved(key,e1);
			} else {
				xsheets.h[key] = e1;
			}
		}
		var _g = 0;
		var _g1 = this.root.sheets;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.props.hide) {
				continue;
			}
			var key1 = s.name;
			var x1 = __map_reserved[key1] != null ? xsheets.getReserved(key1) : xsheets.h[key1];
			if(x1 == null) {
				continue;
			}
			var path = [s.name];
			this.applySheet(path,s,this.makeSheetFields(s),s.lines,x1);
		}
	}
	,applySheet: function(path,s,fields,objects,x) {
		var idField = null;
		var _g = 0;
		var _g1 = s.columns;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.type == cdb_ColumnType.TId) {
				idField = c.name;
				break;
			}
		}
		if(idField == null) {
			var byIndex = [];
			if(x != null) {
				var e = x.elements();
				while(e.hasNext()) {
					var e1 = e.next();
					var m = new haxe_ds_StringMap();
					var e2 = e1.elements();
					while(e2.hasNext()) {
						var e3 = e2.next();
						if(e3.nodeType != Xml.Element) {
							throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + e3.nodeType);
						}
						var key = e3.nodeName;
						if(__map_reserved[key] != null) {
							m.setReserved(key,e3);
						} else {
							m.h[key] = e3;
						}
					}
					if(e1.nodeType != Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + e1.nodeType);
					}
					byIndex[Std.parseInt(e1.nodeName)] = m;
				}
			}
			var _g11 = 0;
			var _g2 = objects.length;
			while(_g11 < _g2) {
				var i = _g11++;
				var _g21 = 0;
				while(_g21 < fields.length) {
					var f = fields[_g21];
					++_g21;
					path.push("[" + i + "]");
					this.applyRec(path,f,objects[i],byIndex[i]);
					path.pop();
				}
			}
		} else {
			var byID = new haxe_ds_StringMap();
			if(x != null) {
				var e4 = x.elements();
				while(e4.hasNext()) {
					var e5 = e4.next();
					var m1 = new haxe_ds_StringMap();
					var e6 = e5.elements();
					while(e6.hasNext()) {
						var e7 = e6.next();
						if(e7.nodeType != Xml.Element) {
							throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + e7.nodeType);
						}
						var key1 = e7.nodeName;
						if(__map_reserved[key1] != null) {
							m1.setReserved(key1,e7);
						} else {
							m1.h[key1] = e7;
						}
					}
					if(e5.nodeType != Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + e5.nodeType);
					}
					var key2 = e5.nodeName;
					if(__map_reserved[key2] != null) {
						byID.setReserved(key2,m1);
					} else {
						byID.h[key2] = m1;
					}
				}
			}
			var _g3 = 0;
			while(_g3 < objects.length) {
				var o = objects[_g3];
				++_g3;
				var _g12 = 0;
				while(_g12 < fields.length) {
					var f1 = fields[_g12];
					++_g12;
					var id = Reflect.field(o,idField);
					path.push(id);
					this.applyRec(path,f1,o,__map_reserved[id] != null ? byID.getReserved(id) : byID.h[id]);
					path.pop();
				}
			}
		}
	}
	,applyRec: function(path,f,o,data) {
		switch(f[1]) {
		case 0:
			var c = f[2];
			var v;
			if(data == null) {
				v = null;
			} else {
				var key = c.name;
				v = __map_reserved[key] != null ? data.getReserved(key) : data.h[key];
			}
			if(v != null) {
				if(v.nodeType != Xml.Document && v.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Invalid nodeType " + v.nodeType);
				}
				var this1 = v;
				o[c.name] = StringTools.htmlUnescape(haxe_xml__$Fast_Fast_$Impl_$.get_innerHTML(this1));
			} else {
				var v1 = Reflect.field(o,c.name);
				if(v1 != null && v1 != "") {
					path.push(c.name);
					this.onMissing("Missing " + path.join("."));
					path.pop();
				}
			}
			break;
		case 1:
			var fl = f[4];
			var s = f[3];
			var c1 = f[2];
			var v2 = Reflect.field(o,c1.name);
			if(v2 == null) {
				return;
			}
			path.push(c1.name);
			var tmp;
			if(data == null) {
				tmp = null;
			} else {
				var key1 = c1.name;
				tmp = __map_reserved[key1] != null ? data.getReserved(key1) : data.h[key1];
			}
			this.applySheet(path,s,fl,v2,tmp);
			path.pop();
			break;
		case 2:
			var f1 = f[3];
			var c2 = f[2];
			var v3 = Reflect.field(o,c2.name);
			if(v3 == null) {
				return;
			}
			path.push(c2.name);
			var tmp1;
			if(data == null) {
				tmp1 = null;
			} else {
				var _g = new haxe_ds_StringMap();
				var e = data.keys();
				while(e.hasNext()) {
					var e1 = e.next();
					if(StringTools.startsWith(e1,c2.name + ".")) {
						var key2 = HxOverrides.substr(e1,c2.name.length + 1,null);
						var value = __map_reserved[e1] != null ? data.getReserved(e1) : data.h[e1];
						if(__map_reserved[key2] != null) {
							_g.setReserved(key2,value);
						} else {
							_g.h[key2] = value;
						}
					}
				}
				tmp1 = _g;
			}
			this.applyRec(path,f1,v3,tmp1);
			path.pop();
			break;
		}
	}
	,buildXML: function() {
		var buf_b = "";
		buf_b += "<cdb>\n";
		var _g = 0;
		var _g1 = this.root.sheets;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.props.hide) {
				continue;
			}
			var locFields = this.makeSheetFields(s);
			if(locFields.length == 0) {
				continue;
			}
			buf_b += Std.string("\t<sheet name=\"" + s.name + "\">\n");
			buf_b += Std.string(this.buildSheetXml(s,"\t\t",s.lines,locFields));
			buf_b += "\t</sheet>\n";
		}
		buf_b += "</cdb>\n";
		return buf_b;
	}
	,getLocText: function(tabs,o,f) {
		switch(f[1]) {
		case 0:
			var c = f[2];
			var v = Reflect.field(o,c.name);
			return { name : c.name, value : v == null ? v : StringTools.htmlEscape(v)};
		case 1:
			var fl = f[4];
			var ssub = f[3];
			var c1 = f[2];
			var v1 = Reflect.field(o,c1.name);
			var content = this.buildSheetXml(ssub,tabs + "\t\t",v1,fl);
			return { name : c1.name, value : content};
		case 2:
			var f1 = f[3];
			var c2 = f[2];
			var v2 = this.getLocText(tabs,Reflect.field(o,c2.name),f1);
			return { name : c2.name + "." + v2.name, value : v2.value};
		}
	}
	,buildSheetXml: function(s,tabs,values,locFields) {
		var id = null;
		var _g = 0;
		var _g1 = s.columns;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.type == cdb_ColumnType.TId) {
				id = c;
				break;
			}
		}
		var buf_b = "";
		var index = 0;
		var _g2 = 0;
		while(_g2 < values.length) {
			var o = values[_g2];
			++_g2;
			var id1 = id == null ? "" + index++ : Reflect.field(o,id.name);
			if(id1 == null || id1 == "") {
				continue;
			}
			var _g11 = [];
			var _g21 = 0;
			while(_g21 < locFields.length) {
				var f = locFields[_g21];
				++_g21;
				_g11.push(this.getLocText(tabs,o,f));
			}
			var locs = _g11;
			var hasLoc = false;
			var _g22 = 0;
			while(_g22 < locs.length) {
				var l = locs[_g22];
				++_g22;
				if(l.value != null && l.value != "") {
					hasLoc = true;
					break;
				}
			}
			if(!hasLoc) {
				continue;
			}
			buf_b += Std.string("" + tabs + "<" + id1 + ">\n");
			var _g23 = 0;
			while(_g23 < locs.length) {
				var l1 = locs[_g23];
				++_g23;
				if(l1.value != null && l1.value != "") {
					if(l1.value.indexOf("<") < 0) {
						buf_b += Std.string("" + tabs + "\t<" + l1.name + ">" + l1.value + "</" + l1.name + ">\n");
					} else {
						buf_b += Std.string("" + tabs + "\t<" + l1.name + ">\n");
						buf_b += Std.string("" + tabs + "\t\t" + StringTools.trim(l1.value) + "\n");
						buf_b += Std.string("" + tabs + "\t</" + l1.name + ">\n");
					}
				}
			}
			buf_b += Std.string("" + tabs + "</" + id1 + ">\n");
		}
		return buf_b;
	}
	,__class__: cdb_Lang
};
var cdb_Lz4Reader = function() {
};
$hxClasses["cdb.Lz4Reader"] = cdb_Lz4Reader;
cdb_Lz4Reader.__name__ = ["cdb","Lz4Reader"];
cdb_Lz4Reader.uncompress = function(src,srcPos,srcLen,out,outPos) {
	var outSave = outPos;
	var srcEnd = srcPos + srcLen;
	if(srcLen == 0) {
		return [srcPos,outPos,0];
	}
	var outLen = out.length;
	while(true) {
		var start = srcPos;
		var tk = src.b[srcPos++];
		var litLen = tk >> 4;
		var matchLen = tk & 15;
		if(litLen == 15) {
			var b;
			while(true) {
				b = src.b[srcPos++];
				litLen += b;
				if(!(b == 255)) {
					break;
				}
			}
		}
		if(outPos + litLen > outLen) {
			return [start,outPos,litLen + matchLen];
		}
		switch(litLen) {
		case 0:
			break;
		case 1:
			out.b[outPos] = src.b[srcPos++] & 255;
			++outPos;
			break;
		case 2:
			out.b[outPos] = src.b[srcPos++] & 255;
			++outPos;
			out.b[outPos] = src.b[srcPos++] & 255;
			++outPos;
			break;
		case 3:
			out.b[outPos] = src.b[srcPos++] & 255;
			++outPos;
			out.b[outPos] = src.b[srcPos++] & 255;
			++outPos;
			out.b[outPos] = src.b[srcPos++] & 255;
			++outPos;
			break;
		default:
			out.blit(outPos,src,srcPos,litLen);
			outPos += litLen;
			srcPos += litLen;
		}
		if(srcPos >= srcEnd) {
			break;
		}
		var offset = src.b[srcPos++];
		offset |= src.b[srcPos++] << 8;
		if(matchLen == 15) {
			var b1;
			while(true) {
				b1 = src.b[srcPos++];
				matchLen += b1;
				if(!(b1 == 255)) {
					break;
				}
			}
		}
		matchLen += 4;
		if(outPos + matchLen > outLen) {
			return [start,outPos - litLen,litLen + matchLen];
		}
		if(matchLen >= 64 && matchLen <= offset) {
			out.blit(outPos,out,outPos - offset,matchLen);
			outPos += matchLen;
		} else {
			var copyEnd = outPos + matchLen;
			while(outPos < copyEnd) {
				out.b[outPos] = out.b[outPos - offset] & 255;
				++outPos;
			}
		}
	}
	if(srcPos != srcEnd) {
		throw new js__$Boot_HaxeError("Read too much data " + (srcPos - srcLen));
	}
	return [srcPos,outPos,0];
};
cdb_Lz4Reader.decodeString = function(s) {
	if(s == "") {
		return new haxe_io_Bytes(new ArrayBuffer(0));
	}
	var k = haxe_crypto_Base64.decode(s);
	if(k.b[0] != 4 || k.b[1] != 34 || k.b[2] != 77 || k.b[3] != 24) {
		return k;
	}
	var tmp = new Uint8Array(k.length);
	var _g1 = 0;
	var _g = k.length;
	while(_g1 < _g) {
		var i = _g1++;
		tmp[i] = k.b[i];
	}
	var k1 = lz4.decompress(tmp);
	var b = new haxe_io_Bytes(new ArrayBuffer(k1.length));
	var _g11 = 0;
	var _g2 = k1.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		b.b[i1] = k1[i1] & 255;
	}
	return b;
};
cdb_Lz4Reader.encodeBytes = function(b,compress) {
	if(compress && b.length > 0) {
		var tmp = new Uint8Array(b.length);
		var _g1 = 0;
		var _g = b.length;
		while(_g1 < _g) {
			var i = _g1++;
			tmp[i] = b.b[i];
		}
		tmp = lz4.compress(tmp,65536);
		b = new haxe_io_Bytes(new ArrayBuffer(tmp.length));
		var _g11 = 0;
		var _g2 = tmp.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			b.b[i1] = tmp[i1] & 255;
		}
	}
	return haxe_crypto_Base64.encode(b);
};
cdb_Lz4Reader.prototype = {
	b: function() {
		return this.bytes.b[this.pos++];
	}
	,grow: function(out,pos,len) {
		var size = out.length;
		while(true) {
			size = size * 3 >> 1;
			if(!(size < pos + len)) {
				break;
			}
		}
		var out2 = new haxe_io_Bytes(new ArrayBuffer(size));
		out2.blit(0,out,0,pos);
		return out2;
	}
	,read: function(bytes) {
		this.bytes = bytes;
		this.pos = 0;
		if(this.bytes.b[this.pos++] != 4 || this.bytes.b[this.pos++] != 34 || this.bytes.b[this.pos++] != 77 || this.bytes.b[this.pos++] != 24) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var flags = this.bytes.b[this.pos++];
		if(flags >> 6 != 1) {
			throw new js__$Boot_HaxeError("Invalid version " + (flags >> 6));
		}
		var blockChecksum = (flags & 16) != 0;
		var streamSize = (flags & 8) != 0;
		var streamChecksum = (flags & 4) != 0;
		if((flags & 2) != 0) {
			throw new js__$Boot_HaxeError("assert");
		}
		var presetDict = (flags & 1) != 0;
		var bd = this.bytes.b[this.pos++];
		if((bd & 128) != 0) {
			throw new js__$Boot_HaxeError("assert");
		}
		var maxBlockSize = [0,0,0,0,65536,262144,1048576,4194304][bd >> 4 & 7];
		if(maxBlockSize == 0) {
			throw new js__$Boot_HaxeError("assert");
		}
		if((bd & 15) != 0) {
			throw new js__$Boot_HaxeError("assert");
		}
		if(streamSize) {
			this.pos += 8;
		}
		if(presetDict) {
			throw new js__$Boot_HaxeError("Preset dictionary not supported");
		}
		var headerChk = this.bytes.b[this.pos++];
		var out = new haxe_io_Bytes(new ArrayBuffer(128));
		var outPos = 0;
		while(true) {
			var size = this.bytes.b[this.pos++] | this.bytes.b[this.pos++] << 8 | this.bytes.b[this.pos++] << 16 | this.bytes.b[this.pos++] << 24;
			if(size == 0) {
				break;
			}
			if((size & -16) == 407710288) {
				var dataSize = this.bytes.b[this.pos++] | this.bytes.b[this.pos++] << 8 | this.bytes.b[this.pos++] << 16 | this.bytes.b[this.pos++] << 24;
				this.pos += dataSize;
				continue;
			}
			if((size & -2147483648) != 0) {
				size &= 2147483647;
				if(outPos + out.length < size) {
					out = this.grow(out,outPos,size);
				}
				out.blit(outPos,bytes,this.pos,size);
				outPos += size;
				this.pos += size;
			} else {
				var srcEnd = this.pos + size;
				while(this.pos < srcEnd) {
					var r = cdb_Lz4Reader.uncompress(bytes,this.pos,srcEnd - this.pos,out,outPos);
					this.pos = r[0];
					outPos = r[1];
					var req = r[2];
					if(req > 0) {
						out = this.grow(out,outPos,req);
					}
				}
			}
			if(blockChecksum) {
				this.pos += 4;
			}
		}
		return out.sub(0,outPos);
	}
	,__class__: cdb_Lz4Reader
};
var cdb_Parser = function() { };
$hxClasses["cdb.Parser"] = cdb_Parser;
cdb_Parser.__name__ = ["cdb","Parser"];
cdb_Parser.saveType = function(t) {
	switch(t[1]) {
	case 5:
		var values = t[2];
		return t[1] + ":" + values.join(",");
	case 6:case 9:case 12:
		return t[1] + ":" + Std.string(t.slice(2)[0]);
	case 10:
		var values1 = t[2];
		return t[1] + ":" + values1.join(",");
	case 0:case 1:case 2:case 3:case 4:case 7:case 8:case 11:case 13:case 14:case 15:case 16:case 17:
		return Std.string(t[1]);
	}
};
cdb_Parser.getType = function(str) {
	var _g = Std.parseInt(str);
	if(_g == null) {
		throw new js__$Boot_HaxeError("Unknown type " + str);
	} else {
		switch(_g) {
		case 0:
			return cdb_ColumnType.TId;
		case 1:
			return cdb_ColumnType.TString;
		case 2:
			return cdb_ColumnType.TBool;
		case 3:
			return cdb_ColumnType.TInt;
		case 4:
			return cdb_ColumnType.TFloat;
		case 5:
			return cdb_ColumnType.TEnum(HxOverrides.substr(str,str.indexOf(":") + 1,null).split(","));
		case 6:
			return cdb_ColumnType.TRef(HxOverrides.substr(str,str.indexOf(":") + 1,null));
		case 7:
			return cdb_ColumnType.TImage;
		case 8:
			return cdb_ColumnType.TList;
		case 9:
			return cdb_ColumnType.TCustom(HxOverrides.substr(str,str.indexOf(":") + 1,null));
		case 10:
			return cdb_ColumnType.TFlags(HxOverrides.substr(str,str.indexOf(":") + 1,null).split(","));
		case 11:
			return cdb_ColumnType.TColor;
		case 12:
			return cdb_ColumnType.TLayer(HxOverrides.substr(str,str.indexOf(":") + 1,null));
		case 13:
			return cdb_ColumnType.TFile;
		case 14:
			return cdb_ColumnType.TTilePos;
		case 15:
			return cdb_ColumnType.TTileLayer;
		case 16:
			return cdb_ColumnType.TDynamic;
		case 17:
			return cdb_ColumnType.TProperties;
		default:
			throw new js__$Boot_HaxeError("Unknown type " + str);
		}
	}
};
cdb_Parser.parse = function(content) {
	if(content == null) {
		throw new js__$Boot_HaxeError("CDB content is null");
	}
	var data = JSON.parse(content);
	var _g = 0;
	var _g1 = data.sheets;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		var _g2 = 0;
		var _g3 = s.columns;
		while(_g2 < _g3.length) {
			var c = _g3[_g2];
			++_g2;
			c.type = cdb_Parser.getType(c.typeStr);
			c.typeStr = null;
		}
	}
	var _g4 = 0;
	var _g11 = data.customTypes;
	while(_g4 < _g11.length) {
		var t = _g11[_g4];
		++_g4;
		var _g21 = 0;
		var _g31 = t.cases;
		while(_g21 < _g31.length) {
			var c1 = _g31[_g21];
			++_g21;
			var _g41 = 0;
			var _g5 = c1.args;
			while(_g41 < _g5.length) {
				var a = _g5[_g41];
				++_g41;
				a.type = cdb_Parser.getType(a.typeStr);
				a.typeStr = null;
			}
		}
	}
	return data;
};
cdb_Parser.save = function(data) {
	var save = [];
	var _g = 0;
	var _g1 = data.sheets;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		var _g2 = 0;
		var _g3 = s.columns;
		while(_g2 < _g3.length) {
			var c = _g3[_g2];
			++_g2;
			save.push(c.type);
			if(c.typeStr == null) {
				c.typeStr = cdb_Parser.saveType(c.type);
			}
			Reflect.deleteField(c,"type");
		}
	}
	var _g4 = 0;
	var _g11 = data.customTypes;
	while(_g4 < _g11.length) {
		var t = _g11[_g4];
		++_g4;
		var _g21 = 0;
		var _g31 = t.cases;
		while(_g21 < _g31.length) {
			var c1 = _g31[_g21];
			++_g21;
			var _g41 = 0;
			var _g5 = c1.args;
			while(_g41 < _g5.length) {
				var a = _g5[_g41];
				++_g41;
				save.push(a.type);
				if(a.typeStr == null) {
					a.typeStr = cdb_Parser.saveType(a.type);
				}
				Reflect.deleteField(a,"type");
			}
		}
	}
	var str = JSON.stringify(data,null,"\t");
	var _g6 = 0;
	var _g12 = data.sheets;
	while(_g6 < _g12.length) {
		var s1 = _g12[_g6];
		++_g6;
		var _g22 = 0;
		var _g32 = s1.columns;
		while(_g22 < _g32.length) {
			var c2 = _g32[_g22];
			++_g22;
			c2.type = save.shift();
		}
	}
	var _g7 = 0;
	var _g13 = data.customTypes;
	while(_g7 < _g13.length) {
		var t1 = _g13[_g7];
		++_g7;
		var _g23 = 0;
		var _g33 = t1.cases;
		while(_g23 < _g33.length) {
			var c3 = _g33[_g23];
			++_g23;
			var _g42 = 0;
			var _g51 = c3.args;
			while(_g42 < _g51.length) {
				var a1 = _g51[_g42];
				++_g42;
				a1.type = save.shift();
			}
		}
	}
	return str;
};
var cdb_Sheet = function(base,sheet,path,parent) {
	this.base = base;
	this.sheet = sheet;
	this.path = path;
	this.parent = parent;
};
$hxClasses["cdb.Sheet"] = cdb_Sheet;
cdb_Sheet.__name__ = ["cdb","Sheet"];
cdb_Sheet.prototype = {
	get_lines: function() {
		return this.sheet.lines;
	}
	,get_props: function() {
		return this.sheet.props;
	}
	,get_columns: function() {
		return this.sheet.columns;
	}
	,get_name: function() {
		return this.sheet.name;
	}
	,get_separators: function() {
		return this.sheet.separators;
	}
	,isLevel: function() {
		return this.sheet.props.level != null;
	}
	,getSub: function(c) {
		return this.base.getSheet(this.sheet.name + "@" + c.name);
	}
	,getParent: function() {
		if(!this.sheet.props.hide) {
			return null;
		}
		var parts = this.sheet.name.split("@");
		var colName = parts.pop();
		return { s : this.base.getSheet(parts.join("@")), c : colName};
	}
	,getLines: function() {
		var p = this.getParent();
		if(p == null) {
			return this.sheet.lines;
		}
		if(p.s.sheet.props.level != null && p.c == "tileProps") {
			var all = [];
			var sets = p.s.sheet.props.level.tileSets;
			var _g = 0;
			var _g1 = Reflect.fields(sets);
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				var t = Reflect.field(sets,f);
				if(t.props == null) {
					continue;
				}
				var _g2 = 0;
				var _g3 = t.props;
				while(_g2 < _g3.length) {
					var p1 = _g3[_g2];
					++_g2;
					if(p1 != null) {
						all.push(p1);
					}
				}
			}
			return all;
		}
		var all1 = [];
		if(this.sheet.props.isProps) {
			var _g4 = 0;
			var _g11 = p.s.getLines();
			while(_g4 < _g11.length) {
				var obj = _g11[_g4];
				++_g4;
				var v = Reflect.field(obj,p.c);
				if(v != null) {
					all1.push(v);
				}
			}
		} else {
			var _g5 = 0;
			var _g12 = p.s.getLines();
			while(_g5 < _g12.length) {
				var obj1 = _g12[_g5];
				++_g5;
				var v1 = Reflect.field(obj1,p.c);
				if(v1 != null) {
					var _g21 = 0;
					while(_g21 < v1.length) {
						var v2 = v1[_g21];
						++_g21;
						all1.push(v2);
					}
				}
			}
		}
		return all1;
	}
	,getObjects: function() {
		var p = this.getParent();
		if(p == null) {
			var _g = [];
			var _g2 = 0;
			var _g1 = this.sheet.lines.length;
			while(_g2 < _g1) {
				var i = _g2++;
				_g.push({ path : [this.sheet.lines[i]], indexes : [i]});
			}
			return _g;
		}
		var all = [];
		var _g3 = 0;
		var _g11 = p.s.getObjects();
		while(_g3 < _g11.length) {
			var obj = _g11[_g3];
			++_g3;
			var v = Reflect.field(obj.path[obj.path.length - 1],p.c);
			if(v != null) {
				var _g31 = 0;
				var _g21 = v.length;
				while(_g31 < _g21) {
					var i1 = _g31++;
					var sobj = v[i1];
					var p1 = obj.path.slice();
					var idx = obj.indexes.slice();
					p1.push(sobj);
					idx.push(i1);
					all.push({ path : p1, indexes : idx});
				}
			}
		}
		return all;
	}
	,newLine: function(index) {
		var o = { };
		var _g = 0;
		var _g1 = this.sheet.columns;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var d = this.base.getDefault(c);
			if(d != null) {
				o[c.name] = d;
			}
		}
		if(index == null) {
			this.sheet.lines.push(o);
		} else {
			var _g11 = 0;
			var _g2 = this.sheet.separators.length;
			while(_g11 < _g2) {
				var i = _g11++;
				var s = this.sheet.separators[i];
				if(s > index) {
					this.sheet.separators[i] = s + 1;
				}
			}
			this.sheet.lines.splice(index + 1,0,o);
			var _g3 = [];
			var _g21 = 0;
			var _g12 = this.sheet.lines.length;
			while(_g21 < _g12) {
				var i1 = _g21++;
				_g3.push(i1 <= index ? i1 : i1 + 1);
			}
			this.changeLineOrder(_g3);
		}
		return o;
	}
	,getPath: function() {
		if(this.path == null) {
			return this.sheet.name;
		} else {
			return this.path;
		}
	}
	,hasColumn: function(name,types) {
		var _g = 0;
		var _g1 = this.sheet.columns;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.name == name) {
				if(types != null) {
					var _g2 = 0;
					while(_g2 < types.length) {
						var t = types[_g2];
						++_g2;
						if(Type.enumEq(c.type,t)) {
							return true;
						}
					}
					return false;
				}
				return true;
			}
		}
		return false;
	}
	,moveLine: function(index,delta) {
		if(delta < 0 && index > 0) {
			var _g1 = 0;
			var _g = this.sheet.separators.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(this.sheet.separators[i] == index) {
					var i1 = i;
					while(i1 < this.sheet.separators.length - 1 && this.sheet.separators[i1 + 1] == index) ++i1;
					this.sheet.separators[i1]++;
					return index;
				}
			}
			var l = this.sheet.lines[index];
			this.sheet.lines.splice(index,1);
			this.sheet.lines.splice(index - 1,0,l);
			var _g2 = [];
			var _g21 = 0;
			var _g11 = this.sheet.lines.length;
			while(_g21 < _g11) {
				var i2 = _g21++;
				_g2.push(i2);
			}
			var arr = _g2;
			arr[index] = index - 1;
			arr[index - 1] = index;
			this.changeLineOrder(arr);
			return index - 1;
		} else if(delta > 0 && this.sheet != null && index < this.sheet.lines.length - 1) {
			var _g12 = 0;
			var _g3 = this.sheet.separators.length;
			while(_g12 < _g3) {
				var i3 = _g12++;
				if(this.sheet.separators[i3] == index + 1) {
					this.sheet.separators[i3]--;
					return index;
				}
			}
			var l1 = this.sheet.lines[index];
			this.sheet.lines.splice(index,1);
			this.sheet.lines.splice(index + 1,0,l1);
			var _g4 = [];
			var _g22 = 0;
			var _g13 = this.sheet.lines.length;
			while(_g22 < _g13) {
				var i4 = _g22++;
				_g4.push(i4);
			}
			var arr1 = _g4;
			arr1[index] = index + 1;
			arr1[index + 1] = index;
			this.changeLineOrder(arr1);
			return index + 1;
		}
		return null;
	}
	,deleteLine: function(index) {
		var _g = [];
		var _g2 = 0;
		var _g1 = this.sheet.lines.length;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push(i < index ? i : i - 1);
		}
		var arr = _g;
		arr[index] = -1;
		this.changeLineOrder(arr);
		this.sheet.lines.splice(index,1);
		var prev = -1;
		var toRemove = null;
		var _g21 = 0;
		var _g11 = this.sheet.separators.length;
		while(_g21 < _g11) {
			var i1 = _g21++;
			var s = this.sheet.separators[i1];
			if(s > index) {
				if(prev == s) {
					toRemove = i1;
				}
				this.sheet.separators[i1] = s - 1;
			} else {
				prev = s;
			}
		}
		if(toRemove != null) {
			this.sheet.separators.splice(toRemove,1);
			if(this.sheet.props.separatorTitles != null) {
				this.sheet.props.separatorTitles.splice(toRemove,1);
			}
		}
	}
	,deleteColumn: function(cname) {
		var _g = 0;
		var _g1 = this.sheet.columns;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.name == cname) {
				HxOverrides.remove(this.sheet.columns,c);
				var _g2 = 0;
				var _g3 = this.getLines();
				while(_g2 < _g3.length) {
					var o = _g3[_g2];
					++_g2;
					Reflect.deleteField(o,c.name);
				}
				if(this.sheet.props.displayColumn == c.name) {
					this.sheet.props.displayColumn = null;
					this.sync();
				}
				if(this.sheet.props.displayIcon == c.name) {
					this.sheet.props.displayIcon = null;
					this.sync();
				}
				if(c.type == cdb_ColumnType.TList || c.type == cdb_ColumnType.TProperties) {
					this.base.deleteSheet(this.base.getSheet(this.sheet.name + "@" + c.name));
				}
				return true;
			}
		}
		return false;
	}
	,addColumn: function(c,index) {
		var _g = 0;
		var _g1 = this.sheet.columns;
		while(_g < _g1.length) {
			var c2 = _g1[_g];
			++_g;
			if(c2.name == c.name) {
				return "Column already exists";
			} else if(c2.type == cdb_ColumnType.TId && c.type == cdb_ColumnType.TId) {
				return "Only one ID allowed";
			}
		}
		if(c.name == "index" && this.sheet.props.hasIndex) {
			return "Sheet already has an index";
		}
		if(c.name == "group" && this.sheet.props.hasGroup) {
			return "Sheet already has a group";
		}
		if(index == null) {
			this.sheet.columns.push(c);
		} else {
			this.sheet.columns.splice(index,0,c);
		}
		var _g2 = 0;
		var _g11 = this.getLines();
		while(_g2 < _g11.length) {
			var i = _g11[_g2];
			++_g2;
			var def = this.base.getDefault(c);
			if(def != null) {
				i[c.name] = def;
			}
		}
		if(c.type == cdb_ColumnType.TList || c.type == cdb_ColumnType.TProperties) {
			this.base.createSubSheet(this,c);
		}
		return null;
	}
	,objToString: function(obj,esc) {
		if(esc == null) {
			esc = false;
		}
		if(obj == null) {
			return "null";
		}
		var fl = [];
		var _g = 0;
		var _g1 = this.sheet.columns;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var v = Reflect.field(obj,c.name);
			if(v == null) {
				continue;
			}
			fl.push(c.name + " : " + this.colToString(c,v,esc));
		}
		if(fl.length == 0) {
			return "{}";
		}
		return "{ " + fl.join(", ") + " }";
	}
	,colToString: function(c,v,esc) {
		if(esc == null) {
			esc = false;
		}
		if(v == null) {
			return "null";
		}
		var _g = c.type;
		if(_g[1] == 8) {
			var a = v;
			if(a.length == 0) {
				return "[]";
			}
			var s = this.base.getSheet(this.sheet.name + "@" + c.name);
			var _g1 = [];
			var _g11 = 0;
			while(_g11 < a.length) {
				var v1 = a[_g11];
				++_g11;
				_g1.push(s.objToString(v1,esc));
			}
			return "[ " + _g1.join(", ") + " ]";
		} else {
			return this.base.valToString(c.type,v,esc);
		}
	}
	,changeLineOrder: function(remap) {
		var _g = 0;
		var _g1 = this.base.sheets;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = s.sheet.columns;
			while(_g2 < _g3.length) {
				var c = _g3[_g2];
				++_g2;
				var _g4 = c.type;
				if(_g4[1] == 12) {
					var t = _g4[2];
					if(t == this.sheet.name) {
						var _g41 = 0;
						var _g5 = s.getLines();
						while(_g41 < _g5.length) {
							var obj = _g5[_g41];
							++_g41;
							var ldat = Reflect.field(obj,c.name);
							if(ldat == null || ldat == "") {
								continue;
							}
							var _g6 = [];
							var _g7 = 0;
							while(_g7 < 256) {
								var i = _g7++;
								_g6.push(i);
							}
							var d = cdb__$Types_Layer_$Impl_$.decode(ldat,_g6);
							var _g8 = 0;
							var _g71 = d.length;
							while(_g8 < _g71) {
								var i1 = _g8++;
								var r = remap[d[i1]];
								if(r < 0) {
									r = 0;
								}
								d[i1] = r;
							}
							ldat = cdb__$Types_Layer_$Impl_$.encode(d,this.base.data.compress);
							obj[c.name] = ldat;
						}
					}
				}
			}
		}
	}
	,getReferences: function(index) {
		var id = null;
		var _g = 0;
		var _g1 = this.sheet.columns;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var _g2 = c.type;
			if(_g2[1] == 0) {
				id = Reflect.field(this.sheet.lines[index],c.name);
				break;
			}
		}
		if(id == "" || id == null) {
			return null;
		}
		var results = [];
		var _g3 = 0;
		var _g11 = this.base.sheets;
		while(_g3 < _g11.length) {
			var s = _g11[_g3];
			++_g3;
			var _g21 = 0;
			var _g31 = s.sheet.columns;
			while(_g21 < _g31.length) {
				var c1 = _g31[_g21];
				++_g21;
				var _g4 = c1.type;
				switch(_g4[1]) {
				case 6:
					var sname = _g4[2];
					if(sname == this.sheet.name) {
						var sheets = [];
						var p = { s : s, c : c1.name, id : null};
						while(true) {
							var _g41 = 0;
							var _g5 = p.s.sheet.columns;
							while(_g41 < _g5.length) {
								var c2 = _g5[_g41];
								++_g41;
								var _g6 = c2.type;
								if(_g6[1] == 0) {
									p.id = c2.name;
									break;
								}
							}
							sheets.unshift(p);
							var p2 = p.s.getParent();
							if(p2 == null) {
								break;
							}
							p = { s : p2.s, c : p2.c, id : null};
						}
						var _g42 = 0;
						var _g51 = s.getObjects();
						while(_g42 < _g51.length) {
							var o = _g51[_g42];
							++_g42;
							var obj = o.path[o.path.length - 1];
							if(Reflect.field(obj,c1.name) == id) {
								results.push({ s : sheets, o : o});
							}
						}
					}
					break;
				case 9:
					var tname = _g4[2];
					break;
				default:
				}
			}
		}
		return results;
	}
	,updateValue: function(c,index,old) {
		var _gthis = this;
		var _g = c.type;
		switch(_g[1]) {
		case 0:
			this.sync();
			break;
		case 3:
			if(this.sheet.props.level != null && (c.name == "width" || c.name == "height")) {
				var obj = this.sheet.lines[index];
				var newW = Reflect.field(obj,"width");
				var newH = Reflect.field(obj,"height");
				var oldW = newW;
				var oldH = newH;
				if(c.name == "width") {
					oldW = old;
				} else {
					oldH = old;
				}
				var remapTileLayer = function(v) {
					if(v == null) {
						return null;
					}
					var odat = cdb__$Types_TileLayerData_$Impl_$.decode(v.data);
					var ndat = [];
					if(odat[0] == 65535) {
						ndat = odat;
					} else {
						var pos = 0;
						var _g1 = 0;
						var _g2 = newH;
						while(_g1 < _g2) {
							var y = _g1++;
							if(y >= oldH) {
								var _g3 = 0;
								var _g21 = newW;
								while(_g3 < _g21) {
									var x = _g3++;
									ndat.push(0);
								}
							} else if(newW <= oldW) {
								var _g31 = 0;
								var _g22 = newW;
								while(_g31 < _g22) {
									var x1 = _g31++;
									ndat.push(odat[pos++]);
								}
								pos += oldW - newW;
							} else {
								var _g32 = 0;
								var _g23 = oldW;
								while(_g32 < _g23) {
									var x2 = _g32++;
									ndat.push(odat[pos++]);
								}
								var _g33 = oldW;
								var _g24 = newW;
								while(_g33 < _g24) {
									var x3 = _g33++;
									ndat.push(0);
								}
							}
						}
					}
					return { file : v.file, size : v.size, stride : v.stride, data : cdb__$Types_TileLayerData_$Impl_$.encode(ndat,_gthis.base.data.compress)};
				};
				var _g4 = 0;
				var _g11 = this.sheet.columns;
				while(_g4 < _g11.length) {
					var c1 = _g11[_g4];
					++_g4;
					var v1 = Reflect.field(obj,c1.name);
					if(v1 == null) {
						continue;
					}
					var _g25 = c1.type;
					switch(_g25[1]) {
					case 8:
						var s = this.base.getSheet(this.sheet.name + "@" + c1.name);
						if(s.hasColumn("x",[cdb_ColumnType.TInt,cdb_ColumnType.TFloat]) && s.hasColumn("y",[cdb_ColumnType.TInt,cdb_ColumnType.TFloat])) {
							var elts = Reflect.field(obj,c1.name);
							var _g26 = 0;
							var _g34 = elts.slice();
							while(_g26 < _g34.length) {
								var e = _g34[_g26];
								++_g26;
								if(e.x >= newW || e.y >= newH) {
									HxOverrides.remove(elts,e);
								}
							}
						} else if(s.hasColumn("data",[cdb_ColumnType.TTileLayer])) {
							var a = v1;
							var _g27 = 0;
							while(_g27 < a.length) {
								var o = a[_g27];
								++_g27;
								o.data = remapTileLayer(o.data);
							}
						}
						break;
					case 12:
						var v2 = v1;
						var _g28 = [];
						var _g35 = 0;
						while(_g35 < 256) {
							var i = _g35++;
							_g28.push(i);
						}
						var odat1 = cdb__$Types_Layer_$Impl_$.decode(v2,_g28);
						var ndat1 = [];
						var _g41 = 0;
						var _g36 = newH;
						while(_g41 < _g36) {
							var y1 = _g41++;
							var _g6 = 0;
							var _g5 = newW;
							while(_g6 < _g5) {
								var x4 = _g6++;
								var k = y1 < oldH && x4 < oldW ? odat1[x4 + y1 * oldW] : 0;
								ndat1.push(k);
							}
						}
						v2 = cdb__$Types_Layer_$Impl_$.encode(ndat1,this.base.data.compress);
						obj[c1.name] = v2;
						break;
					case 15:
						obj[c1.name] = remapTileLayer(v1);
						break;
					default:
					}
				}
			} else {
				if(this.sheet.props.displayColumn == c.name) {
					var obj1 = this.sheet.lines[index];
					var _g7 = 0;
					var _g12 = this.sheet.columns;
					while(_g7 < _g12.length) {
						var cid = _g12[_g7];
						++_g7;
						if(cid.type == cdb_ColumnType.TId) {
							var id = Reflect.field(obj1,cid.name);
							if(id != null) {
								var disp = Reflect.field(obj1,c.name);
								if(disp == null) {
									disp = "#" + id;
								}
								var _this = this.index;
								(__map_reserved[id] != null ? _this.getReserved(id) : _this.h[id]).disp = disp;
							}
						}
					}
				}
				if(this.sheet.props.displayIcon == c.name) {
					var obj2 = this.sheet.lines[index];
					var _g8 = 0;
					var _g13 = this.sheet.columns;
					while(_g8 < _g13.length) {
						var cid1 = _g13[_g8];
						++_g8;
						if(cid1.type == cdb_ColumnType.TId) {
							var id1 = Reflect.field(obj2,cid1.name);
							if(id1 != null) {
								var _this1 = this.index;
								(__map_reserved[id1] != null ? _this1.getReserved(id1) : _this1.h[id1]).ico = Reflect.field(obj2,c.name);
							}
						}
					}
				}
			}
			break;
		default:
			if(this.sheet.props.displayColumn == c.name) {
				var obj3 = this.sheet.lines[index];
				var _g9 = 0;
				var _g14 = this.sheet.columns;
				while(_g9 < _g14.length) {
					var cid2 = _g14[_g9];
					++_g9;
					if(cid2.type == cdb_ColumnType.TId) {
						var id2 = Reflect.field(obj3,cid2.name);
						if(id2 != null) {
							var disp1 = Reflect.field(obj3,c.name);
							if(disp1 == null) {
								disp1 = "#" + id2;
							}
							var _this2 = this.index;
							(__map_reserved[id2] != null ? _this2.getReserved(id2) : _this2.h[id2]).disp = disp1;
						}
					}
				}
			}
			if(this.sheet.props.displayIcon == c.name) {
				var obj4 = this.sheet.lines[index];
				var _g10 = 0;
				var _g15 = this.sheet.columns;
				while(_g10 < _g15.length) {
					var cid3 = _g15[_g10];
					++_g10;
					if(cid3.type == cdb_ColumnType.TId) {
						var id3 = Reflect.field(obj4,cid3.name);
						if(id3 != null) {
							var _this3 = this.index;
							(__map_reserved[id3] != null ? _this3.getReserved(id3) : _this3.h[id3]).ico = Reflect.field(obj4,c.name);
						}
					}
				}
			}
		}
	}
	,sortById: function(a,b) {
		if(a.disp > b.disp) {
			return 1;
		} else {
			return -1;
		}
	}
	,rename: function(name) {
		this.base.smap.remove(this.sheet.name);
		this.sheet.name = name;
		var _this = this.base.smap;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,this);
		} else {
			_this.h[name] = this;
		}
	}
	,sync: function() {
		this.index = new haxe_ds_StringMap();
		this.all = [];
		var cid = null;
		var lines = this.getLines();
		var _g = 0;
		var _g1 = this.sheet.columns;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.type == cdb_ColumnType.TId) {
				var _g2 = 0;
				while(_g2 < lines.length) {
					var l = lines[_g2];
					++_g2;
					var v = Reflect.field(l,c.name);
					if(v != null && v != "") {
						var disp = v;
						var ico = null;
						if(this.sheet.props.displayColumn != null) {
							disp = Reflect.field(l,this.sheet.props.displayColumn);
							if(disp == null || disp == "") {
								disp = "#" + v;
							}
						}
						if(this.sheet.props.displayIcon != null) {
							ico = Reflect.field(l,this.sheet.props.displayIcon);
						}
						var o = { id : v, disp : disp, ico : ico, obj : l};
						var _this = this.index;
						if((__map_reserved[v] != null ? _this.getReserved(v) : _this.h[v]) == null) {
							var _this1 = this.index;
							if(__map_reserved[v] != null) {
								_this1.setReserved(v,o);
							} else {
								_this1.h[v] = o;
							}
						}
						this.all.push(o);
					}
				}
				this.all.sort($bind(this,this.sortById));
				break;
			}
		}
		var key = this.sheet.name;
		var _this2 = this.base.smap;
		if(__map_reserved[key] != null) {
			_this2.setReserved(key,this);
		} else {
			_this2.h[key] = this;
		}
	}
	,__class__: cdb_Sheet
};
var cdb_TileBuilder = function(t,stride,total) {
	this.borders = [];
	this.groundIds = new haxe_ds_StringMap();
	this.groundMap = [];
	var _g1 = 0;
	var _g = total + 1;
	while(_g1 < _g) {
		var i = _g1++;
		this.groundMap[i] = 0;
	}
	this.groundMap[0] = 0;
	this.borders = [];
	var tmp = new haxe_ds_StringMap();
	var _g2 = 0;
	var _g11 = t.sets;
	while(_g2 < _g11.length) {
		var s = _g11[_g2];
		++_g2;
		var _g21 = s.t;
		if(_g21 == "ground") {
			if(s.opts.name != "" && s.opts.name != null) {
				var key = s.opts.name;
				var g = __map_reserved[key] != null ? tmp.getReserved(key) : tmp.h[key];
				if(g == null) {
					g = [];
					var key1 = s.opts.name;
					if(__map_reserved[key1] != null) {
						tmp.setReserved(key1,g);
					} else {
						tmp.h[key1] = g;
					}
				}
				g.push(s);
			}
		}
	}
	var allGrounds = Lambda.array(tmp);
	allGrounds.sort(function(g1,g2) {
		var v = g1[0].opts.priority;
		var v1 = g2[0].opts.priority;
		var dp = (v == null ? 0 : v) - (v1 == null ? 0 : v1);
		if(dp != 0) {
			return dp;
		} else {
			return Reflect.compare(g1[0].opts.name,g2[0].opts.name);
		}
	});
	var gid = 0;
	var _g3 = 0;
	while(_g3 < allGrounds.length) {
		var g3 = allGrounds[_g3];
		++_g3;
		var v2 = g3[0].opts.priority;
		var p = v2 == null ? 0 : v2;
		if(p > 0) {
			++gid;
		}
		var fill = [];
		var _g12 = 0;
		while(_g12 < g3.length) {
			var s1 = g3[_g12];
			++_g12;
			var _g31 = 0;
			var _g22 = s1.w;
			while(_g31 < _g22) {
				var dx = _g31++;
				var _g5 = 0;
				var _g4 = s1.h;
				while(_g5 < _g4) {
					var dy = _g5++;
					var tid = s1.x + dx + (s1.y + dy) * stride;
					fill.push(tid);
					this.groundMap[tid + 1] = gid;
				}
			}
		}
		var key2 = g3[0].opts.name;
		var _this = this.groundIds;
		var value = { id : gid, fill : fill};
		if(__map_reserved[key2] != null) {
			_this.setReserved(key2,value);
		} else {
			_this.h[key2] = value;
		}
	}
	var maxGid = gid + 1;
	var allBorders = [];
	var _g6 = 0;
	var _g13 = t.sets;
	while(_g6 < _g13.length) {
		var s2 = _g13[_g6];
		++_g6;
		if(s2.t == "border") {
			allBorders.push(s2);
		}
	}
	allBorders.sort(function(b1,b2) {
		var k = 0;
		if(b1.opts.borderIn != null) {
			++k;
		}
		if(b1.opts.borderOut != null) {
			k += 2;
		}
		if(b1.opts.borderMode != null) {
			k += 4;
		}
		if(b1.opts.borderIn != null && b1.opts.borderOut != null && b1.opts.borderIn != "lower" && b1.opts.borderOut != "upper") {
			k += 8;
		}
		var k1 = 0;
		if(b2.opts.borderIn != null) {
			++k1;
		}
		if(b2.opts.borderOut != null) {
			k1 += 2;
		}
		if(b2.opts.borderMode != null) {
			k1 += 4;
		}
		if(b2.opts.borderIn != null && b2.opts.borderOut != null && b2.opts.borderIn != "lower" && b2.opts.borderOut != "upper") {
			k1 += 8;
		}
		return k - k1;
	});
	var _g7 = 0;
	while(_g7 < allBorders.length) {
		var b = allBorders[_g7];
		++_g7;
		var gid1;
		if(b.opts.borderIn == null) {
			gid1 = null;
		} else {
			var key3 = b.opts.borderIn;
			var _this1 = this.groundIds;
			gid1 = __map_reserved[key3] != null ? _this1.getReserved(key3) : _this1.h[key3];
		}
		var tid1;
		if(b.opts.borderOut == null) {
			tid1 = null;
		} else {
			var key4 = b.opts.borderOut;
			var _this2 = this.groundIds;
			tid1 = __map_reserved[key4] != null ? _this2.getReserved(key4) : _this2.h[key4];
		}
		if(gid1 == null && tid1 == null) {
			continue;
		}
		var gids;
		var tids;
		if(gid1 != null) {
			gids = [gid1.id];
		} else {
			var _g14 = b.opts.borderIn;
			if(_g14 == null) {
				var _g15 = [];
				var _g32 = tid1.id + 1;
				var _g23 = maxGid;
				while(_g32 < _g23) {
					var g4 = _g32++;
					_g15.push(g4);
				}
				gids = _g15;
			} else if(_g14 == "lower") {
				var _g16 = [];
				var _g33 = 0;
				var _g24 = tid1.id;
				while(_g33 < _g24) {
					var g5 = _g33++;
					_g16.push(g5);
				}
				gids = _g16;
			} else {
				continue;
			}
		}
		if(tid1 != null) {
			tids = [tid1.id];
		} else {
			var _g17 = b.opts.borderOut;
			if(_g17 == null) {
				var _g18 = [];
				var _g34 = 0;
				var _g25 = gid1.id;
				while(_g34 < _g25) {
					var g6 = _g34++;
					_g18.push(g6);
				}
				tids = _g18;
			} else if(_g17 == "upper") {
				var _g19 = [];
				var _g35 = gid1.id + 1;
				var _g26 = maxGid;
				while(_g35 < _g26) {
					var g7 = _g35++;
					_g19.push(g7);
				}
				tids = _g19;
			} else {
				continue;
			}
		}
		var clear = gid1 != null && tid1 != null && b.opts.borderMode == null;
		var _g110 = b.opts.borderMode;
		if(_g110 != null) {
			if(_g110 == "corner") {
				var tmp1 = gids;
				gids = tids;
				tids = tmp1;
			}
		}
		var _g27 = 0;
		while(_g27 < gids.length) {
			var g8 = gids[_g27];
			++_g27;
			var _g36 = 0;
			while(_g36 < tids.length) {
				var t1 = tids[_g36];
				++_g36;
				var bt = this.borders[g8 + t1 * 256];
				if(bt == null || clear) {
					var _g41 = [];
					var _g51 = 0;
					while(_g51 < 20) {
						var i1 = _g51++;
						_g41.push([]);
					}
					bt = _g41;
					if(gid1 != null) {
						bt[8] = gid1.fill;
					}
					this.borders[g8 + t1 * 256] = bt;
				}
				var _g52 = 0;
				var _g42 = b.w;
				while(_g52 < _g42) {
					var dx1 = _g52++;
					var _g71 = 0;
					var _g61 = b.h;
					while(_g71 < _g61) {
						var dy1 = _g71++;
						var k2;
						var _g8 = b.opts.borderMode;
						if(_g8 == null) {
							if(dy1 == 0) {
								k2 = dx1 == 0 ? 0 : dx1 == b.w - 1 ? 2 : 1;
							} else if(dy1 == b.h - 1) {
								k2 = dx1 == 0 ? 5 : dx1 == b.w - 1 ? 7 : 6;
							} else if(dx1 == 0) {
								k2 = 3;
							} else if(dx1 == b.w - 1) {
								k2 = 4;
							} else {
								continue;
							}
						} else {
							switch(_g8) {
							case "bottom":
								k2 = dx1 == 0 ? 17 : dx1 == b.w - 1 ? 19 : 18;
								break;
							case "corner":
								if(dx1 == 0 && dy1 == 0) {
									k2 = 9;
								} else if(dx1 == b.w - 1 && dy1 == 0) {
									k2 = 10;
								} else if(dx1 == 0 && dy1 == b.h - 1) {
									k2 = 11;
								} else if(dx1 == b.w - 1 && dy1 == b.h - 1) {
									k2 = 12;
								} else {
									continue;
								}
								break;
							case "u":
								if(dx1 == 1 && dy1 == 0) {
									k2 = 13;
								} else if(dx1 == 0 && dy1 == 1) {
									k2 = 14;
								} else if(dx1 == 2 && dy1 == 1) {
									k2 = 15;
								} else if(dx1 == 1 && dy1 == 2) {
									k2 = 16;
								} else {
									continue;
								}
								break;
							default:
								continue;
							}
						}
						bt[k2].push(b.x + dx1 + (b.y + dy1) * stride);
					}
				}
			}
		}
	}
};
$hxClasses["cdb.TileBuilder"] = cdb_TileBuilder;
cdb_TileBuilder.__name__ = ["cdb","TileBuilder"];
cdb_TileBuilder.prototype = {
	random: function(n) {
		n *= -862048943;
		n = n << 15 | n >>> 17;
		n *= 461845907;
		var h = 5381;
		h ^= n;
		h = h << 13 | h >>> 19;
		h = h * 5 + -430675100;
		h ^= h >> 16;
		h *= -2048144789;
		h ^= h >> 13;
		h *= -1028477387;
		h ^= h >> 16;
		return h;
	}
	,buildGrounds: function(input,width) {
		var _gthis = this;
		var height = input.length / width | 0;
		var p = -1;
		var out = [];
		var _g1 = 0;
		var _g = height;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = 0;
			var _g2 = width;
			while(_g3 < _g2) {
				var x = _g3++;
				var v = input[++p];
				var g = this.groundMap[v];
				var gl = x == 0 ? g : this.groundMap[input[p - 1]];
				var gr = x == width - 1 ? g : this.groundMap[input[p + 1]];
				var gt = y == 0 ? g : this.groundMap[input[p - width]];
				var gb = y == height - 1 ? g : this.groundMap[input[p + width]];
				var gtl = x == 0 || y == 0 ? g : this.groundMap[input[p - 1 - width]];
				var gtr = x == width - 1 || y == 0 ? g : this.groundMap[input[p + 1 - width]];
				var gbl = x == 0 || y == height - 1 ? g : this.groundMap[input[p - 1 + width]];
				var gbr = x == width - 1 || y == height - 1 ? g : this.groundMap[input[p + 1 + width]];
				var a = gr > gl ? gr : gl;
				var b = gt > gb ? gt : gb;
				var a1 = a > b ? a : b;
				var a2 = gtr > gtl ? gtr : gtl;
				var b1 = gbr > gbl ? gbr : gbl;
				var b2 = a2 > b1 ? a2 : b1;
				var max = a1 > b2 ? a1 : b2;
				var a3 = gr > gl ? gl : gr;
				var b3 = gt > gb ? gb : gt;
				var a4 = a3 > b3 ? b3 : a3;
				var a5 = gtr > gtl ? gtl : gtr;
				var b4 = gbr > gbl ? gbl : gbr;
				var b5 = a5 > b4 ? b4 : a5;
				var min = a4 > b5 ? b5 : a4;
				var _g5 = min;
				var _g4 = max + 1;
				while(_g5 < _g4) {
					var t = _g5++;
					var bb = this.borders[t + g * 256];
					if(bb == null) {
						continue;
					}
					var bits = 0;
					if(t == gtl) {
						bits |= 1;
					}
					if(t == gt) {
						bits |= 2;
					}
					if(t == gtr) {
						bits |= 4;
					}
					if(t == gl) {
						bits |= 8;
					}
					if(t == gr) {
						bits |= 16;
					}
					if(t == gbl) {
						bits |= 32;
					}
					if(t == gb) {
						bits |= 64;
					}
					if(t == gbr) {
						bits |= 128;
					}
					var f = false;
					if((bits & 26) == 26) {
						var a6 = bb[13];
						if(a6.length != 0) {
							bits &= -32;
							out.push(x);
							out.push(y);
							out.push(a6.length == 1 ? a6[0] : a6[_gthis.random(x + y * width) % a6.length]);
							f = true;
						}
					}
					var f1 = false;
					if((bits & 74) == 74) {
						var a7 = bb[14];
						if(a7.length != 0) {
							bits &= -108;
							out.push(x);
							out.push(y);
							out.push(a7.length == 1 ? a7[0] : a7[_gthis.random(x + y * width) % a7.length]);
							f1 = true;
						}
					}
					var f2 = false;
					if((bits & 82) == 82) {
						var a8 = bb[15];
						if(a8.length != 0) {
							bits &= -215;
							out.push(x);
							out.push(y);
							out.push(a8.length == 1 ? a8[0] : a8[_gthis.random(x + y * width) % a8.length]);
							f2 = true;
						}
					}
					var f3 = false;
					if((bits & 88) == 88) {
						var a9 = bb[16];
						if(a9.length != 0) {
							bits &= -249;
							out.push(x);
							out.push(y);
							out.push(a9.length == 1 ? a9[0] : a9[_gthis.random(x + y * width) % a9.length]);
							f3 = true;
						}
					}
					var f4 = false;
					if((bits & 10) == 10) {
						var a10 = bb[9];
						if(a10.length != 0) {
							bits &= -48;
							out.push(x);
							out.push(y);
							out.push(a10.length == 1 ? a10[0] : a10[_gthis.random(x + y * width) % a10.length]);
							f4 = true;
						}
					}
					var f5 = false;
					if((bits & 18) == 18) {
						var a11 = bb[10];
						if(a11.length != 0) {
							bits &= -152;
							out.push(x);
							out.push(y);
							out.push(a11.length == 1 ? a11[0] : a11[_gthis.random(x + y * width) % a11.length]);
							f5 = true;
						}
					}
					var f6 = false;
					if((bits & 72) == 72) {
						var a12 = bb[11];
						if(a12.length != 0) {
							bits &= -234;
							out.push(x);
							out.push(y);
							out.push(a12.length == 1 ? a12[0] : a12[_gthis.random(x + y * width) % a12.length]);
							f6 = true;
						}
					}
					var f7 = false;
					if((bits & 80) == 80) {
						var a13 = bb[12];
						if(a13.length != 0) {
							bits &= -245;
							out.push(x);
							out.push(y);
							out.push(a13.length == 1 ? a13[0] : a13[_gthis.random(x + y * width) % a13.length]);
							f7 = true;
						}
					}
					var f8 = false;
					if((bits & 2) == 2) {
						var a14 = bb[6];
						if(a14.length != 0) {
							bits &= -8;
							out.push(x);
							out.push(y);
							out.push(a14.length == 1 ? a14[0] : a14[_gthis.random(x + y * width) % a14.length]);
							f8 = true;
						}
					}
					if(f8) {
						var a15 = bb[18];
						if(a15.length != 0) {
							out.push(x);
							out.push(y + 1);
							if(x > 0 && y > 0 && this.groundMap[input[p - 1 - width]] != t) {
								out.push(a15[0]);
							} else if(x < width - 1 && y > 0 && this.groundMap[input[p + 1 - width]] != t) {
								out.push(a15[a15.length - 1]);
							} else if(a15.length == 1) {
								out.push(a15[0]);
							} else {
								out.push(a15[1 + this.random(x + y * width) % (a15.length - 2)]);
							}
						}
					}
					var f9 = false;
					if((bits & 8) == 8) {
						var a16 = bb[4];
						if(a16.length != 0) {
							bits &= -42;
							out.push(x);
							out.push(y);
							out.push(a16.length == 1 ? a16[0] : a16[_gthis.random(x + y * width) % a16.length]);
							f9 = true;
						}
					}
					var f10 = false;
					if((bits & 16) == 16) {
						var a17 = bb[3];
						if(a17.length != 0) {
							bits &= -149;
							out.push(x);
							out.push(y);
							out.push(a17.length == 1 ? a17[0] : a17[_gthis.random(x + y * width) % a17.length]);
							f10 = true;
						}
					}
					var f11 = false;
					if((bits & 64) == 64) {
						var a18 = bb[1];
						if(a18.length != 0) {
							bits &= -225;
							out.push(x);
							out.push(y);
							out.push(a18.length == 1 ? a18[0] : a18[_gthis.random(x + y * width) % a18.length]);
							f11 = true;
						}
					}
					var f12 = false;
					if((bits & 1) == 1) {
						var a19 = bb[7];
						if(a19.length != 0) {
							bits &= -2;
							out.push(x);
							out.push(y);
							out.push(a19.length == 1 ? a19[0] : a19[_gthis.random(x + y * width) % a19.length]);
							f12 = true;
						}
					}
					if(f12) {
						var a20 = bb[19];
						if(a20.length != 0) {
							var y1 = y + 1;
							out.push(x);
							out.push(y1);
							out.push(a20.length == 1 ? a20[0] : a20[_gthis.random(x + y1 * width) % a20.length]);
						}
					}
					var f13 = false;
					if((bits & 4) == 4) {
						var a21 = bb[5];
						if(a21.length != 0) {
							bits &= -5;
							out.push(x);
							out.push(y);
							out.push(a21.length == 1 ? a21[0] : a21[_gthis.random(x + y * width) % a21.length]);
							f13 = true;
						}
					}
					if(f13) {
						var a22 = bb[17];
						if(a22.length != 0) {
							var y2 = y + 1;
							out.push(x);
							out.push(y2);
							out.push(a22.length == 1 ? a22[0] : a22[_gthis.random(x + y2 * width) % a22.length]);
						}
					}
					var f14 = false;
					if((bits & 32) == 32) {
						var a23 = bb[2];
						if(a23.length != 0) {
							bits &= -33;
							out.push(x);
							out.push(y);
							out.push(a23.length == 1 ? a23[0] : a23[_gthis.random(x + y * width) % a23.length]);
							f14 = true;
						}
					}
					var f15 = false;
					if((bits & 128) == 128) {
						var a24 = bb[0];
						if(a24.length != 0) {
							bits &= -129;
							out.push(x);
							out.push(y);
							out.push(a24.length == 1 ? a24[0] : a24[_gthis.random(x + y * width) % a24.length]);
							f15 = true;
						}
					}
				}
			}
		}
		return out;
	}
	,__class__: cdb_TileBuilder
};
var cdb__$Types_ArrayIterator = function(a) {
	this.a = a;
	this.pos = 0;
};
$hxClasses["cdb._Types.ArrayIterator"] = cdb__$Types_ArrayIterator;
cdb__$Types_ArrayIterator.__name__ = ["cdb","_Types","ArrayIterator"];
cdb__$Types_ArrayIterator.prototype = {
	hasNext: function() {
		return this.pos < this.a.length;
	}
	,next: function() {
		return this.a[this.pos++];
	}
	,__class__: cdb__$Types_ArrayIterator
};
var cdb__$Types_FlagsIterator = function(flags) {
	this.flags = flags;
	this.k = 0;
};
$hxClasses["cdb._Types.FlagsIterator"] = cdb__$Types_FlagsIterator;
cdb__$Types_FlagsIterator.__name__ = ["cdb","_Types","FlagsIterator"];
cdb__$Types_FlagsIterator.prototype = {
	hasNext: function() {
		return this.flags >= 1 << this.k;
	}
	,next: function() {
		while((this.flags & 1 << this.k) == 0) this.k++;
		return this.k++;
	}
	,__class__: cdb__$Types_FlagsIterator
};
var cdb__$Types_ArrayRead_$Impl_$ = {};
$hxClasses["cdb._Types.ArrayRead_Impl_"] = cdb__$Types_ArrayRead_$Impl_$;
cdb__$Types_ArrayRead_$Impl_$.__name__ = ["cdb","_Types","ArrayRead_Impl_"];
cdb__$Types_ArrayRead_$Impl_$._new = function(a) {
	var this1 = a;
	return this1;
};
cdb__$Types_ArrayRead_$Impl_$.get_length = function(this1) {
	return this1.length;
};
cdb__$Types_ArrayRead_$Impl_$.iterator = function(this1) {
	return new cdb__$Types_ArrayIterator(this1);
};
cdb__$Types_ArrayRead_$Impl_$.castArray = function(this1) {
	return this1;
};
cdb__$Types_ArrayRead_$Impl_$.toArrayCopy = function(this1) {
	return this1.slice();
};
cdb__$Types_ArrayRead_$Impl_$.getIndex = function(this1,v) {
	return this1[v];
};
var cdb__$Types_Flags_$Impl_$ = {};
$hxClasses["cdb._Types.Flags_Impl_"] = cdb__$Types_Flags_$Impl_$;
cdb__$Types_Flags_$Impl_$.__name__ = ["cdb","_Types","Flags_Impl_"];
cdb__$Types_Flags_$Impl_$._new = function(x) {
	var this1 = x;
	return this1;
};
cdb__$Types_Flags_$Impl_$.has = function(this1,t) {
	return (this1 & 1 << t) != 0;
};
cdb__$Types_Flags_$Impl_$.set = function(this1,t) {
	this1 |= 1 << t;
};
cdb__$Types_Flags_$Impl_$.unset = function(this1,t) {
	this1 &= ~(1 << t);
};
cdb__$Types_Flags_$Impl_$.iterator = function(this1) {
	var this2 = this1;
	return new cdb__$Types_FlagsIterator(this2);
};
cdb__$Types_Flags_$Impl_$.toInt = function(this1) {
	return this1;
};
var cdb__$Types_Layer_$Impl_$ = {};
$hxClasses["cdb._Types.Layer_Impl_"] = cdb__$Types_Layer_$Impl_$;
cdb__$Types_Layer_$Impl_$.__name__ = ["cdb","_Types","Layer_Impl_"];
cdb__$Types_Layer_$Impl_$._new = function(x) {
	var this1 = x;
	return this1;
};
cdb__$Types_Layer_$Impl_$.decode = function(this1,all) {
	var k = cdb_Lz4Reader.decodeString(this1);
	var _g = [];
	var _g2 = 0;
	var _g1 = k.length;
	while(_g2 < _g1) {
		var i = _g2++;
		_g.push(all[k.b[i]]);
	}
	return _g;
};
cdb__$Types_Layer_$Impl_$.encode = function(a,compress) {
	var b = new haxe_io_Bytes(new ArrayBuffer(a.length));
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		b.b[i] = a[i] & 255;
	}
	var this1 = cdb_Lz4Reader.encodeBytes(b,compress);
	return this1;
};
var cdb__$Types_TileLayerData_$Impl_$ = {};
$hxClasses["cdb._Types.TileLayerData_Impl_"] = cdb__$Types_TileLayerData_$Impl_$;
cdb__$Types_TileLayerData_$Impl_$.__name__ = ["cdb","_Types","TileLayerData_Impl_"];
cdb__$Types_TileLayerData_$Impl_$._new = function(v) {
	var this1 = v;
	return this1;
};
cdb__$Types_TileLayerData_$Impl_$.decode = function(this1) {
	var k = cdb_Lz4Reader.decodeString(this1);
	var _g = [];
	var _g2 = 0;
	var _g1 = k.length >> 1;
	while(_g2 < _g1) {
		var i = _g2++;
		_g.push(k.b[i << 1] | k.b[(i << 1) + 1] << 8);
	}
	return _g;
};
cdb__$Types_TileLayerData_$Impl_$.encode = function(a,compress) {
	var b = new haxe_io_Bytes(new ArrayBuffer(a.length * 2));
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		var v = a[i];
		b.b[i << 1] = v & 255 & 255;
		b.b[(i << 1) + 1] = v >> 8 & 255 & 255;
	}
	return cdb__$Types_TileLayerData_$Impl_$._new(cdb_Lz4Reader.encodeBytes(b,compress));
};
var cdb__$Types_LevelPropsAccess_$Impl_$ = {};
$hxClasses["cdb._Types.LevelPropsAccess_Impl_"] = cdb__$Types_LevelPropsAccess_$Impl_$;
cdb__$Types_LevelPropsAccess_$Impl_$.__name__ = ["cdb","_Types","LevelPropsAccess_Impl_"];
cdb__$Types_LevelPropsAccess_$Impl_$.get_tileSize = function(this1) {
	return this1.tileSize;
};
cdb__$Types_LevelPropsAccess_$Impl_$.getTileset = function(this1,i,name) {
	return Reflect.field(i.sheet.props.level.tileSets,name);
};
cdb__$Types_LevelPropsAccess_$Impl_$.getLayer = function(this1,name) {
	if(this1 == null || this1.layers == null) {
		return null;
	}
	var _g = 0;
	var _g1 = this1.layers;
	while(_g < _g1.length) {
		var l = _g1[_g];
		++_g;
		if(l.l == name) {
			return l.p;
		}
	}
	return null;
};
var cdb_Index = function(data,name) {
	this.name = name;
	var _g = 0;
	var _g1 = data.sheets;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		if(s.name == name) {
			this.all = s.lines;
			this.sheet = s;
			break;
		}
	}
	if(this.sheet == null) {
		throw new js__$Boot_HaxeError("'" + name + "' not found in CDB data");
	}
};
$hxClasses["cdb.Index"] = cdb_Index;
cdb_Index.__name__ = ["cdb","Index"];
cdb_Index.prototype = {
	__class__: cdb_Index
};
var cdb_IndexId = function(data,name) {
	cdb_Index.call(this,data,name);
	this.byId = new haxe_ds_StringMap();
	this.byIndex = [];
	var _g = 0;
	var _g1 = this.sheet.columns;
	while(_g < _g1.length) {
		var c = _g1[_g];
		++_g;
		var _g2 = c.type;
		if(_g2[1] == 0) {
			var cname = c.name;
			var _g21 = 0;
			var _g3 = this.sheet.lines;
			while(_g21 < _g3.length) {
				var a = _g3[_g21];
				++_g21;
				var id = Reflect.field(a,cname);
				if(id != null && id != "") {
					var _this = this.byId;
					var value = a;
					if(__map_reserved[id] != null) {
						_this.setReserved(id,value);
					} else {
						_this.h[id] = value;
					}
					this.byIndex.push(a);
				}
			}
			break;
		}
	}
};
$hxClasses["cdb.IndexId"] = cdb_IndexId;
cdb_IndexId.__name__ = ["cdb","IndexId"];
cdb_IndexId.__super__ = cdb_Index;
cdb_IndexId.prototype = $extend(cdb_Index.prototype,{
	get: function(k) {
		var _this = this.byId;
		var key = k;
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,resolve: function(id,opt) {
		if(id == null) {
			return null;
		}
		var _this = this.byId;
		var v = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
		if(v == null && !opt) {
			throw new js__$Boot_HaxeError("Missing " + this.name + "." + id);
		} else {
			return v;
		}
	}
	,__class__: cdb_IndexId
});
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = ["haxe","IMap"];
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = ["haxe","_Int64","___Int64"];
haxe__$Int64__$_$_$Int64.prototype = {
	__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Serializer = function() {
	this.buf = new StringBuf();
	this.cache = [];
	this.useCache = haxe_Serializer.USE_CACHE;
	this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
	this.shash = new haxe_ds_StringMap();
	this.scount = 0;
};
$hxClasses["haxe.Serializer"] = haxe_Serializer;
haxe_Serializer.__name__ = ["haxe","Serializer"];
haxe_Serializer.run = function(v) {
	var s = new haxe_Serializer();
	s.serialize(v);
	return s.toString();
};
haxe_Serializer.prototype = {
	toString: function() {
		return this.buf.b;
	}
	,serializeString: function(s) {
		var _this = this.shash;
		var x = __map_reserved[s] != null ? _this.getReserved(s) : _this.h[s];
		if(x != null) {
			this.buf.b += "R";
			this.buf.b += x == null ? "null" : "" + x;
			return;
		}
		var _this1 = this.shash;
		var value = this.scount++;
		if(__map_reserved[s] != null) {
			_this1.setReserved(s,value);
		} else {
			_this1.h[s] = value;
		}
		this.buf.b += "y";
		s = encodeURIComponent(s);
		this.buf.b += Std.string(s.length);
		this.buf.b += ":";
		this.buf.b += s == null ? "null" : "" + s;
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g1 = 0;
		var _g = this.cache.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.b += "r";
				this.buf.b += i == null ? "null" : "" + i;
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeFields: function(v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.b += "g";
	}
	,serialize: function(v) {
		var _g = Type["typeof"](v);
		switch(_g[1]) {
		case 0:
			this.buf.b += "n";
			break;
		case 1:
			var v1 = v;
			if(v1 == 0) {
				this.buf.b += "z";
				return;
			}
			this.buf.b += "i";
			this.buf.b += v1 == null ? "null" : "" + v1;
			break;
		case 2:
			var v2 = v;
			if(isNaN(v2)) {
				this.buf.b += "k";
			} else if(!isFinite(v2)) {
				this.buf.b += v2 < 0 ? "m" : "p";
			} else {
				this.buf.b += "d";
				this.buf.b += v2 == null ? "null" : "" + v2;
			}
			break;
		case 3:
			this.buf.b += v ? "t" : "f";
			break;
		case 4:
			if(js_Boot.__instanceof(v,Class)) {
				var className = Type.getClassName(v);
				this.buf.b += "A";
				this.serializeString(className);
			} else if(js_Boot.__instanceof(v,Enum)) {
				this.buf.b += "B";
				this.serializeString(Type.getEnumName(v));
			} else {
				if(this.useCache && this.serializeRef(v)) {
					return;
				}
				this.buf.b += "o";
				this.serializeFields(v);
			}
			break;
		case 5:
			throw new js__$Boot_HaxeError("Cannot serialize function");
		case 6:
			var c = _g[2];
			if(c == String) {
				this.serializeString(v);
				return;
			}
			if(this.useCache && this.serializeRef(v)) {
				return;
			}
			switch(c) {
			case Array:
				var ucount = 0;
				this.buf.b += "a";
				var l = v["length"];
				var _g1 = 0;
				var _g2 = l;
				while(_g1 < _g2) {
					var i = _g1++;
					if(v[i] == null) {
						++ucount;
					} else {
						if(ucount > 0) {
							if(ucount == 1) {
								this.buf.b += "n";
							} else {
								this.buf.b += "u";
								this.buf.b += ucount == null ? "null" : "" + ucount;
							}
							ucount = 0;
						}
						this.serialize(v[i]);
					}
				}
				if(ucount > 0) {
					if(ucount == 1) {
						this.buf.b += "n";
					} else {
						this.buf.b += "u";
						this.buf.b += ucount == null ? "null" : "" + ucount;
					}
				}
				this.buf.b += "h";
				break;
			case Date:
				var d = v;
				this.buf.b += "v";
				this.buf.b += Std.string(d.getTime());
				break;
			case haxe_ds_IntMap:
				this.buf.b += "q";
				var v3 = v;
				var k = v3.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					this.buf.b += ":";
					this.buf.b += k1 == null ? "null" : "" + k1;
					this.serialize(v3.h[k1]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_List:
				this.buf.b += "l";
				var v4 = v;
				var _g_head = v4.h;
				while(_g_head != null) {
					var val = _g_head.item;
					_g_head = _g_head.next;
					var i1 = val;
					this.serialize(i1);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_ObjectMap:
				this.buf.b += "M";
				var v5 = v;
				var k2 = v5.keys();
				while(k2.hasNext()) {
					var k3 = k2.next();
					var id = Reflect.field(k3,"__id__");
					Reflect.deleteField(k3,"__id__");
					this.serialize(k3);
					k3["__id__"] = id;
					this.serialize(v5.h[k3.__id__]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_StringMap:
				this.buf.b += "b";
				var v6 = v;
				var k4 = v6.keys();
				while(k4.hasNext()) {
					var k5 = k4.next();
					this.serializeString(k5);
					this.serialize(__map_reserved[k5] != null ? v6.getReserved(k5) : v6.h[k5]);
				}
				this.buf.b += "h";
				break;
			case haxe_io_Bytes:
				var v7 = v;
				this.buf.b += "s";
				this.buf.b += Std.string(Math.ceil(v7.length * 8 / 6));
				this.buf.b += ":";
				var i2 = 0;
				var max = v7.length - 2;
				var b64 = haxe_Serializer.BASE64_CODES;
				if(b64 == null) {
					var this1 = new Array(haxe_Serializer.BASE64.length);
					b64 = this1;
					var _g11 = 0;
					var _g3 = haxe_Serializer.BASE64.length;
					while(_g11 < _g3) {
						var i3 = _g11++;
						b64[i3] = HxOverrides.cca(haxe_Serializer.BASE64,i3);
					}
					haxe_Serializer.BASE64_CODES = b64;
				}
				while(i2 < max) {
					var b1 = v7.b[i2++];
					var b2 = v7.b[i2++];
					var b3 = v7.b[i2++];
					this.buf.b += String.fromCharCode(b64[b1 >> 2]);
					this.buf.b += String.fromCharCode(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCharCode(b64[(b2 << 2 | b3 >> 6) & 63]);
					this.buf.b += String.fromCharCode(b64[b3 & 63]);
				}
				if(i2 == max) {
					var b11 = v7.b[i2++];
					var b21 = v7.b[i2++];
					this.buf.b += String.fromCharCode(b64[b11 >> 2]);
					this.buf.b += String.fromCharCode(b64[(b11 << 4 | b21 >> 4) & 63]);
					this.buf.b += String.fromCharCode(b64[b21 << 2 & 63]);
				} else if(i2 == max + 1) {
					var b12 = v7.b[i2++];
					this.buf.b += String.fromCharCode(b64[b12 >> 2]);
					this.buf.b += String.fromCharCode(b64[b12 << 4 & 63]);
				}
				break;
			default:
				if(this.useCache) {
					this.cache.pop();
				}
				if(v.hxSerialize != null) {
					this.buf.b += "C";
					this.serializeString(Type.getClassName(c));
					if(this.useCache) {
						this.cache.push(v);
					}
					v.hxSerialize(this);
					this.buf.b += "g";
				} else {
					this.buf.b += "c";
					this.serializeString(Type.getClassName(c));
					if(this.useCache) {
						this.cache.push(v);
					}
					this.serializeFields(v);
				}
			}
			break;
		case 7:
			var e = _g[2];
			if(this.useCache) {
				if(this.serializeRef(v)) {
					return;
				}
				this.cache.pop();
			}
			this.buf.b += Std.string(this.useEnumIndex ? "j" : "w");
			this.serializeString(Type.getEnumName(e));
			if(this.useEnumIndex) {
				this.buf.b += ":";
				this.buf.b += Std.string(v[1]);
			} else {
				this.serializeString(v[0]);
			}
			this.buf.b += ":";
			var l1 = v["length"];
			this.buf.b += Std.string(l1 - 2);
			var _g12 = 2;
			var _g4 = l1;
			while(_g12 < _g4) {
				var i4 = _g12++;
				this.serialize(v[i4]);
			}
			if(this.useCache) {
				this.cache.push(v);
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Cannot serialize " + Std.string(v));
		}
	}
	,__class__: haxe_Serializer
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = ["haxe","Timer"];
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = ["haxe","_Unserializer","DefaultResolver"];
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return Type.resolveClass(name);
	}
	,resolveEnum: function(name) {
		return Type.resolveEnum(name);
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = ["haxe","Unserializer"];
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g1 = 0;
	var _g = haxe_Unserializer.BASE64.length;
	while(_g1 < _g) {
		var i = _g1++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw new js__$Boot_HaxeError("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw new js__$Boot_HaxeError("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw new js__$Boot_HaxeError("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		var _g = this.buf.charCodeAt(this.pos++);
		switch(_g) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw new js__$Boot_HaxeError("Class not found " + name);
			}
			return cl;
		case 66:
			var name1 = this.unserialize();
			var e = this.resolver.resolveEnum(name1);
			if(e == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name1);
			}
			return e;
		case 67:
			var name2 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name2);
			if(cl1 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name2);
			}
			var o = Object.create(cl1.prototype);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw new js__$Boot_HaxeError("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw new js__$Boot_HaxeError("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf1 = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n1 = this.readDigits();
					a[a.length + n1 - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h1 = new haxe_ds_StringMap();
			this.cache.push(h1);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s1 = this.unserialize();
				var value = this.unserialize();
				if(__map_reserved[s1] != null) {
					h1.setReserved(s1,value);
				} else {
					h1.h[s1] = value;
				}
			}
			this.pos++;
			return h1;
		case 99:
			var name3 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name3);
			if(cl2 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name3);
			}
			var o1 = Object.create(cl2.prototype);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name4 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name4);
			if(edecl == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name4);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw new js__$Boot_HaxeError("Unknown enum index " + name4 + "@" + index);
			}
			var e1 = this.unserializeEnum(edecl,tag);
			this.cache.push(e1);
			return e1;
		case 107:
			return NaN;
		case 108:
			var l = new haxe_ds_List();
			this.cache.push(l);
			var buf3 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o2 = { };
			this.cache.push(o2);
			this.unserializeObject(o2);
			return o2;
		case 112:
			return Infinity;
		case 113:
			var h2 = new haxe_ds_IntMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			var c1 = this.buf.charCodeAt(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				var value1 = this.unserialize();
				h2.h[i] = value1;
				c1 = this.buf.charCodeAt(this.pos++);
			}
			if(c1 != 104) {
				throw new js__$Boot_HaxeError("Invalid IntMap format");
			}
			return h2;
		case 114:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.cache.length) {
				throw new js__$Boot_HaxeError("Invalid reference");
			}
			return this.cache[n2];
		case 115:
			var len = this.readDigits();
			var buf5 = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw new js__$Boot_HaxeError("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i1 + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[buf5.charCodeAt(i1++)];
				var c2 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c11 << 2 | c2 >> 4) & 255;
				var c3 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c2 << 4 | c3 >> 2) & 255;
				var c4 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c3 << 6 | c4) & 255;
			}
			if(rest >= 2) {
				var c12 = codes[buf5.charCodeAt(i1++)];
				var c21 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c12 << 2 | c21 >> 4) & 255;
				if(rest == 3) {
					var c31 = codes[buf5.charCodeAt(i1++)];
					bytes.b[bpos++] = (c21 << 4 | c31 >> 2) & 255;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				d = new Date(this.readFloat());
			}
			this.cache.push(d);
			return d;
		case 119:
			var name5 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name5);
			if(edecl1 == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name5);
			}
			var e2 = this.unserializeEnum(edecl1,this.unserialize());
			this.cache.push(e2);
			return e2;
		case 120:
			throw js__$Boot_HaxeError.wrap(this.unserialize());
		case 121:
			var len1 = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len1) {
				throw new js__$Boot_HaxeError("Invalid string length");
			}
			var s2 = HxOverrides.substr(this.buf,this.pos,len1);
			this.pos += len1;
			s2 = decodeURIComponent(s2.split("+").join(" "));
			this.scache.push(s2);
			return s2;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
haxe_io_Bytes.prototype = {
	blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,getDouble: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat64(pos,true);
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,getInt64: function(pos) {
		var this1 = new haxe__$Int64__$_$_$Int64(this.getInt32(pos + 4),this.getInt32(pos));
		return this1;
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,toHex: function() {
		var s_b = "";
		var chars = [];
		var str = "0123456789abcdef";
		var _g1 = 0;
		var _g = str.length;
		while(_g1 < _g) {
			var i = _g1++;
			chars.push(HxOverrides.cca(str,i));
		}
		var _g11 = 0;
		var _g2 = this.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var c = this.b[i1];
			s_b += String.fromCharCode(chars[c >> 4]);
			s_b += String.fromCharCode(chars[c & 15]);
		}
		return s_b;
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = ["haxe","crypto","Base64"];
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		var _g = bytes.length % 3;
		switch(_g) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = ["haxe","crypto","BaseCode"];
haxe_crypto_BaseCode.prototype = {
	encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask] & 255;
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask] & 255;
		}
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255 & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_crypto_Crc32 = function() { };
$hxClasses["haxe.crypto.Crc32"] = haxe_crypto_Crc32;
haxe_crypto_Crc32.__name__ = ["haxe","crypto","Crc32"];
haxe_crypto_Crc32.make = function(data) {
	var init = -1;
	var crc = init;
	var b = data.b.bufferValue;
	var _g1 = 0;
	var _g = data.length;
	while(_g1 < _g) {
		var i = _g1++;
		var tmp = (crc ^ b.bytes[i]) & 255;
		var _g2 = 0;
		while(_g2 < 8) {
			var j = _g2++;
			if((tmp & 1) == 1) {
				tmp = tmp >>> 1 ^ -306674912;
			} else {
				tmp >>>= 1;
			}
		}
		crc = crc >>> 8 ^ tmp;
	}
	return crc ^ init;
};
var haxe_crypto_Md5 = function() {
};
$hxClasses["haxe.crypto.Md5"] = haxe_crypto_Md5;
haxe_crypto_Md5.__name__ = ["haxe","crypto","Md5"];
haxe_crypto_Md5.make = function(b) {
	var h = new haxe_crypto_Md5().doEncode(haxe_crypto_Md5.bytes2blks(b));
	var out = new haxe_io_Bytes(new ArrayBuffer(16));
	var p = 0;
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		out.b[p++] = h[i] & 255 & 255;
		out.b[p++] = h[i] >> 8 & 255 & 255;
		out.b[p++] = h[i] >> 16 & 255 & 255;
		out.b[p++] = h[i] >>> 24 & 255;
	}
	return out;
};
haxe_crypto_Md5.bytes2blks = function(b) {
	var nblk = (b.length + 8 >> 6) + 1;
	var blks = [];
	var blksSize = nblk * 16;
	var _g1 = 0;
	var _g = blksSize;
	while(_g1 < _g) {
		var i = _g1++;
		blks[i] = 0;
	}
	var i1 = 0;
	while(i1 < b.length) {
		blks[i1 >> 2] |= b.b[i1] << (((b.length << 3) + i1 & 3) << 3);
		++i1;
	}
	blks[i1 >> 2] |= 128 << (b.length * 8 + i1) % 4 * 8;
	var l = b.length * 8;
	var k = nblk * 16 - 2;
	blks[k] = l & 255;
	blks[k] |= (l >>> 8 & 255) << 8;
	blks[k] |= (l >>> 16 & 255) << 16;
	blks[k] |= (l >>> 24 & 255) << 24;
	return blks;
};
haxe_crypto_Md5.prototype = {
	bitOR: function(a,b) {
		var lsb = a & 1 | b & 1;
		var msb31 = a >>> 1 | b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitXOR: function(a,b) {
		var lsb = a & 1 ^ b & 1;
		var msb31 = a >>> 1 ^ b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitAND: function(a,b) {
		var lsb = a & 1 & (b & 1);
		var msb31 = a >>> 1 & b >>> 1;
		return msb31 << 1 | lsb;
	}
	,addme: function(x,y) {
		var lsw = (x & 65535) + (y & 65535);
		var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
		return msw << 16 | lsw & 65535;
	}
	,rol: function(num,cnt) {
		return num << cnt | num >>> 32 - cnt;
	}
	,cmn: function(q,a,b,x,s,t) {
		return this.addme(this.rol(this.addme(this.addme(a,q),this.addme(x,t)),s),b);
	}
	,ff: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,c),this.bitAND(~b,d)),a,b,x,s,t);
	}
	,gg: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,d),this.bitAND(c,~d)),a,b,x,s,t);
	}
	,hh: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(this.bitXOR(b,c),d),a,b,x,s,t);
	}
	,ii: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(c,this.bitOR(b,~d)),a,b,x,s,t);
	}
	,doEncode: function(x) {
		var a = 1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d = 271733878;
		var step;
		var i = 0;
		while(i < x.length) {
			var olda = a;
			var oldb = b;
			var oldc = c;
			var oldd = d;
			step = 0;
			a = this.ff(a,b,c,d,x[i],7,-680876936);
			d = this.ff(d,a,b,c,x[i + 1],12,-389564586);
			c = this.ff(c,d,a,b,x[i + 2],17,606105819);
			b = this.ff(b,c,d,a,x[i + 3],22,-1044525330);
			a = this.ff(a,b,c,d,x[i + 4],7,-176418897);
			d = this.ff(d,a,b,c,x[i + 5],12,1200080426);
			c = this.ff(c,d,a,b,x[i + 6],17,-1473231341);
			b = this.ff(b,c,d,a,x[i + 7],22,-45705983);
			a = this.ff(a,b,c,d,x[i + 8],7,1770035416);
			d = this.ff(d,a,b,c,x[i + 9],12,-1958414417);
			c = this.ff(c,d,a,b,x[i + 10],17,-42063);
			b = this.ff(b,c,d,a,x[i + 11],22,-1990404162);
			a = this.ff(a,b,c,d,x[i + 12],7,1804603682);
			d = this.ff(d,a,b,c,x[i + 13],12,-40341101);
			c = this.ff(c,d,a,b,x[i + 14],17,-1502002290);
			b = this.ff(b,c,d,a,x[i + 15],22,1236535329);
			a = this.gg(a,b,c,d,x[i + 1],5,-165796510);
			d = this.gg(d,a,b,c,x[i + 6],9,-1069501632);
			c = this.gg(c,d,a,b,x[i + 11],14,643717713);
			b = this.gg(b,c,d,a,x[i],20,-373897302);
			a = this.gg(a,b,c,d,x[i + 5],5,-701558691);
			d = this.gg(d,a,b,c,x[i + 10],9,38016083);
			c = this.gg(c,d,a,b,x[i + 15],14,-660478335);
			b = this.gg(b,c,d,a,x[i + 4],20,-405537848);
			a = this.gg(a,b,c,d,x[i + 9],5,568446438);
			d = this.gg(d,a,b,c,x[i + 14],9,-1019803690);
			c = this.gg(c,d,a,b,x[i + 3],14,-187363961);
			b = this.gg(b,c,d,a,x[i + 8],20,1163531501);
			a = this.gg(a,b,c,d,x[i + 13],5,-1444681467);
			d = this.gg(d,a,b,c,x[i + 2],9,-51403784);
			c = this.gg(c,d,a,b,x[i + 7],14,1735328473);
			b = this.gg(b,c,d,a,x[i + 12],20,-1926607734);
			a = this.hh(a,b,c,d,x[i + 5],4,-378558);
			d = this.hh(d,a,b,c,x[i + 8],11,-2022574463);
			c = this.hh(c,d,a,b,x[i + 11],16,1839030562);
			b = this.hh(b,c,d,a,x[i + 14],23,-35309556);
			a = this.hh(a,b,c,d,x[i + 1],4,-1530992060);
			d = this.hh(d,a,b,c,x[i + 4],11,1272893353);
			c = this.hh(c,d,a,b,x[i + 7],16,-155497632);
			b = this.hh(b,c,d,a,x[i + 10],23,-1094730640);
			a = this.hh(a,b,c,d,x[i + 13],4,681279174);
			d = this.hh(d,a,b,c,x[i],11,-358537222);
			c = this.hh(c,d,a,b,x[i + 3],16,-722521979);
			b = this.hh(b,c,d,a,x[i + 6],23,76029189);
			a = this.hh(a,b,c,d,x[i + 9],4,-640364487);
			d = this.hh(d,a,b,c,x[i + 12],11,-421815835);
			c = this.hh(c,d,a,b,x[i + 15],16,530742520);
			b = this.hh(b,c,d,a,x[i + 2],23,-995338651);
			a = this.ii(a,b,c,d,x[i],6,-198630844);
			d = this.ii(d,a,b,c,x[i + 7],10,1126891415);
			c = this.ii(c,d,a,b,x[i + 14],15,-1416354905);
			b = this.ii(b,c,d,a,x[i + 5],21,-57434055);
			a = this.ii(a,b,c,d,x[i + 12],6,1700485571);
			d = this.ii(d,a,b,c,x[i + 3],10,-1894986606);
			c = this.ii(c,d,a,b,x[i + 10],15,-1051523);
			b = this.ii(b,c,d,a,x[i + 1],21,-2054922799);
			a = this.ii(a,b,c,d,x[i + 8],6,1873313359);
			d = this.ii(d,a,b,c,x[i + 15],10,-30611744);
			c = this.ii(c,d,a,b,x[i + 6],15,-1560198380);
			b = this.ii(b,c,d,a,x[i + 13],21,1309151649);
			a = this.ii(a,b,c,d,x[i + 4],6,-145523070);
			d = this.ii(d,a,b,c,x[i + 11],10,-1120210379);
			c = this.ii(c,d,a,b,x[i + 2],15,718787259);
			b = this.ii(b,c,d,a,x[i + 9],21,-343485551);
			a = this.addme(a,olda);
			b = this.addme(b,oldb);
			c = this.addme(c,oldc);
			d = this.addme(d,oldd);
			i += 16;
		}
		return [a,b,c,d];
	}
	,__class__: haxe_crypto_Md5
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	get: function(key) {
		return this.h[key];
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) {
			a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = ["haxe","ds","List"];
haxe_ds_List.prototype = {
	add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,iterator: function() {
		return new haxe_ds__$List_ListIterator(this.h);
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = ["haxe","ds","_List","ListNode"];
haxe_ds__$List_ListNode.prototype = {
	__class__: haxe_ds__$List_ListNode
};
var haxe_ds__$List_ListIterator = function(head) {
	this.head = head;
};
$hxClasses["haxe.ds._List.ListIterator"] = haxe_ds__$List_ListIterator;
haxe_ds__$List_ListIterator.__name__ = ["haxe","ds","_List","ListIterator"];
haxe_ds__$List_ListIterator.prototype = {
	hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: haxe_ds__$List_ListIterator
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.assignId = function(obj) {
	return obj.__id__ = ++haxe_ds_ObjectMap.count;
};
haxe_ds_ObjectMap.getId = function(obj) {
	return obj.__id__;
};
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = ["haxe","ds","_StringMap","StringMapIterator"];
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = ["haxe","io","BytesBuffer"];
haxe_io_BytesBuffer.prototype = {
	addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,add: function(src) {
		if(this.pos + src.length > this.size) {
			this.grow(src.length);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset,src.length);
		this.u8.set(sub,this.pos);
		this.pos += src.length;
	}
	,addInt32: function(v) {
		if(this.pos + 4 > this.size) {
			this.grow(4);
		}
		this.view.setInt32(this.pos,v,true);
		this.pos += 4;
	}
	,addInt64: function(v) {
		if(this.pos + 8 > this.size) {
			this.grow(8);
		}
		this.view.setInt32(this.pos,v.low,true);
		this.view.setInt32(this.pos + 4,v.high,true);
		this.pos += 8;
	}
	,addFloat: function(v) {
		if(this.pos + 4 > this.size) {
			this.grow(4);
		}
		this.view.setFloat32(this.pos,v,true);
		this.pos += 4;
	}
	,addDouble: function(v) {
		if(this.pos + 8 > this.size) {
			this.grow(8);
		}
		this.view.setFloat64(this.pos,v,true);
		this.pos += 8;
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Output = function() { };
$hxClasses["haxe.io.Output"] = haxe_io_Output;
haxe_io_Output.__name__ = ["haxe","io","Output"];
haxe_io_Output.prototype = {
	writeByte: function(c) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,writeUInt16: function(x) {
		if(x < 0 || x >= 65536) {
			throw new js__$Boot_HaxeError(haxe_io_Error.Overflow);
		}
		if(this.bigEndian) {
			this.writeByte(x >> 8);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8);
		}
	}
	,__class__: haxe_io_Output
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
$hxClasses["haxe.io.BytesOutput"] = haxe_io_BytesOutput;
haxe_io_BytesOutput.__name__ = ["haxe","io","BytesOutput"];
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(c) {
		this.b.addByte(c);
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Error = $hxClasses["haxe.io.Error"] = { __ename__ : ["haxe","io","Error"], __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = ["haxe","io","Path"];
haxe_io_Path.prototype = {
	__class__: haxe_io_Path
};
var haxe_rtti_Meta = function() { };
$hxClasses["haxe.rtti.Meta"] = haxe_rtti_Meta;
haxe_rtti_Meta.__name__ = ["haxe","rtti","Meta"];
haxe_rtti_Meta.getType = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.obj == null) {
		return { };
	} else {
		return meta.obj;
	}
};
haxe_rtti_Meta.getMeta = function(t) {
	return t.__meta__;
};
var haxe_xml__$Fast_Fast_$Impl_$ = {};
$hxClasses["haxe.xml._Fast.Fast_Impl_"] = haxe_xml__$Fast_Fast_$Impl_$;
haxe_xml__$Fast_Fast_$Impl_$.__name__ = ["haxe","xml","_Fast","Fast_Impl_"];
haxe_xml__$Fast_Fast_$Impl_$.get_innerHTML = function(this1) {
	var s_b = "";
	if(this1.nodeType != Xml.Document && this1.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this1.nodeType);
	}
	var x = HxOverrides.iter(this1.children);
	while(x.hasNext()) {
		var x1 = x.next();
		s_b += Std.string(haxe_xml_Printer.print(x1));
	}
	return s_b;
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g1 = 0;
	var _g = position;
	while(_g1 < _g) {
		var i = _g1++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = ["haxe","xml","XmlParserException"];
haxe_xml_XmlParserException.prototype = {
	toString: function() {
		return Type.getClassName(js_Boot.getClass(this)) + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = ["haxe","xml","Parser"];
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(c == c) {
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				var tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCharCode(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
					}
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCharCode(c1);
				} else {
					var _this = haxe_xml_Parser.escapes;
					if(!(__map_reserved[s] != null ? _this.existsReserved(s) : _this.h.hasOwnProperty(s))) {
						if(strict) {
							throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
						}
						buf.b += Std.string("&" + s + ";");
					} else {
						var _this1 = haxe_xml_Parser.escapes;
						var x = __map_reserved[s] != null ? _this1.getReserved(s) : _this1.h[s];
						buf.b += Std.string(x);
					}
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCharCode(c),str,p));
				}
				buf.b += "&";
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				start = p--;
				state = escapeNext;
			}
			break;
		}
		c = str.charCodeAt(++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(p != start || nsubs == 0) {
			var len6 = p - start;
			buf.b += len6 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len6);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += "&";
		var len7 = p - start;
		buf.b += len7 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len7);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
$hxClasses["haxe.xml.Printer"] = haxe_xml_Printer;
haxe_xml_Printer.__name__ = ["haxe","xml","Printer"];
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	writeNode: function(value,tabs) {
		var _g = value.nodeType;
		switch(_g) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + value.nodeType);
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + value.nodeType);
				}
				var child = HxOverrides.iter(value.children);
				while(child.hasNext()) {
					var child1 = child.next();
					this.writeNode(child1,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + value.nodeType);
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input1 = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input1);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			}
			var input2 = StringTools.trim(value.nodeValue);
			this.output.b += Std.string(input2);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			var input3 = StringTools.trim(commentContent);
			this.output.b += Std.string(input3);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + value.nodeType);
			}
			var child2 = HxOverrides.iter(value.children);
			while(child2.hasNext()) {
				var child3 = child2.next();
				this.writeNode(child3,tabs);
			}
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + value.nodeType);
		}
		var child = HxOverrides.iter(value.children);
		while(child.hasNext()) {
			var child1 = child.next();
			var _g = child1.nodeType;
			switch(_g) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child1.nodeType == Xml.Document || child1.nodeType == Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, unexpected " + child1.nodeType);
				}
				if(StringTools.ltrim(child1.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var hxbit_ConvertField = function(from,to) {
	this.from = from;
	this.to = to;
};
$hxClasses["hxbit.ConvertField"] = hxbit_ConvertField;
hxbit_ConvertField.__name__ = ["hxbit","ConvertField"];
hxbit_ConvertField.prototype = {
	__class__: hxbit_ConvertField
};
var hxbit_Convert = function(ourSchema,schema) {
	var ourMap = new haxe_ds_StringMap();
	var _g1 = 0;
	var _g = ourSchema.fieldsNames.length;
	while(_g1 < _g) {
		var i = _g1++;
		var key = ourSchema.fieldsNames[i];
		var value = ourSchema.fieldsTypes[i];
		if(__map_reserved[key] != null) {
			ourMap.setReserved(key,value);
		} else {
			ourMap.h[key] = value;
		}
	}
	this.read = [];
	if(ourSchema.isFinal != schema.isFinal) {
		throw new js__$Boot_HaxeError("TODO : handle final flag change");
	}
	var map = new haxe_ds_StringMap();
	var _g11 = 0;
	var _g2 = schema.fieldsNames.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		var oldT = schema.fieldsTypes[i1];
		var key1 = schema.fieldsNames[i1];
		var newT = __map_reserved[key1] != null ? ourMap.getReserved(key1) : ourMap.h[key1];
		var c = new hxbit_ConvertField(oldT,newT);
		if(newT != null) {
			if(hxbit_Convert.sameType(oldT,newT)) {
				c.same = true;
			} else {
				c.defaultValue = hxbit_Convert.getDefault(newT);
			}
		}
		c.index = this.read.length;
		this.read.push(c);
		var key2 = schema.fieldsNames[i1];
		if(__map_reserved[key2] != null) {
			map.setReserved(key2,c);
		} else {
			map.h[key2] = c;
		}
	}
	this.write = [];
	var _g12 = 0;
	var _g3 = ourSchema.fieldsNames.length;
	while(_g12 < _g3) {
		var i2 = _g12++;
		var newT1 = ourSchema.fieldsTypes[i2];
		var key3 = ourSchema.fieldsNames[i2];
		var c1 = __map_reserved[key3] != null ? map.getReserved(key3) : map.h[key3];
		if(c1 == null) {
			c1 = new hxbit_ConvertField(null,newT1);
			c1.defaultValue = hxbit_Convert.getDefault(newT1);
		}
		this.write.push(c1);
	}
};
$hxClasses["hxbit.Convert"] = hxbit_Convert;
hxbit_Convert.__name__ = ["hxbit","Convert"];
hxbit_Convert.sameType = function(a,b) {
	switch(a[1]) {
	case 0:
		switch(b[1]) {
		case 10:
			var b1 = b[2];
			return hxbit_Convert.sameType(a,b1);
		case 16:
			return true;
		default:
			return Type.enumEq(a,b);
		}
		break;
	case 7:
		switch(b[1]) {
		case 7:
			var ak = a[2];
			var av = a[3];
			var bv = b[3];
			var bk = b[2];
			if(hxbit_Convert.sameType(ak,bk)) {
				return hxbit_Convert.sameType(av,bv);
			} else {
				return false;
			}
			break;
		case 10:
			var b2 = b[2];
			return hxbit_Convert.sameType(a,b2);
		default:
			return Type.enumEq(a,b);
		}
		break;
	case 8:
		switch(b[1]) {
		case 8:
			var a1 = a[2];
			var b3 = b[2];
			return hxbit_Convert.sameType(a1,b3);
		case 10:
			var b4 = b[2];
			return hxbit_Convert.sameType(a,b4);
		default:
			return Type.enumEq(a,b);
		}
		break;
	case 9:
		switch(b[1]) {
		case 9:
			var fa = a[2];
			var fb = b[2];
			if(fa.length != fb.length) {
				return false;
			}
			var _g1 = 0;
			var _g = fa.length;
			while(_g1 < _g) {
				var i = _g1++;
				var a2 = fa[i];
				var b5 = fb[i];
				if(a2.name != b5.name || a2.opt != b5.opt || !hxbit_Convert.sameType(a2.type,b5.type)) {
					return false;
				}
			}
			return true;
		case 10:
			var b6 = b[2];
			return hxbit_Convert.sameType(a,b6);
		default:
			return Type.enumEq(a,b);
		}
		break;
	case 10:
		if(b[1] == 10) {
			var a3 = a[2];
			var b7 = b[2];
			return hxbit_Convert.sameType(a3,b7);
		} else {
			var a4 = a[2];
			return hxbit_Convert.sameType(a4,b);
		}
		break;
	case 11:
		switch(b[1]) {
		case 10:
			var b8 = b[2];
			return hxbit_Convert.sameType(a,b8);
		case 11:
			var a5 = a[2];
			var b9 = b[2];
			return hxbit_Convert.sameType(a5,b9);
		default:
			return Type.enumEq(a,b);
		}
		break;
	case 12:
		switch(b[1]) {
		case 10:
			var b10 = b[2];
			return hxbit_Convert.sameType(a,b10);
		case 12:
			var a6 = a[2];
			var b11 = b[2];
			return hxbit_Convert.sameType(a6,b11);
		default:
			return Type.enumEq(a,b);
		}
		break;
	case 16:
		switch(b[1]) {
		case 0:
			return true;
		case 10:
			var b12 = b[2];
			return hxbit_Convert.sameType(a,b12);
		default:
			return Type.enumEq(a,b);
		}
		break;
	default:
		if(b[1] == 10) {
			var b13 = b[2];
			return hxbit_Convert.sameType(a,b13);
		} else {
			return Type.enumEq(a,b);
		}
	}
};
hxbit_Convert.getDefault = function(t) {
	switch(t[1]) {
	case 1:
		return 0.;
	case 2:
		return false;
	case 7:
		var k = t[2];
		switch(k[1]) {
		case 0:
			return new haxe_ds_IntMap();
		case 3:
			return new haxe_ds_StringMap();
		default:
			return new haxe_ds_ObjectMap();
		}
		break;
	case 8:
		return [];
	case 3:case 4:case 5:case 6:case 9:case 12:case 13:case 14:case 17:
		return null;
	case 10:
		var t1 = t[2];
		return hxbit_Convert.getDefault(t1);
	case 11:
		var this1 = new Array(0);
		return this1;
	case 15:
		var this2 = new haxe__$Int64__$_$_$Int64(0,0);
		return this2;
	case 0:case 16:
		return 0;
	}
};
hxbit_Convert.prototype = {
	toString: function() {
		var _g = [];
		var _g2 = 0;
		var _g1 = this.write.length;
		while(_g2 < _g1) {
			var i = _g2++;
			var w = this.write[i];
			_g.push(w.from == null ? "insert:" + Std.string(w.defaultValue) : w.same ? i == w.index ? "s" : "@" + w.index : "@" + w.index + ":" + Std.string(w.to));
		}
		return _g.toString();
	}
	,__class__: hxbit_Convert
};
var hxbit_RpcMode = $hxClasses["hxbit.RpcMode"] = { __ename__ : ["hxbit","RpcMode"], __constructs__ : ["All","Client","Server","Owner"] };
hxbit_RpcMode.All = ["All",0];
hxbit_RpcMode.All.toString = $estr;
hxbit_RpcMode.All.__enum__ = hxbit_RpcMode;
hxbit_RpcMode.Client = ["Client",1];
hxbit_RpcMode.Client.toString = $estr;
hxbit_RpcMode.Client.__enum__ = hxbit_RpcMode;
hxbit_RpcMode.Server = ["Server",2];
hxbit_RpcMode.Server.toString = $estr;
hxbit_RpcMode.Server.__enum__ = hxbit_RpcMode;
hxbit_RpcMode.Owner = ["Owner",3];
hxbit_RpcMode.Owner.toString = $estr;
hxbit_RpcMode.Owner.__enum__ = hxbit_RpcMode;
var hxbit_PropTypeDesc = $hxClasses["hxbit.PropTypeDesc"] = { __ename__ : ["hxbit","PropTypeDesc"], __constructs__ : ["PInt","PFloat","PBool","PString","PBytes","PSerializable","PEnum","PMap","PArray","PObj","PAlias","PVector","PNull","PUnknown","PDynamic","PInt64","PFlags","PStruct"] };
hxbit_PropTypeDesc.PInt = ["PInt",0];
hxbit_PropTypeDesc.PInt.toString = $estr;
hxbit_PropTypeDesc.PInt.__enum__ = hxbit_PropTypeDesc;
hxbit_PropTypeDesc.PFloat = ["PFloat",1];
hxbit_PropTypeDesc.PFloat.toString = $estr;
hxbit_PropTypeDesc.PFloat.__enum__ = hxbit_PropTypeDesc;
hxbit_PropTypeDesc.PBool = ["PBool",2];
hxbit_PropTypeDesc.PBool.toString = $estr;
hxbit_PropTypeDesc.PBool.__enum__ = hxbit_PropTypeDesc;
hxbit_PropTypeDesc.PString = ["PString",3];
hxbit_PropTypeDesc.PString.toString = $estr;
hxbit_PropTypeDesc.PString.__enum__ = hxbit_PropTypeDesc;
hxbit_PropTypeDesc.PBytes = ["PBytes",4];
hxbit_PropTypeDesc.PBytes.toString = $estr;
hxbit_PropTypeDesc.PBytes.__enum__ = hxbit_PropTypeDesc;
hxbit_PropTypeDesc.PSerializable = function(name) { var $x = ["PSerializable",5,name]; $x.__enum__ = hxbit_PropTypeDesc; $x.toString = $estr; return $x; };
hxbit_PropTypeDesc.PEnum = function(name) { var $x = ["PEnum",6,name]; $x.__enum__ = hxbit_PropTypeDesc; $x.toString = $estr; return $x; };
hxbit_PropTypeDesc.PMap = function(k,v) { var $x = ["PMap",7,k,v]; $x.__enum__ = hxbit_PropTypeDesc; $x.toString = $estr; return $x; };
hxbit_PropTypeDesc.PArray = function(k) { var $x = ["PArray",8,k]; $x.__enum__ = hxbit_PropTypeDesc; $x.toString = $estr; return $x; };
hxbit_PropTypeDesc.PObj = function(fields) { var $x = ["PObj",9,fields]; $x.__enum__ = hxbit_PropTypeDesc; $x.toString = $estr; return $x; };
hxbit_PropTypeDesc.PAlias = function(k) { var $x = ["PAlias",10,k]; $x.__enum__ = hxbit_PropTypeDesc; $x.toString = $estr; return $x; };
hxbit_PropTypeDesc.PVector = function(k) { var $x = ["PVector",11,k]; $x.__enum__ = hxbit_PropTypeDesc; $x.toString = $estr; return $x; };
hxbit_PropTypeDesc.PNull = function(t) { var $x = ["PNull",12,t]; $x.__enum__ = hxbit_PropTypeDesc; $x.toString = $estr; return $x; };
hxbit_PropTypeDesc.PUnknown = ["PUnknown",13];
hxbit_PropTypeDesc.PUnknown.toString = $estr;
hxbit_PropTypeDesc.PUnknown.__enum__ = hxbit_PropTypeDesc;
hxbit_PropTypeDesc.PDynamic = ["PDynamic",14];
hxbit_PropTypeDesc.PDynamic.toString = $estr;
hxbit_PropTypeDesc.PDynamic.__enum__ = hxbit_PropTypeDesc;
hxbit_PropTypeDesc.PInt64 = ["PInt64",15];
hxbit_PropTypeDesc.PInt64.toString = $estr;
hxbit_PropTypeDesc.PInt64.__enum__ = hxbit_PropTypeDesc;
hxbit_PropTypeDesc.PFlags = function(t) { var $x = ["PFlags",16,t]; $x.__enum__ = hxbit_PropTypeDesc; $x.toString = $estr; return $x; };
hxbit_PropTypeDesc.PStruct = ["PStruct",17];
hxbit_PropTypeDesc.PStruct.toString = $estr;
hxbit_PropTypeDesc.PStruct.__enum__ = hxbit_PropTypeDesc;
var hxbit_Macros = function() { };
$hxClasses["hxbit.Macros"] = hxbit_Macros;
hxbit_Macros.__name__ = ["hxbit","Macros"];
var hxbit_Serializable = function() { };
$hxClasses["hxbit.Serializable"] = hxbit_Serializable;
hxbit_Serializable.__name__ = ["hxbit","Serializable"];
hxbit_Serializable.prototype = {
	__class__: hxbit_Serializable
};
var hxbit_Serializer = function() {
	this.usedClasses = [];
	if(hxbit_Serializer.CLIDS == null) {
		hxbit_Serializer.initClassIDS();
	}
};
$hxClasses["hxbit.Serializer"] = hxbit_Serializer;
hxbit_Serializer.__name__ = ["hxbit","Serializer"];
hxbit_Serializer.resetCounters = function() {
	hxbit_Serializer.UID = 0;
	hxbit_Serializer.SEQ = 0;
};
hxbit_Serializer.allocUID = function() {
	return hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
};
hxbit_Serializer.registerClass = function(c) {
	if(hxbit_Serializer.CLIDS != null) {
		throw new js__$Boot_HaxeError("Too late to register class");
	}
	var idx = hxbit_Serializer.CLASSES.length;
	hxbit_Serializer.CLASSES.push(c);
	return idx;
};
hxbit_Serializer.hash = function(name) {
	var v = 1;
	var _g1 = 0;
	var _g = name.length;
	while(_g1 < _g) {
		var i = _g1++;
		v = v * 223 + name.charCodeAt(i) | 0;
	}
	v = 1 + (v & 1073741823) % 65423;
	return v;
};
hxbit_Serializer.initClassIDS = function() {
	var cl = hxbit_Serializer.CLASSES;
	var _g = [];
	var _g1 = 0;
	while(_g1 < cl.length) {
		var c = cl[_g1];
		++_g1;
		_g.push([]);
	}
	var subClasses = _g;
	var isSub = [];
	var _g2 = 0;
	var _g11 = cl.length;
	while(_g2 < _g11) {
		var i = _g2++;
		var c1 = cl[i];
		while(true) {
			c1 = c1.__super__;
			if(c1 == null) {
				break;
			}
			var idx = cl.indexOf(c1);
			if(idx < 0) {
				break;
			}
			subClasses[idx].push(i);
			isSub[i] = true;
		}
	}
	var _g12 = [];
	var _g3 = 0;
	var _g21 = hxbit_Serializer.CLASSES.length;
	while(_g3 < _g21) {
		var i1 = _g3++;
		var tmp;
		if(subClasses[i1].length == 0 && !isSub[i1]) {
			tmp = 0;
		} else {
			var name = Type.getClassName(cl[i1]);
			var v = 1;
			var _g13 = 0;
			var _g4 = name.length;
			while(_g13 < _g4) {
				var i2 = _g13++;
				v = v * 223 + name.charCodeAt(i2) | 0;
			}
			v = 1 + (v & 1073741823) % 65423;
			tmp = v;
		}
		_g12.push(tmp);
	}
	hxbit_Serializer.CLIDS = _g12;
	hxbit_Serializer.CL_BYID = [];
	var _g31 = 0;
	var _g22 = hxbit_Serializer.CLIDS.length;
	while(_g31 < _g22) {
		var i3 = _g31++;
		var cid = hxbit_Serializer.CLIDS[i3];
		if(cid == 0) {
			continue;
		}
		if(hxbit_Serializer.CL_BYID[cid] != null) {
			throw new js__$Boot_HaxeError("Conflicting CLID between " + Type.getClassName(hxbit_Serializer.CL_BYID[cid]) + " and " + Type.getClassName(cl[i3]));
		}
		hxbit_Serializer.CL_BYID[cid] = cl[i3];
	}
};
hxbit_Serializer.isClassFinal = function(index) {
	return hxbit_Serializer.CLIDS[index] == 0;
};
hxbit_Serializer.prototype = {
	set_remapIds: function(b) {
		this.remapObjs = b ? new haxe_ds_ObjectMap() : null;
		return b;
	}
	,get_remapIds: function() {
		return this.remapObjs != null;
	}
	,remap: function(s) {
		if(this.remapObjs.h.__keys__[s.__id__] != null) {
			return;
		}
		this.remapObjs.set(s,s.__uid);
		s.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	}
	,begin: function() {
		this.out = new haxe_io_BytesBuffer();
		this.refs = new haxe_ds_IntMap();
		this.knownStructs = [];
	}
	,end: function() {
		var bytes = this.out.getBytes();
		this.out = null;
		this.refs = null;
		this.knownStructs = null;
		return bytes;
	}
	,setInput: function(data,pos) {
		this.input = data;
		this.inPos = pos;
		if(this.refs == null) {
			this.refs = new haxe_ds_IntMap();
		}
		if(this.knownStructs == null) {
			this.knownStructs = [];
		}
	}
	,serialize: function(s) {
		this.begin();
		this.addKnownRef(s);
		return this.out.getBytes();
	}
	,unserialize: function(data,c,startPos) {
		if(startPos == null) {
			startPos = 0;
		}
		this.refs = new haxe_ds_IntMap();
		this.knownStructs = [];
		this.setInput(data,startPos);
		return this.getRef(c,c.__clid);
	}
	,getByte: function() {
		return this.input.b[this.inPos++];
	}
	,addByte: function(v) {
		this.out.addByte(v);
	}
	,addInt: function(v) {
		if(v >= 0 && v < 128) {
			this.out.addByte(v);
		} else {
			this.out.addByte(128);
			this.out.addInt32(v);
		}
	}
	,addInt32: function(v) {
		this.out.addInt32(v);
	}
	,addInt64: function(v) {
		this.out.addInt64(v);
	}
	,addFloat: function(v) {
		this.out.addFloat(v);
	}
	,addDouble: function(v) {
		this.out.addDouble(v);
	}
	,addBool: function(v) {
		this.out.addByte(v ? 1 : 0);
	}
	,addArray: function(a,f) {
		if(a == null) {
			this.out.addByte(0);
			return;
		}
		var v = a.length + 1;
		if(v >= 0 && v < 128) {
			this.out.addByte(v);
		} else {
			this.out.addByte(128);
			this.out.addInt32(v);
		}
		var _g = 0;
		while(_g < a.length) {
			var v1 = a[_g];
			++_g;
			f(v1);
		}
	}
	,addVector: function(a,f) {
		if(a == null) {
			this.out.addByte(0);
			return;
		}
		var v = a.length + 1;
		if(v >= 0 && v < 128) {
			this.out.addByte(v);
		} else {
			this.out.addByte(128);
			this.out.addInt32(v);
		}
		var _g = 0;
		while(_g < a.length) {
			var v1 = a[_g];
			++_g;
			f(v1);
		}
	}
	,getArray: function(f) {
		var v = this.input.b[this.inPos++];
		if(v == 128) {
			v = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		var len = v;
		if(len == 0) {
			return null;
		}
		--len;
		var a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			a[i] = f();
		}
		return a;
	}
	,getVector: function(f) {
		var v = this.input.b[this.inPos++];
		if(v == 128) {
			v = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		var len = v;
		if(len == 0) {
			return null;
		}
		--len;
		var this1 = new Array(len);
		var a = this1;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			a[i] = f();
		}
		return a;
	}
	,addMap: function(a,fk,ft) {
		if(a == null) {
			this.out.addByte(0);
			return;
		}
		var _e = a;
		var keys = Lambda.array({ iterator : function() {
			return _e.keys();
		}});
		var v = keys.length + 1;
		if(v >= 0 && v < 128) {
			this.out.addByte(v);
		} else {
			this.out.addByte(128);
			this.out.addInt32(v);
		}
		var _g = 0;
		while(_g < keys.length) {
			var k = keys[_g];
			++_g;
			fk(k);
			ft(a.get(k));
		}
	}
	,getBool: function() {
		return this.input.b[this.inPos++] != 0;
	}
	,getInt: function() {
		var v = this.input.b[this.inPos++];
		if(v == 128) {
			v = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		return v;
	}
	,skip: function(size) {
		this.inPos += size;
	}
	,getInt32: function() {
		var v = this.input.getInt32(this.inPos);
		this.inPos += 4;
		return v;
	}
	,getInt64: function() {
		var v = this.input.getInt64(this.inPos);
		this.inPos += 8;
		return v;
	}
	,getDouble: function() {
		var v = this.input.getDouble(this.inPos);
		this.inPos += 8;
		return v;
	}
	,getFloat: function() {
		var v = this.input.getFloat(this.inPos);
		this.inPos += 4;
		return v;
	}
	,addString: function(s) {
		if(s == null) {
			this.out.addByte(0);
		} else {
			var b = haxe_io_Bytes.ofString(s);
			var v = b.length + 1;
			if(v >= 0 && v < 128) {
				this.out.addByte(v);
			} else {
				this.out.addByte(128);
				this.out.addInt32(v);
			}
			this.out.add(b);
		}
	}
	,addBytes: function(b) {
		if(b == null) {
			this.out.addByte(0);
		} else {
			var v = b.length + 1;
			if(v >= 0 && v < 128) {
				this.out.addByte(v);
			} else {
				this.out.addByte(128);
				this.out.addInt32(v);
			}
			this.out.add(b);
		}
	}
	,addBytesSub: function(b,pos,len) {
		if(b == null) {
			this.out.addByte(0);
		} else {
			var v = len + 1;
			if(v >= 0 && v < 128) {
				this.out.addByte(v);
			} else {
				this.out.addByte(128);
				this.out.addInt32(v);
			}
			this.out.addBytes(b,pos,len);
		}
	}
	,getString: function() {
		var v = this.input.b[this.inPos++];
		if(v == 128) {
			v = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		var len = v;
		if(len == 0) {
			return null;
		}
		--len;
		var s = this.input.getString(this.inPos,len);
		this.inPos += len;
		return s;
	}
	,getBytes: function() {
		var v = this.input.b[this.inPos++];
		if(v == 128) {
			v = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		var len = v;
		if(len == 0) {
			return null;
		}
		--len;
		var s = this.input.sub(this.inPos,len);
		this.inPos += len;
		return s;
	}
	,getDynamic: function() {
		var _g = this.input.b[this.inPos++];
		switch(_g) {
		case 0:
			return null;
		case 1:
			return false;
		case 2:
			return true;
		case 3:
			var v = this.input.b[this.inPos++];
			if(v == 128) {
				v = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			return v;
		case 4:
			var v1 = this.input.getFloat(this.inPos);
			this.inPos += 4;
			return v1;
		case 5:
			var o = { };
			var _g1 = 0;
			var v2 = this.input.b[this.inPos++];
			if(v2 == 128) {
				v2 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var _g2 = v2;
			while(_g1 < _g2) {
				var i = _g1++;
				var v3 = this.input.b[this.inPos++];
				if(v3 == 128) {
					v3 = this.input.getInt32(this.inPos);
					this.inPos += 4;
				}
				var len = v3;
				var field;
				if(len == 0) {
					field = null;
				} else {
					--len;
					var s = this.input.getString(this.inPos,len);
					this.inPos += len;
					field = s;
				}
				o[field] = this.getDynamic();
			}
			return o;
		case 6:
			var v4 = this.input.b[this.inPos++];
			if(v4 == 128) {
				v4 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var len1 = v4;
			if(len1 == 0) {
				return null;
			} else {
				--len1;
				var s1 = this.input.getString(this.inPos,len1);
				this.inPos += len1;
				return s1;
			}
			break;
		case 7:
			var _g3 = [];
			var _g21 = 0;
			var v5 = this.input.b[this.inPos++];
			if(v5 == 128) {
				v5 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var _g11 = v5;
			while(_g21 < _g11) {
				var i1 = _g21++;
				_g3.push(this.getDynamic());
			}
			return _g3;
		case 8:
			var v6 = this.input.b[this.inPos++];
			if(v6 == 128) {
				v6 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var len2 = v6;
			if(len2 == 0) {
				return null;
			} else {
				--len2;
				var s2 = this.input.sub(this.inPos,len2);
				this.inPos += len2;
				return s2;
			}
			break;
		default:
			var x = _g;
			throw new js__$Boot_HaxeError("Invalid dynamic prefix " + x);
		}
	}
	,addDynamic: function(v) {
		if(v == null) {
			this.out.addByte(0);
			return;
		}
		var _g = Type["typeof"](v);
		switch(_g[1]) {
		case 1:
			this.out.addByte(3);
			var v1 = v;
			if(v1 >= 0 && v1 < 128) {
				this.out.addByte(v1);
			} else {
				this.out.addByte(128);
				this.out.addInt32(v1);
			}
			break;
		case 2:
			this.out.addByte(4);
			this.out.addFloat(v);
			break;
		case 3:
			this.out.addByte(v ? 2 : 1);
			break;
		case 4:
			var fields = Reflect.fields(v);
			this.out.addByte(5);
			var v2 = fields.length;
			if(v2 >= 0 && v2 < 128) {
				this.out.addByte(v2);
			} else {
				this.out.addByte(128);
				this.out.addInt32(v2);
			}
			var _g1 = 0;
			while(_g1 < fields.length) {
				var f = fields[_g1];
				++_g1;
				if(f == null) {
					this.out.addByte(0);
				} else {
					var b = haxe_io_Bytes.ofString(f);
					var v3 = b.length + 1;
					if(v3 >= 0 && v3 < 128) {
						this.out.addByte(v3);
					} else {
						this.out.addByte(128);
						this.out.addInt32(v3);
					}
					this.out.add(b);
				}
				this.addDynamic(Reflect.field(v,f));
			}
			break;
		case 6:
			var c = _g[2];
			switch(c) {
			case Array:
				this.out.addByte(7);
				var a = v;
				var v4 = a.length;
				if(v4 >= 0 && v4 < 128) {
					this.out.addByte(v4);
				} else {
					this.out.addByte(128);
					this.out.addInt32(v4);
				}
				var _g2 = 0;
				while(_g2 < a.length) {
					var v5 = a[_g2];
					++_g2;
					this.addDynamic(v5);
				}
				break;
			case String:
				this.out.addByte(6);
				var s = v;
				if(s == null) {
					this.out.addByte(0);
				} else {
					var b1 = haxe_io_Bytes.ofString(s);
					var v6 = b1.length + 1;
					if(v6 >= 0 && v6 < 128) {
						this.out.addByte(v6);
					} else {
						this.out.addByte(128);
						this.out.addInt32(v6);
					}
					this.out.add(b1);
				}
				break;
			case haxe_io_Bytes:
				this.out.addByte(8);
				var b2 = v;
				if(b2 == null) {
					this.out.addByte(0);
				} else {
					var v7 = b2.length + 1;
					if(v7 >= 0 && v7 < 128) {
						this.out.addByte(v7);
					} else {
						this.out.addByte(128);
						this.out.addInt32(v7);
					}
					this.out.add(b2);
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Unsupported dynamic " + Std.string(c));
			}
			break;
		default:
			var t = _g;
			throw new js__$Boot_HaxeError("Unsupported dynamic " + Std.string(t));
		}
	}
	,addCLID: function(clid) {
		this.out.addByte(clid >> 8);
		this.out.addByte(clid & 255);
	}
	,getCLID: function() {
		return this.input.b[this.inPos++] << 8 | this.input.b[this.inPos++];
	}
	,addStruct: function(s) {
		if(s == null) {
			this.out.addByte(0);
			return;
		}
		var c = js_Boot.__instanceof(s,hxbit_Serializable) ? s : null;
		if(c != null) {
			this.out.addByte(1);
			this.addAnyRef(c);
			return;
		}
		var index = this.knownStructs.indexOf(s);
		if(index >= 0) {
			this.out.addByte(2);
			if(index >= 0 && index < 128) {
				this.out.addByte(index);
			} else {
				this.out.addByte(128);
				this.out.addInt32(index);
			}
			return;
		}
		this.knownStructs.push(s);
		this.out.addByte(3);
		var c1 = s == null ? null : js_Boot.getClass(s);
		if(c1 == null) {
			throw new js__$Boot_HaxeError(Std.string(s) + " does not have a class ?");
		}
		var s1 = Type.getClassName(c1);
		if(s1 == null) {
			this.out.addByte(0);
		} else {
			var b = haxe_io_Bytes.ofString(s1);
			var v = b.length + 1;
			if(v >= 0 && v < 128) {
				this.out.addByte(v);
			} else {
				this.out.addByte(128);
				this.out.addInt32(v);
			}
			this.out.add(b);
		}
		s.customSerialize(this);
		this.out.addByte(255);
	}
	,getStruct: function() {
		var _g = this.input.b[this.inPos++];
		switch(_g) {
		case 0:
			return null;
		case 1:
			return this.getAnyRef();
		case 2:
			var tmp = this.knownStructs;
			var v = this.input.b[this.inPos++];
			if(v == 128) {
				v = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			return tmp[v];
		case 3:
			var v1 = this.input.b[this.inPos++];
			if(v1 == 128) {
				v1 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var len = v1;
			var cname;
			if(len == 0) {
				cname = null;
			} else {
				--len;
				var s = this.input.getString(this.inPos,len);
				this.inPos += len;
				cname = s;
			}
			var cl = Type.resolveClass(cname);
			if(cl == null) {
				throw new js__$Boot_HaxeError("Missing struct class " + cname);
			}
			var s1 = Object.create(cl.prototype);
			this.knownStructs.push(s1);
			s1.customUnserialize(this);
			if(this.input.b[this.inPos++] != 255) {
				throw new js__$Boot_HaxeError("Invalid customUnserialize for " + Std.string(s1));
			}
			return s1;
		default:
			throw new js__$Boot_HaxeError("assert");
		}
	}
	,addObjRef: function(s) {
		var v = s.__uid;
		if(v >= 0 && v < 128) {
			this.out.addByte(v);
		} else {
			this.out.addByte(128);
			this.out.addInt32(v);
		}
	}
	,getObjRef: function() {
		var v = this.input.b[this.inPos++];
		if(v == 128) {
			v = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		return v;
	}
	,addAnyRef: function(s) {
		if(s == null) {
			this.out.addByte(0);
			return;
		}
		if(this.remapObjs != null) {
			this.remap(s);
		}
		this.addObjRef(s);
		if(this.refs.h[s.__uid] != null) {
			return;
		}
		this.refs.h[s.__uid] = s;
		var index = s.getCLID();
		this.usedClasses[index] = true;
		this.out.addByte(index >> 8);
		this.out.addByte(index & 255);
		s.serialize(this);
	}
	,addKnownRef: function(s) {
		if(s == null) {
			this.out.addByte(0);
			return;
		}
		if(this.remapObjs != null) {
			this.remap(s);
		}
		this.addObjRef(s);
		if(this.refs.h[s.__uid] != null) {
			return;
		}
		this.refs.h[s.__uid] = s;
		var index = s.getCLID();
		this.usedClasses[index] = true;
		var clid = hxbit_Serializer.CLIDS[index];
		if(clid != 0) {
			this.out.addByte(clid >> 8);
			this.out.addByte(clid & 255);
		}
		s.serialize(this);
	}
	,getAnyRef: function() {
		var id = this.getObjRef();
		if(id == 0) {
			return null;
		}
		if(this.refs.h[id] != null) {
			return this.refs.h[id];
		}
		var rid = id & 16777215;
		if(hxbit_Serializer.UID < rid) {
			hxbit_Serializer.UID = rid;
		}
		var clidx = this.input.b[this.inPos++] << 8 | this.input.b[this.inPos++];
		if(this.mapIndexes != null) {
			clidx = this.mapIndexes[clidx];
		}
		var i = Object.create(hxbit_Serializer.CLASSES[clidx].prototype);
		if(this.newObjects != null) {
			this.newObjects.push(i);
		}
		i.__uid = id;
		i.unserializeInit();
		this.refs.h[id] = i;
		if(this.convert != null && this.convert[clidx] != null) {
			this.convertRef(i,this.convert[clidx]);
		} else {
			i.unserialize(this);
		}
		return i;
	}
	,getRef: function(c,clidx) {
		var id = this.getObjRef();
		if(id == 0) {
			return null;
		}
		if(this.refs.h[id] != null) {
			return this.refs.h[id];
		}
		var rid = id & 16777215;
		if(hxbit_Serializer.UID < rid) {
			hxbit_Serializer.UID = rid;
		}
		if(hxbit_Serializer.CLIDS[clidx] != 0) {
			var realIdx = this.input.b[this.inPos++] << 8 | this.input.b[this.inPos++];
			c = hxbit_Serializer.CL_BYID[realIdx];
			if(this.convert != null) {
				clidx = c.__clid;
			}
		}
		var i = Object.create(c.prototype);
		if(this.newObjects != null) {
			this.newObjects.push(i);
		}
		i.__uid = id;
		i.unserializeInit();
		this.refs.h[id] = i;
		if(this.convert != null && this.convert[clidx] != null) {
			this.convertRef(i,this.convert[clidx]);
		} else {
			i.unserialize(this);
		}
		return i;
	}
	,getKnownRef: function(c) {
		return this.getRef(c,c.__clid);
	}
	,beginSave: function() {
		this.begin();
		this.usedClasses = [];
	}
	,endSave: function(savePosition) {
		if(savePosition == null) {
			savePosition = 0;
		}
		var content = this.end();
		this.begin();
		var classes = [];
		var schemas = [];
		var sidx = hxbit_Serializer.CLASSES.indexOf(hxbit_Schema);
		var _g1 = 0;
		var _g = this.usedClasses.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(!this.usedClasses[i] || i == sidx) {
				continue;
			}
			var c = hxbit_Serializer.CLASSES[i];
			var schema = Object.create(c.prototype).getSerializeSchema();
			schemas.push(schema);
			classes.push(i);
			this.addKnownRef(schema);
			this.refs.remove(schema.__uid);
		}
		var schemaData = this.end();
		this.begin();
		this.out.addBytes(content,0,savePosition);
		var b = haxe_io_Bytes.ofString("HXS");
		var v = b.length + 1;
		if(v >= 0 && v < 128) {
			this.out.addByte(v);
		} else {
			this.out.addByte(128);
			this.out.addInt32(v);
		}
		this.out.add(b);
		this.out.addByte(1);
		var _g11 = 0;
		var _g2 = classes.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var index = classes[i1];
			var s = Type.getClassName(hxbit_Serializer.CLASSES[index]);
			if(s == null) {
				this.out.addByte(0);
			} else {
				var b1 = haxe_io_Bytes.ofString(s);
				var v1 = b1.length + 1;
				if(v1 >= 0 && v1 < 128) {
					this.out.addByte(v1);
				} else {
					this.out.addByte(128);
					this.out.addInt32(v1);
				}
				this.out.add(b1);
			}
			this.out.addByte(index >> 8);
			this.out.addByte(index & 255);
			var v2 = schemas[i1].get_checkSum();
			this.out.addInt32(v2);
		}
		this.out.addByte(0);
		var v3 = schemaData.length;
		if(v3 >= 0 && v3 < 128) {
			this.out.addByte(v3);
		} else {
			this.out.addByte(128);
			this.out.addInt32(v3);
		}
		this.out.add(schemaData);
		this.out.addBytes(content,savePosition,content.length - savePosition);
		return this.end();
	}
	,beginLoad: function(bytes,position) {
		if(position == null) {
			position = 0;
		}
		this.setInput(bytes,position);
		var classByName = new haxe_ds_StringMap();
		var schemas = [];
		var mapIndexes = [];
		var indexes = [];
		var needConvert = false;
		var needReindex = false;
		var _g1 = 0;
		var _g = hxbit_Serializer.CLASSES.length;
		while(_g1 < _g) {
			var i = _g1++;
			var key = Type.getClassName(hxbit_Serializer.CLASSES[i]);
			if(__map_reserved[key] != null) {
				classByName.setReserved(key,i);
			} else {
				classByName.h[key] = i;
			}
			mapIndexes[i] = i;
		}
		var v = this.input.b[this.inPos++];
		if(v == 128) {
			v = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		var len = v;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			--len;
			var s = this.input.getString(this.inPos,len);
			this.inPos += len;
			tmp = s;
		}
		if(tmp != "HXS") {
			throw new js__$Boot_HaxeError("Invalid HXS data");
		}
		var version = this.input.b[this.inPos++];
		if(version != 1) {
			throw new js__$Boot_HaxeError("Unsupported HXS version " + version);
		}
		while(true) {
			var v1 = this.input.b[this.inPos++];
			if(v1 == 128) {
				v1 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var len1 = v1;
			var clname;
			if(len1 == 0) {
				clname = null;
			} else {
				--len1;
				var s1 = this.input.getString(this.inPos,len1);
				this.inPos += len1;
				clname = s1;
			}
			if(clname == null) {
				break;
			}
			var index = this.input.b[this.inPos++] << 8 | this.input.b[this.inPos++];
			var v2 = this.input.getInt32(this.inPos);
			this.inPos += 4;
			var crc = v2;
			var ourClassIndex = __map_reserved[clname] != null ? classByName.getReserved(clname) : classByName.h[clname];
			if(ourClassIndex == null) {
				throw new js__$Boot_HaxeError("Missing class " + clname + " found in HXS data");
			}
			var ourSchema = Object.create(hxbit_Serializer.CLASSES[ourClassIndex].prototype).getSerializeSchema();
			if(ourSchema.get_checkSum() != crc) {
				needConvert = true;
				schemas[index] = ourSchema;
			}
			if(index != ourClassIndex) {
				needReindex = true;
				mapIndexes[index] = ourClassIndex;
			}
			indexes.push(index);
		}
		var v3 = this.input.b[this.inPos++];
		if(v3 == 128) {
			v3 = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		var schemaDataSize = v3;
		if(needConvert) {
			this.convert = [];
			var _g2 = 0;
			while(_g2 < indexes.length) {
				var index1 = indexes[_g2];
				++_g2;
				var ourSchema1 = schemas[index1];
				var c = hxbit_Schema;
				var schema = this.getRef(c,c.__clid);
				this.refs.remove(schema.__uid);
				if(ourSchema1 != null) {
					this.convert[mapIndexes[index1]] = new hxbit_Convert(ourSchema1,schema);
				}
			}
		} else {
			this.inPos += schemaDataSize;
		}
		if(needReindex) {
			this.mapIndexes = mapIndexes;
		}
	}
	,endLoad: function() {
		this.convert = null;
		this.mapIndexes = null;
		this.setInput(null,0);
	}
	,convertRef: function(i,c) {
		var this1 = new Array(c.read.length);
		var values = this1;
		var writePos = 0;
		var _g = 0;
		var _g1 = c.read;
		while(_g < _g1.length) {
			var r = _g1[_g];
			++_g;
			values[r.index] = this.readValue(r.from);
		}
		var oldOut = this.out;
		this.out = new haxe_io_BytesBuffer();
		var _g2 = 0;
		var _g11 = c.write;
		while(_g2 < _g11.length) {
			var w = _g11[_g2];
			++_g2;
			var v;
			if(w.from == null) {
				v = w.defaultValue;
			} else {
				v = values[w.index];
				if(!w.same) {
					if(v == null) {
						v = w.defaultValue;
					} else {
						v = this.convertValue(v,w.from,w.to);
					}
				}
			}
			this.writeValue(v,w.to);
		}
		var bytes = this.out.getBytes();
		this.out = oldOut;
		var oldIn = this.input;
		var oldPos = this.inPos;
		this.setInput(bytes,0);
		i.unserialize(this);
		this.setInput(oldIn,oldPos);
	}
	,isNullable: function(t) {
		switch(t[1]) {
		case 0:case 1:case 2:
			return false;
		default:
			return true;
		}
	}
	,convertValue: function(v,from,to) {
		if(v == null && this.isNullable(to)) {
			return null;
		}
		if(hxbit_Convert.sameType(from,to)) {
			return v;
		}
		if(from[1] == 9) {
			if(to[1] == 9) {
				var obj1 = from[2];
				var obj2 = to[2];
				var v2 = { };
				var _g = 0;
				while(_g < obj2.length) {
					var f = obj2[_g];
					++_g;
					var found = false;
					var field = null;
					var _g1 = 0;
					while(_g1 < obj1.length) {
						var f2 = obj1[_g1];
						++_g1;
						if(f2.name == f.name) {
							found = true;
							field = this.convertValue(Reflect.field(v,f2.name),f2.type,f.type);
							break;
						}
					}
					if(!found) {
						if(f.opt) {
							continue;
						}
						field = hxbit_Convert.getDefault(f.type);
					} else if(field == null && f.opt) {
						continue;
					}
					v2[f.name] = field;
				}
				return v2;
			}
		}
		throw new js__$Boot_HaxeError("Cannot convert " + Std.string(v) + " from " + Std.string(from) + " to " + Std.string(to));
	}
	,readValue: function(t) {
		var _gthis = this;
		switch(t[1]) {
		case 0:
			var v = this.input.b[this.inPos++];
			if(v == 128) {
				v = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			return v;
		case 1:
			var v1 = this.input.getFloat(this.inPos);
			this.inPos += 4;
			return v1;
		case 2:
			return this.input.b[this.inPos++] != 0;
		case 3:
			var v2 = this.input.b[this.inPos++];
			if(v2 == 128) {
				v2 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var len = v2;
			if(len == 0) {
				return null;
			} else {
				--len;
				var s = this.input.getString(this.inPos,len);
				this.inPos += len;
				return s;
			}
			break;
		case 4:
			var v3 = this.input.b[this.inPos++];
			if(v3 == 128) {
				v3 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var len1 = v3;
			if(len1 == 0) {
				return null;
			} else {
				--len1;
				var s1 = this.input.sub(this.inPos,len1);
				this.inPos += len1;
				return s1;
			}
			break;
		case 5:
			var name = t[2];
			return this.getKnownRef(Type.resolveClass(name));
		case 6:
			var name1 = t[2];
			var ser = Type.resolveClass("hxbit.enumSer." + name1.split(".").join("_"));
			if(ser == null) {
				var e = Type.resolveEnum(name1);
				var tmp;
				if(e != null) {
					var o = haxe_rtti_Meta.getType(e);
					tmp = Object.prototype.hasOwnProperty.call(o,"skipSerialize");
				} else {
					tmp = false;
				}
				if(tmp) {
					var v4 = this.input.b[this.inPos++];
					if(v4 == 128) {
						v4 = this.input.getInt32(this.inPos);
						this.inPos += 4;
					}
					return null;
				}
				throw new js__$Boot_HaxeError("No enum unserializer found for " + name1);
			}
			return ser.doUnserialize(this);
		case 7:
			var v5 = t[3];
			var k = t[2];
			switch(k[1]) {
			case 0:
				var v6 = this.input.b[this.inPos++];
				if(v6 == 128) {
					v6 = this.input.getInt32(this.inPos);
					this.inPos += 4;
				}
				var len2 = v6;
				var tmp1;
				if(len2 == 0) {
					tmp1 = null;
				} else {
					var m = new haxe_ds_IntMap();
					while(--len2 > 0) {
						var k1 = _gthis.readValue(k);
						var v7 = _gthis.readValue(v5);
						m.h[k1] = v7;
					}
					tmp1 = m;
				}
				return tmp1;
			case 3:
				var v8 = this.input.b[this.inPos++];
				if(v8 == 128) {
					v8 = this.input.getInt32(this.inPos);
					this.inPos += 4;
				}
				var len3 = v8;
				var tmp2;
				if(len3 == 0) {
					tmp2 = null;
				} else {
					var m1 = new haxe_ds_StringMap();
					while(--len3 > 0) {
						var k2 = _gthis.readValue(k);
						var v9 = _gthis.readValue(v5);
						if(__map_reserved[k2] != null) {
							m1.setReserved(k2,v9);
						} else {
							m1.h[k2] = v9;
						}
					}
					tmp2 = m1;
				}
				return tmp2;
			default:
				var v10 = this.input.b[this.inPos++];
				if(v10 == 128) {
					v10 = this.input.getInt32(this.inPos);
					this.inPos += 4;
				}
				var len4 = v10;
				var tmp3;
				if(len4 == 0) {
					tmp3 = null;
				} else {
					var m2 = new haxe_ds_ObjectMap();
					while(--len4 > 0) {
						var k3 = _gthis.readValue(k);
						var v11 = _gthis.readValue(v5);
						m2.set(k3,v11);
					}
					tmp3 = m2;
				}
				return tmp3;
			}
			break;
		case 8:
			var t1 = t[2];
			var v12 = this.input.b[this.inPos++];
			if(v12 == 128) {
				v12 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var len5 = v12;
			if(len5 == 0) {
				return null;
			} else {
				--len5;
				var a = [];
				var _g1 = 0;
				var _g = len5;
				while(_g1 < _g) {
					var i = _g1++;
					a[i] = _gthis.readValue(t1);
				}
				return a;
			}
			break;
		case 9:
			var fields = t[2];
			var v13 = this.input.b[this.inPos++];
			if(v13 == 128) {
				v13 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var bits = v13;
			if(bits == 0) {
				return null;
			}
			var o1 = { };
			--bits;
			var _g2 = [];
			var _g11 = 0;
			while(_g11 < fields.length) {
				var f = fields[_g11];
				++_g11;
				if(this.isNullable(f.type)) {
					_g2.push(f);
				}
			}
			var nullables = _g2;
			var _g12 = 0;
			while(_g12 < fields.length) {
				var f1 = fields[_g12];
				++_g12;
				var nidx = nullables.indexOf(f1);
				if(nidx >= 0 && (bits & 1 << nidx) == 0) {
					continue;
				}
				o1[f1.name] = this.readValue(f1.type);
			}
			return o1;
		case 10:
			var t2 = t[2];
			return this.readValue(t2);
		case 11:
			var t3 = t[2];
			var v14 = this.input.b[this.inPos++];
			if(v14 == 128) {
				v14 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var len6 = v14;
			if(len6 == 0) {
				return null;
			} else {
				--len6;
				var this1 = new Array(len6);
				var a1 = this1;
				var _g13 = 0;
				var _g3 = len6;
				while(_g13 < _g3) {
					var i1 = _g13++;
					a1[i1] = _gthis.readValue(t3);
				}
				return a1;
			}
			break;
		case 12:
			var t4 = t[2];
			if(this.input.b[this.inPos++] == 0) {
				return null;
			} else {
				return this.readValue(t4);
			}
			break;
		case 13:
			throw new js__$Boot_HaxeError("assert");
		case 14:
			return this.getDynamic();
		case 15:
			var v15 = this.input.getInt64(this.inPos);
			this.inPos += 8;
			return v15;
		case 16:
			var v16 = this.input.b[this.inPos++];
			if(v16 == 128) {
				v16 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			return v16;
		case 17:
			return this.getStruct();
		}
	}
	,writeValue: function(v,t) {
		var _gthis = this;
		switch(t[1]) {
		case 0:
			var v1 = v;
			if(v1 >= 0 && v1 < 128) {
				this.out.addByte(v1);
			} else {
				this.out.addByte(128);
				this.out.addInt32(v1);
			}
			break;
		case 1:
			this.out.addFloat(v);
			break;
		case 2:
			this.out.addByte(v ? 1 : 0);
			break;
		case 3:
			var s = v;
			if(s == null) {
				this.out.addByte(0);
			} else {
				var b = haxe_io_Bytes.ofString(s);
				var v2 = b.length + 1;
				if(v2 >= 0 && v2 < 128) {
					this.out.addByte(v2);
				} else {
					this.out.addByte(128);
					this.out.addInt32(v2);
				}
				this.out.add(b);
			}
			break;
		case 4:
			var b1 = v;
			if(b1 == null) {
				this.out.addByte(0);
			} else {
				var v3 = b1.length + 1;
				if(v3 >= 0 && v3 < 128) {
					this.out.addByte(v3);
				} else {
					this.out.addByte(128);
					this.out.addInt32(v3);
				}
				this.out.add(b1);
			}
			break;
		case 5:
			this.addKnownRef(v);
			break;
		case 6:
			var name = t[2];
			var ser = "hxbit.enumSer." + name.split(".").join("_");
			if(ser == null) {
				throw new js__$Boot_HaxeError("No enum unserializer found for " + name);
			}
			Type.resolveClass(ser).doSerialize(this,v);
			break;
		case 7:
			var t1 = t[3];
			var k = t[2];
			var a = v;
			if(a == null) {
				this.out.addByte(0);
			} else {
				var _e = a;
				var keys = Lambda.array({ iterator : function() {
					return _e.keys();
				}});
				var v4 = keys.length + 1;
				if(v4 >= 0 && v4 < 128) {
					this.out.addByte(v4);
				} else {
					this.out.addByte(128);
					this.out.addInt32(v4);
				}
				var _g = 0;
				while(_g < keys.length) {
					var k1 = keys[_g];
					++_g;
					_gthis.writeValue(k1,k);
					_gthis.writeValue(a.get(k1),t1);
				}
			}
			break;
		case 8:
			var t2 = t[2];
			var a1 = v;
			if(a1 == null) {
				this.out.addByte(0);
			} else {
				var v5 = a1.length + 1;
				if(v5 >= 0 && v5 < 128) {
					this.out.addByte(v5);
				} else {
					this.out.addByte(128);
					this.out.addInt32(v5);
				}
				var _g1 = 0;
				while(_g1 < a1.length) {
					var v6 = a1[_g1];
					++_g1;
					_gthis.writeValue(v6,t2);
				}
			}
			break;
		case 9:
			var fields = t[2];
			if(v == null) {
				this.out.addByte(0);
			} else {
				var fbits = 0;
				var _g2 = [];
				var _g11 = 0;
				while(_g11 < fields.length) {
					var f = fields[_g11];
					++_g11;
					if(this.isNullable(f.type)) {
						_g2.push(f);
					}
				}
				var nullables = _g2;
				var _g21 = 0;
				var _g12 = nullables.length;
				while(_g21 < _g12) {
					var i = _g21++;
					if(Reflect.field(v,nullables[i].name) != null) {
						fbits |= 1 << i;
					}
				}
				var v7 = fbits + 1;
				if(v7 >= 0 && v7 < 128) {
					this.out.addByte(v7);
				} else {
					this.out.addByte(128);
					this.out.addInt32(v7);
				}
				var _g13 = 0;
				while(_g13 < fields.length) {
					var f1 = fields[_g13];
					++_g13;
					var nidx = nullables.indexOf(f1);
					var name1 = f1.name;
					if(nidx >= 0 && (fbits & 1 << nidx) == 0) {
						continue;
					}
					this.writeValue(Reflect.field(v,f1.name),f1.type);
				}
			}
			break;
		case 10:
			var t3 = t[2];
			this.writeValue(v,t3);
			break;
		case 11:
			var t4 = t[2];
			var a2 = v;
			if(a2 == null) {
				this.out.addByte(0);
			} else {
				var v8 = a2.length + 1;
				if(v8 >= 0 && v8 < 128) {
					this.out.addByte(v8);
				} else {
					this.out.addByte(128);
					this.out.addInt32(v8);
				}
				var _g3 = 0;
				while(_g3 < a2.length) {
					var v9 = a2[_g3];
					++_g3;
					_gthis.writeValue(v9,t4);
				}
			}
			break;
		case 12:
			var t5 = t[2];
			if(v == null) {
				this.out.addByte(0);
			} else {
				this.out.addByte(1);
				this.writeValue(v,t5);
			}
			break;
		case 13:
			throw new js__$Boot_HaxeError("assert");
		case 14:
			this.addDynamic(v);
			break;
		case 15:
			this.out.addInt64(v);
			break;
		case 16:
			var v10 = v;
			if(v10 >= 0 && v10 < 128) {
				this.out.addByte(v10);
			} else {
				this.out.addByte(128);
				this.out.addInt32(v10);
			}
			break;
		case 17:
			this.addStruct(v);
			break;
		}
	}
	,__class__: hxbit_Serializer
};
var hxbit_Schema = function() {
	this.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	this.fieldsNames = [];
	this.fieldsTypes = [];
};
$hxClasses["hxbit.Schema"] = hxbit_Schema;
hxbit_Schema.__name__ = ["hxbit","Schema"];
hxbit_Schema.__interfaces__ = [hxbit_Serializable];
hxbit_Schema.prototype = {
	get_checkSum: function() {
		var s = new hxbit_Serializer();
		s.begin();
		var old = this.__uid;
		this.__uid = 0;
		s.addKnownRef(this);
		this.__uid = old;
		var bytes = s.end();
		return haxe_crypto_Crc32.make(bytes);
	}
	,getCLID: function() {
		return hxbit_Schema.__clid;
	}
	,serialize: function(__ctx) {
		__ctx.out.addByte(this.isFinal ? 1 : 0);
		var a = this.fieldsNames;
		if(a == null) {
			__ctx.out.addByte(0);
		} else {
			var v = a.length + 1;
			if(v >= 0 && v < 128) {
				__ctx.out.addByte(v);
			} else {
				__ctx.out.addByte(128);
				__ctx.out.addInt32(v);
			}
			var _g = 0;
			while(_g < a.length) {
				var v1 = a[_g];
				++_g;
				if(v1 == null) {
					__ctx.out.addByte(0);
				} else {
					var b = haxe_io_Bytes.ofString(v1);
					var v2 = b.length + 1;
					if(v2 >= 0 && v2 < 128) {
						__ctx.out.addByte(v2);
					} else {
						__ctx.out.addByte(128);
						__ctx.out.addInt32(v2);
					}
					__ctx.out.add(b);
				}
			}
		}
		var a1 = this.fieldsTypes;
		if(a1 == null) {
			__ctx.out.addByte(0);
		} else {
			var v3 = a1.length + 1;
			if(v3 >= 0 && v3 < 128) {
				__ctx.out.addByte(v3);
			} else {
				__ctx.out.addByte(128);
				__ctx.out.addInt32(v3);
			}
			var _g1 = 0;
			while(_g1 < a1.length) {
				var v4 = a1[_g1];
				++_g1;
				hxbit_enumSer_hxbit_$PropTypeDesc.doSerialize(__ctx,v4);
			}
		}
	}
	,getSerializeSchema: function() {
		var schema = new hxbit_Schema();
		schema.fieldsNames.push("isFinal");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PBool);
		schema.fieldsNames.push("fieldsNames");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PArray(hxbit_PropTypeDesc.PString));
		schema.fieldsNames.push("fieldsTypes");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PArray(hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc")));
		schema.isFinal = hxbit_Serializer.isClassFinal(hxbit_Schema.__clid);
		return schema;
	}
	,unserializeInit: function() {
	}
	,unserialize: function(__ctx) {
		this.isFinal = __ctx.input.b[__ctx.inPos++] != 0;
		var e0;
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			--len;
			var a = [];
			var _g1 = 0;
			var _g = len;
			while(_g1 < _g) {
				var i = _g1++;
				var v1 = __ctx.input.b[__ctx.inPos++];
				if(v1 == 128) {
					v1 = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				var len1 = v1;
				if(len1 == 0) {
					e0 = null;
				} else {
					--len1;
					var s = __ctx.input.getString(__ctx.inPos,len1);
					__ctx.inPos += len1;
					e0 = s;
				}
				a[i] = e0;
			}
			tmp = a;
		}
		this.fieldsNames = tmp;
		var e01;
		var v2 = __ctx.input.b[__ctx.inPos++];
		if(v2 == 128) {
			v2 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len2 = v2;
		var tmp1;
		if(len2 == 0) {
			tmp1 = null;
		} else {
			--len2;
			var a1 = [];
			var _g11 = 0;
			var _g2 = len2;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var __e = hxbit_enumSer_hxbit_$PropTypeDesc.doUnserialize(__ctx);
				e01 = __e;
				a1[i1] = e01;
			}
			tmp1 = a1;
		}
		this.fieldsTypes = tmp1;
	}
	,__class__: hxbit_Schema
};
var hxbit_SerializableEnum = function() { };
$hxClasses["hxbit.SerializableEnum"] = hxbit_SerializableEnum;
hxbit_SerializableEnum.__name__ = ["hxbit","SerializableEnum"];
var hxbit_StructSerializable = function() { };
$hxClasses["hxbit.StructSerializable"] = hxbit_StructSerializable;
hxbit_StructSerializable.__name__ = ["hxbit","StructSerializable"];
hxbit_StructSerializable.prototype = {
	__class__: hxbit_StructSerializable
};
var hxbit_enumSer_hxbit_$PropTypeDesc = function() { };
$hxClasses["hxbit.enumSer.hxbit_PropTypeDesc"] = hxbit_enumSer_hxbit_$PropTypeDesc;
hxbit_enumSer_hxbit_$PropTypeDesc.__name__ = ["hxbit","enumSer","hxbit_PropTypeDesc"];
hxbit_enumSer_hxbit_$PropTypeDesc.doSerialize = function(ctx,v) {
	if(v == null) {
		ctx.out.addByte(0);
	} else {
		switch(v[1]) {
		case 0:
			ctx.out.addByte(1);
			break;
		case 1:
			ctx.out.addByte(2);
			break;
		case 2:
			ctx.out.addByte(3);
			break;
		case 3:
			ctx.out.addByte(4);
			break;
		case 4:
			ctx.out.addByte(5);
			break;
		case 5:
			var name = v[2];
			ctx.out.addByte(6);
			if(name == null) {
				ctx.out.addByte(0);
			} else {
				var b = haxe_io_Bytes.ofString(name);
				var v1 = b.length + 1;
				if(v1 >= 0 && v1 < 128) {
					ctx.out.addByte(v1);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v1);
				}
				ctx.out.add(b);
			}
			break;
		case 6:
			var name1 = v[2];
			ctx.out.addByte(7);
			if(name1 == null) {
				ctx.out.addByte(0);
			} else {
				var b1 = haxe_io_Bytes.ofString(name1);
				var v2 = b1.length + 1;
				if(v2 >= 0 && v2 < 128) {
					ctx.out.addByte(v2);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v2);
				}
				ctx.out.add(b1);
			}
			break;
		case 7:
			var v3 = v[3];
			var k = v[2];
			ctx.out.addByte(8);
			hxbit_enumSer_hxbit_$PropTypeDesc.doSerialize(ctx,k);
			hxbit_enumSer_hxbit_$PropTypeDesc.doSerialize(ctx,v3);
			break;
		case 8:
			var k1 = v[2];
			ctx.out.addByte(9);
			hxbit_enumSer_hxbit_$PropTypeDesc.doSerialize(ctx,k1);
			break;
		case 9:
			var fields = v[2];
			ctx.out.addByte(10);
			if(fields == null) {
				ctx.out.addByte(0);
			} else {
				var v4 = fields.length + 1;
				if(v4 >= 0 && v4 < 128) {
					ctx.out.addByte(v4);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v4);
				}
				var _g = 0;
				while(_g < fields.length) {
					var v5 = fields[_g];
					++_g;
					var v6 = v5;
					if(v6 == null) {
						ctx.out.addByte(0);
					} else {
						var fbits = 0;
						if(v6.name != null) {
							fbits |= 1;
						}
						if(v6.type != null) {
							fbits |= 2;
						}
						var v7 = fbits + 1;
						if(v7 >= 0 && v7 < 128) {
							ctx.out.addByte(v7);
						} else {
							ctx.out.addByte(128);
							ctx.out.addInt32(v7);
						}
						if((fbits & 1) != 0) {
							var s = v6.name;
							if(s == null) {
								ctx.out.addByte(0);
							} else {
								var b2 = haxe_io_Bytes.ofString(s);
								var v8 = b2.length + 1;
								if(v8 >= 0 && v8 < 128) {
									ctx.out.addByte(v8);
								} else {
									ctx.out.addByte(128);
									ctx.out.addInt32(v8);
								}
								ctx.out.add(b2);
							}
						}
						ctx.out.addByte(v6.opt ? 1 : 0);
						if((fbits & 2) != 0) {
							hxbit_enumSer_hxbit_$PropTypeDesc.doSerialize(ctx,v6.type);
						}
					}
				}
			}
			break;
		case 10:
			var k2 = v[2];
			ctx.out.addByte(11);
			hxbit_enumSer_hxbit_$PropTypeDesc.doSerialize(ctx,k2);
			break;
		case 11:
			var k3 = v[2];
			ctx.out.addByte(12);
			hxbit_enumSer_hxbit_$PropTypeDesc.doSerialize(ctx,k3);
			break;
		case 12:
			var t = v[2];
			ctx.out.addByte(13);
			hxbit_enumSer_hxbit_$PropTypeDesc.doSerialize(ctx,t);
			break;
		case 13:
			ctx.out.addByte(14);
			break;
		case 14:
			ctx.out.addByte(15);
			break;
		case 15:
			ctx.out.addByte(16);
			break;
		case 16:
			var t1 = v[2];
			ctx.out.addByte(17);
			hxbit_enumSer_hxbit_$PropTypeDesc.doSerialize(ctx,t1);
			break;
		case 17:
			ctx.out.addByte(18);
			break;
		}
	}
};
hxbit_enumSer_hxbit_$PropTypeDesc.doUnserialize = function(ctx) {
	var b = ctx.input.b[ctx.inPos++];
	if(b == 0) {
		return null;
	}
	switch(b) {
	case 1:
		return hxbit_PropTypeDesc.PInt;
	case 2:
		return hxbit_PropTypeDesc.PFloat;
	case 3:
		return hxbit_PropTypeDesc.PBool;
	case 4:
		return hxbit_PropTypeDesc.PString;
	case 5:
		return hxbit_PropTypeDesc.PBytes;
	case 6:
		var _name;
		var v = ctx.input.b[ctx.inPos++];
		if(v == 128) {
			v = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len = v;
		if(len == 0) {
			_name = null;
		} else {
			--len;
			var s = ctx.input.getString(ctx.inPos,len);
			ctx.inPos += len;
			_name = s;
		}
		return hxbit_PropTypeDesc.PSerializable(_name);
	case 7:
		var _name1;
		var v1 = ctx.input.b[ctx.inPos++];
		if(v1 == 128) {
			v1 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len1 = v1;
		if(len1 == 0) {
			_name1 = null;
		} else {
			--len1;
			var s1 = ctx.input.getString(ctx.inPos,len1);
			ctx.inPos += len1;
			_name1 = s1;
		}
		return hxbit_PropTypeDesc.PEnum(_name1);
	case 8:
		var _k;
		var __e = hxbit_enumSer_hxbit_$PropTypeDesc.doUnserialize(ctx);
		_k = __e;
		var _v;
		var __e1 = hxbit_enumSer_hxbit_$PropTypeDesc.doUnserialize(ctx);
		_v = __e1;
		return hxbit_PropTypeDesc.PMap(_k,_v);
	case 9:
		var _k1;
		var __e2 = hxbit_enumSer_hxbit_$PropTypeDesc.doUnserialize(ctx);
		_k1 = __e2;
		return hxbit_PropTypeDesc.PArray(_k1);
	case 10:
		var _fields;
		var e0;
		var v2 = ctx.input.b[ctx.inPos++];
		if(v2 == 128) {
			v2 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len2 = v2;
		if(len2 == 0) {
			_fields = null;
		} else {
			--len2;
			var a = [];
			var _g1 = 0;
			var _g = len2;
			while(_g1 < _g) {
				var i = _g1++;
				var v3 = ctx.input.b[ctx.inPos++];
				if(v3 == 128) {
					v3 = ctx.input.getInt32(ctx.inPos);
					ctx.inPos += 4;
				}
				var fbits = v3;
				if(fbits == 0) {
					e0 = null;
				} else {
					--fbits;
					var type = null;
					var name = null;
					if((fbits & 1) != 0) {
						var v4 = ctx.input.b[ctx.inPos++];
						if(v4 == 128) {
							v4 = ctx.input.getInt32(ctx.inPos);
							ctx.inPos += 4;
						}
						var len3 = v4;
						if(len3 == 0) {
							name = null;
						} else {
							--len3;
							var s2 = ctx.input.getString(ctx.inPos,len3);
							ctx.inPos += len3;
							name = s2;
						}
					}
					var opt = ctx.input.b[ctx.inPos++] != 0;
					if((fbits & 2) != 0) {
						var __e3 = hxbit_enumSer_hxbit_$PropTypeDesc.doUnserialize(ctx);
						type = __e3;
					}
					e0 = { name : name, opt : opt, type : type};
				}
				a[i] = e0;
			}
			_fields = a;
		}
		return hxbit_PropTypeDesc.PObj(_fields);
	case 11:
		var _k2;
		var __e4 = hxbit_enumSer_hxbit_$PropTypeDesc.doUnserialize(ctx);
		_k2 = __e4;
		return hxbit_PropTypeDesc.PAlias(_k2);
	case 12:
		var _k3;
		var __e5 = hxbit_enumSer_hxbit_$PropTypeDesc.doUnserialize(ctx);
		_k3 = __e5;
		return hxbit_PropTypeDesc.PVector(_k3);
	case 13:
		var _t;
		var __e6 = hxbit_enumSer_hxbit_$PropTypeDesc.doUnserialize(ctx);
		_t = __e6;
		return hxbit_PropTypeDesc.PNull(_t);
	case 14:
		return hxbit_PropTypeDesc.PUnknown;
	case 15:
		return hxbit_PropTypeDesc.PDynamic;
	case 16:
		return hxbit_PropTypeDesc.PInt64;
	case 17:
		var _t1;
		var __e7 = hxbit_enumSer_hxbit_$PropTypeDesc.doUnserialize(ctx);
		_t1 = __e7;
		return hxbit_PropTypeDesc.PFlags(_t1);
	case 18:
		return hxbit_PropTypeDesc.PStruct;
	default:
		throw new js__$Boot_HaxeError("Invalid enum index " + b);
	}
};
hxbit_enumSer_hxbit_$PropTypeDesc.getSchema = function() {
	var s = new hxbit_Schema();
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PInt");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PFloat");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PBool");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PString");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PBytes");
	var s1 = s.fieldsTypes;
	var _g = [];
	var v;
	var t = hxbit_PropTypeDesc.PString;
	_g.push({ name : "", type : t, opt : false});
	s1.push(hxbit_PropTypeDesc.PObj(_g));
	s.fieldsNames.push("PSerializable");
	var s2 = s.fieldsTypes;
	var _g1 = [];
	var v1;
	var t1 = hxbit_PropTypeDesc.PString;
	_g1.push({ name : "", type : t1, opt : false});
	s2.push(hxbit_PropTypeDesc.PObj(_g1));
	s.fieldsNames.push("PEnum");
	var s3 = s.fieldsTypes;
	var _g2 = [];
	var v2;
	var v3;
	var t2 = hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc");
	_g2.push({ name : "", type : t2, opt : false});
	s3.push(hxbit_PropTypeDesc.PObj(_g2));
	s.fieldsNames.push("PMap");
	var s4 = s.fieldsTypes;
	var _g3 = [];
	var v4;
	var t3 = hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc");
	_g3.push({ name : "", type : t3, opt : false});
	s4.push(hxbit_PropTypeDesc.PObj(_g3));
	s.fieldsNames.push("PArray");
	var s5 = s.fieldsTypes;
	var _g4 = [];
	var v5;
	var t4 = hxbit_PropTypeDesc.PArray(hxbit_PropTypeDesc.PObj([{ name : "name", opt : false, type : hxbit_PropTypeDesc.PString},{ name : "opt", opt : false, type : hxbit_PropTypeDesc.PBool},{ name : "type", opt : false, type : hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc")}]));
	_g4.push({ name : "", type : t4, opt : false});
	s5.push(hxbit_PropTypeDesc.PObj(_g4));
	s.fieldsNames.push("PObj");
	var s6 = s.fieldsTypes;
	var _g5 = [];
	var v6;
	var t5 = hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc");
	_g5.push({ name : "", type : t5, opt : false});
	s6.push(hxbit_PropTypeDesc.PObj(_g5));
	s.fieldsNames.push("PAlias");
	var s7 = s.fieldsTypes;
	var _g6 = [];
	var v7;
	var t6 = hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc");
	_g6.push({ name : "", type : t6, opt : false});
	s7.push(hxbit_PropTypeDesc.PObj(_g6));
	s.fieldsNames.push("PVector");
	var s8 = s.fieldsTypes;
	var _g7 = [];
	var v8;
	var t7 = hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc");
	_g7.push({ name : "", type : t7, opt : false});
	s8.push(hxbit_PropTypeDesc.PObj(_g7));
	s.fieldsNames.push("PNull");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PUnknown");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PDynamic");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PInt64");
	var s9 = s.fieldsTypes;
	var _g8 = [];
	var v9;
	var t8 = hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc");
	_g8.push({ name : "", type : t8, opt : false});
	s9.push(hxbit_PropTypeDesc.PObj(_g8));
	s.fieldsNames.push("PFlags");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PStruct");
	return s;
};
var hxbit_enumSer_vdom_$Answer = function() { };
$hxClasses["hxbit.enumSer.vdom_Answer"] = hxbit_enumSer_vdom_$Answer;
hxbit_enumSer_vdom_$Answer.__name__ = ["hxbit","enumSer","vdom_Answer"];
hxbit_enumSer_vdom_$Answer.doSerialize = function(ctx,v) {
	if(v == null) {
		ctx.out.addByte(0);
	} else {
		switch(v[1]) {
		case 0:
			var props = v[3];
			var eid = v[2];
			ctx.out.addByte(1);
			if(eid >= 0 && eid < 128) {
				ctx.out.addByte(eid);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(eid);
			}
			var v1 = props;
			if(v1 == null) {
				ctx.out.addByte(0);
			} else {
				var fbits = 0;
				if(v1.ctrlKey != null) {
					fbits |= 1;
				}
				if(v1.keyCode != null) {
					fbits |= 2;
				}
				if(v1.shiftKey != null) {
					fbits |= 4;
				}
				if(v1.target != null) {
					fbits |= 8;
				}
				if(v1.value != null) {
					fbits |= 16;
				}
				if(v1.which != null) {
					fbits |= 32;
				}
				var v2 = fbits + 1;
				if(v2 >= 0 && v2 < 128) {
					ctx.out.addByte(v2);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v2);
				}
				if((fbits & 1) != 0) {
					if(v1.ctrlKey == null) {
						ctx.out.addByte(0);
					} else {
						ctx.out.addByte(1);
						ctx.out.addByte(v1.ctrlKey ? 1 : 0);
					}
				}
				if((fbits & 2) != 0) {
					if(v1.keyCode == null) {
						ctx.out.addByte(0);
					} else {
						ctx.out.addByte(1);
						var v3 = v1.keyCode;
						if(v3 >= 0 && v3 < 128) {
							ctx.out.addByte(v3);
						} else {
							ctx.out.addByte(128);
							ctx.out.addInt32(v3);
						}
					}
				}
				if((fbits & 4) != 0) {
					if(v1.shiftKey == null) {
						ctx.out.addByte(0);
					} else {
						ctx.out.addByte(1);
						ctx.out.addByte(v1.shiftKey ? 1 : 0);
					}
				}
				if((fbits & 8) != 0) {
					if(v1.target == null) {
						ctx.out.addByte(0);
					} else {
						ctx.out.addByte(1);
						var v4 = v1.target;
						if(v4 >= 0 && v4 < 128) {
							ctx.out.addByte(v4);
						} else {
							ctx.out.addByte(128);
							ctx.out.addInt32(v4);
						}
					}
				}
				if((fbits & 16) != 0) {
					ctx.addDynamic(v1.value);
				}
				if((fbits & 32) != 0) {
					if(v1.which == null) {
						ctx.out.addByte(0);
					} else {
						ctx.out.addByte(1);
						var v5 = v1.which;
						if(v5 >= 0 && v5 < 128) {
							ctx.out.addByte(v5);
						} else {
							ctx.out.addByte(128);
							ctx.out.addInt32(v5);
						}
					}
				}
			}
			break;
		case 1:
			var value = v[3];
			var id = v[2];
			ctx.out.addByte(2);
			if(id >= 0 && id < 128) {
				ctx.out.addByte(id);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(id);
			}
			if(value == null) {
				ctx.out.addByte(0);
			} else {
				var b = haxe_io_Bytes.ofString(value);
				var v6 = b.length + 1;
				if(v6 >= 0 && v6 < 128) {
					ctx.out.addByte(v6);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v6);
				}
				ctx.out.add(b);
			}
			break;
		case 2:
			var eid1 = v[2];
			ctx.out.addByte(3);
			if(eid1 >= 0 && eid1 < 128) {
				ctx.out.addByte(eid1);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(eid1);
			}
			break;
		}
	}
};
hxbit_enumSer_vdom_$Answer.doUnserialize = function(ctx) {
	var b = ctx.input.b[ctx.inPos++];
	if(b == 0) {
		return null;
	}
	switch(b) {
	case 1:
		var v = ctx.input.b[ctx.inPos++];
		if(v == 128) {
			v = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _eid = v;
		var _props;
		var v1 = ctx.input.b[ctx.inPos++];
		if(v1 == 128) {
			v1 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var fbits = v1;
		if(fbits == 0) {
			_props = null;
		} else {
			--fbits;
			var which = null;
			var value = null;
			var target = null;
			var shiftKey = null;
			var keyCode = null;
			var ctrlKey = null;
			if((fbits & 1) != 0) {
				if(ctx.input.b[ctx.inPos++] == 0) {
					ctrlKey = null;
				} else {
					ctrlKey = ctx.input.b[ctx.inPos++] != 0;
				}
			}
			if((fbits & 2) != 0) {
				if(ctx.input.b[ctx.inPos++] == 0) {
					keyCode = null;
				} else {
					var v2 = ctx.input.b[ctx.inPos++];
					if(v2 == 128) {
						v2 = ctx.input.getInt32(ctx.inPos);
						ctx.inPos += 4;
					}
					keyCode = v2;
				}
			}
			if((fbits & 4) != 0) {
				if(ctx.input.b[ctx.inPos++] == 0) {
					shiftKey = null;
				} else {
					shiftKey = ctx.input.b[ctx.inPos++] != 0;
				}
			}
			if((fbits & 8) != 0) {
				if(ctx.input.b[ctx.inPos++] == 0) {
					target = null;
				} else {
					var v3 = ctx.input.b[ctx.inPos++];
					if(v3 == 128) {
						v3 = ctx.input.getInt32(ctx.inPos);
						ctx.inPos += 4;
					}
					target = v3;
				}
			}
			if((fbits & 16) != 0) {
				value = ctx.getDynamic();
			}
			if((fbits & 32) != 0) {
				if(ctx.input.b[ctx.inPos++] == 0) {
					which = null;
				} else {
					var v4 = ctx.input.b[ctx.inPos++];
					if(v4 == 128) {
						v4 = ctx.input.getInt32(ctx.inPos);
						ctx.inPos += 4;
					}
					which = v4;
				}
			}
			_props = { ctrlKey : ctrlKey, keyCode : keyCode, shiftKey : shiftKey, target : target, value : value, which : which};
		}
		return vdom_Answer.Event(_eid,_props);
	case 2:
		var v5 = ctx.input.b[ctx.inPos++];
		if(v5 == 128) {
			v5 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _id = v5;
		var _value;
		var v6 = ctx.input.b[ctx.inPos++];
		if(v6 == 128) {
			v6 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len = v6;
		if(len == 0) {
			_value = null;
		} else {
			--len;
			var s = ctx.input.getString(ctx.inPos,len);
			ctx.inPos += len;
			_value = s;
		}
		return vdom_Answer.SetValue(_id,_value);
	case 3:
		var v7 = ctx.input.b[ctx.inPos++];
		if(v7 == 128) {
			v7 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _eid1 = v7;
		return vdom_Answer.Done(_eid1);
	default:
		throw new js__$Boot_HaxeError("Invalid enum index " + b);
	}
};
hxbit_enumSer_vdom_$Answer.getSchema = function() {
	var s = new hxbit_Schema();
	var s1 = s.fieldsTypes;
	var _g = [];
	var v;
	var v1;
	var t = hxbit_PropTypeDesc.PObj([{ name : "ctrlKey", opt : true, type : hxbit_PropTypeDesc.PNull(hxbit_PropTypeDesc.PBool)},{ name : "keyCode", opt : true, type : hxbit_PropTypeDesc.PNull(hxbit_PropTypeDesc.PInt)},{ name : "shiftKey", opt : true, type : hxbit_PropTypeDesc.PNull(hxbit_PropTypeDesc.PBool)},{ name : "target", opt : true, type : hxbit_PropTypeDesc.PNull(hxbit_PropTypeDesc.PInt)},{ name : "value", opt : true, type : hxbit_PropTypeDesc.PDynamic},{ name : "which", opt : true, type : hxbit_PropTypeDesc.PNull(hxbit_PropTypeDesc.PInt)}]);
	_g.push({ name : "", type : t, opt : false});
	s1.push(hxbit_PropTypeDesc.PObj(_g));
	s.fieldsNames.push("Event");
	var s2 = s.fieldsTypes;
	var _g1 = [];
	var v2;
	var v3;
	var t1 = hxbit_PropTypeDesc.PString;
	_g1.push({ name : "", type : t1, opt : false});
	s2.push(hxbit_PropTypeDesc.PObj(_g1));
	s.fieldsNames.push("SetValue");
	var s3 = s.fieldsTypes;
	var _g2 = [];
	var v4;
	var t2 = hxbit_PropTypeDesc.PInt;
	_g2.push({ name : "", type : t2, opt : false});
	s3.push(hxbit_PropTypeDesc.PObj(_g2));
	s.fieldsNames.push("Done");
	return s;
};
var hxbit_enumSer_vdom_$Message = function() { };
$hxClasses["hxbit.enumSer.vdom_Message"] = hxbit_enumSer_vdom_$Message;
hxbit_enumSer_vdom_$Message.__name__ = ["hxbit","enumSer","vdom_Message"];
hxbit_enumSer_vdom_$Message.doSerialize = function(ctx,v) {
	if(v == null) {
		ctx.out.addByte(0);
	} else {
		switch(v[1]) {
		case 0:
			var attr = v[4];
			var name = v[3];
			var id = v[2];
			ctx.out.addByte(1);
			if(id >= 0 && id < 128) {
				ctx.out.addByte(id);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(id);
			}
			if(name == null) {
				ctx.out.addByte(0);
			} else {
				var b = haxe_io_Bytes.ofString(name);
				var v1 = b.length + 1;
				if(v1 >= 0 && v1 < 128) {
					ctx.out.addByte(v1);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v1);
				}
				ctx.out.add(b);
			}
			if(attr == null) {
				ctx.out.addByte(0);
			} else {
				var v2 = attr.length + 1;
				if(v2 >= 0 && v2 < 128) {
					ctx.out.addByte(v2);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v2);
				}
				var _g = 0;
				while(_g < attr.length) {
					var v3 = attr[_g];
					++_g;
					var v4 = v3;
					if(v4 == null) {
						ctx.out.addByte(0);
					} else {
						var fbits = 0;
						if(v4.name != null) {
							fbits |= 1;
						}
						if(v4.value != null) {
							fbits |= 2;
						}
						var v5 = fbits + 1;
						if(v5 >= 0 && v5 < 128) {
							ctx.out.addByte(v5);
						} else {
							ctx.out.addByte(128);
							ctx.out.addInt32(v5);
						}
						if((fbits & 1) != 0) {
							var s = v4.name;
							if(s == null) {
								ctx.out.addByte(0);
							} else {
								var b1 = haxe_io_Bytes.ofString(s);
								var v6 = b1.length + 1;
								if(v6 >= 0 && v6 < 128) {
									ctx.out.addByte(v6);
								} else {
									ctx.out.addByte(128);
									ctx.out.addInt32(v6);
								}
								ctx.out.add(b1);
							}
						}
						if((fbits & 2) != 0) {
							var s1 = v4.value;
							if(s1 == null) {
								ctx.out.addByte(0);
							} else {
								var b2 = haxe_io_Bytes.ofString(s1);
								var v7 = b2.length + 1;
								if(v7 >= 0 && v7 < 128) {
									ctx.out.addByte(v7);
								} else {
									ctx.out.addByte(128);
									ctx.out.addInt32(v7);
								}
								ctx.out.add(b2);
							}
						}
					}
				}
			}
			break;
		case 1:
			var name1 = v[3];
			var id1 = v[2];
			ctx.out.addByte(2);
			if(id1 >= 0 && id1 < 128) {
				ctx.out.addByte(id1);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(id1);
			}
			if(name1 == null) {
				ctx.out.addByte(0);
			} else {
				var b3 = haxe_io_Bytes.ofString(name1);
				var v8 = b3.length + 1;
				if(v8 >= 0 && v8 < 128) {
					ctx.out.addByte(v8);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v8);
				}
				ctx.out.add(b3);
			}
			break;
		case 2:
			var name2 = v[3];
			var id2 = v[2];
			ctx.out.addByte(3);
			if(id2 >= 0 && id2 < 128) {
				ctx.out.addByte(id2);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(id2);
			}
			if(name2 == null) {
				ctx.out.addByte(0);
			} else {
				var b4 = haxe_io_Bytes.ofString(name2);
				var v9 = b4.length + 1;
				if(v9 >= 0 && v9 < 128) {
					ctx.out.addByte(v9);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v9);
				}
				ctx.out.add(b4);
			}
			break;
		case 3:
			var to = v[3];
			var id3 = v[2];
			ctx.out.addByte(4);
			if(id3 >= 0 && id3 < 128) {
				ctx.out.addByte(id3);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(id3);
			}
			if(to >= 0 && to < 128) {
				ctx.out.addByte(to);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(to);
			}
			break;
		case 4:
			var pos = v[4];
			var to1 = v[3];
			var id4 = v[2];
			ctx.out.addByte(5);
			if(id4 >= 0 && id4 < 128) {
				ctx.out.addByte(id4);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(id4);
			}
			if(to1 >= 0 && to1 < 128) {
				ctx.out.addByte(to1);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(to1);
			}
			if(pos >= 0 && pos < 128) {
				ctx.out.addByte(pos);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(pos);
			}
			break;
		case 5:
			var pid = v[4];
			var text = v[3];
			var id5 = v[2];
			ctx.out.addByte(6);
			if(id5 >= 0 && id5 < 128) {
				ctx.out.addByte(id5);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(id5);
			}
			if(text == null) {
				ctx.out.addByte(0);
			} else {
				var b5 = haxe_io_Bytes.ofString(text);
				var v10 = b5.length + 1;
				if(v10 >= 0 && v10 < 128) {
					ctx.out.addByte(v10);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v10);
				}
				ctx.out.add(b5);
			}
			if(pid == null) {
				ctx.out.addByte(0);
			} else {
				ctx.out.addByte(1);
				if(pid >= 0 && pid < 128) {
					ctx.out.addByte(pid);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(pid);
				}
			}
			break;
		case 6:
			var id6 = v[2];
			ctx.out.addByte(7);
			if(id6 >= 0 && id6 < 128) {
				ctx.out.addByte(id6);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(id6);
			}
			break;
		case 7:
			var id7 = v[2];
			ctx.out.addByte(8);
			if(id7 >= 0 && id7 < 128) {
				ctx.out.addByte(id7);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(id7);
			}
			break;
		case 8:
			var eid = v[4];
			var name3 = v[3];
			var id8 = v[2];
			ctx.out.addByte(9);
			if(id8 >= 0 && id8 < 128) {
				ctx.out.addByte(id8);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(id8);
			}
			if(name3 == null) {
				ctx.out.addByte(0);
			} else {
				var b6 = haxe_io_Bytes.ofString(name3);
				var v11 = b6.length + 1;
				if(v11 >= 0 && v11 < 128) {
					ctx.out.addByte(v11);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v11);
				}
				ctx.out.add(b6);
			}
			if(eid >= 0 && eid < 128) {
				ctx.out.addByte(eid);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(eid);
			}
			break;
		case 9:
			var val = v[4];
			var att = v[3];
			var id9 = v[2];
			ctx.out.addByte(10);
			if(id9 >= 0 && id9 < 128) {
				ctx.out.addByte(id9);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(id9);
			}
			if(att == null) {
				ctx.out.addByte(0);
			} else {
				var b7 = haxe_io_Bytes.ofString(att);
				var v12 = b7.length + 1;
				if(v12 >= 0 && v12 < 128) {
					ctx.out.addByte(v12);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v12);
				}
				ctx.out.add(b7);
			}
			if(val == null) {
				ctx.out.addByte(0);
			} else {
				var b8 = haxe_io_Bytes.ofString(val);
				var v13 = b8.length + 1;
				if(v13 >= 0 && v13 < 128) {
					ctx.out.addByte(v13);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v13);
				}
				ctx.out.add(b8);
			}
			break;
		case 10:
			var val1 = v[4];
			var st = v[3];
			var id10 = v[2];
			ctx.out.addByte(11);
			if(id10 >= 0 && id10 < 128) {
				ctx.out.addByte(id10);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(id10);
			}
			if(st == null) {
				ctx.out.addByte(0);
			} else {
				var b9 = haxe_io_Bytes.ofString(st);
				var v14 = b9.length + 1;
				if(v14 >= 0 && v14 < 128) {
					ctx.out.addByte(v14);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v14);
				}
				ctx.out.add(b9);
			}
			if(val1 == null) {
				ctx.out.addByte(0);
			} else {
				var b10 = haxe_io_Bytes.ofString(val1);
				var v15 = b10.length + 1;
				if(v15 >= 0 && v15 < 128) {
					ctx.out.addByte(v15);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v15);
				}
				ctx.out.add(b10);
			}
			break;
		case 11:
			var name4 = v[3];
			var id11 = v[2];
			ctx.out.addByte(12);
			if(id11 >= 0 && id11 < 128) {
				ctx.out.addByte(id11);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(id11);
			}
			if(name4 == null) {
				ctx.out.addByte(0);
			} else {
				var b11 = haxe_io_Bytes.ofString(name4);
				var v16 = b11.length + 1;
				if(v16 >= 0 && v16 < 128) {
					ctx.out.addByte(v16);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v16);
				}
				ctx.out.add(b11);
			}
			break;
		case 12:
			var eid1 = v[5];
			var args = v[4];
			var name5 = v[3];
			var id12 = v[2];
			ctx.out.addByte(13);
			if(id12 >= 0 && id12 < 128) {
				ctx.out.addByte(id12);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(id12);
			}
			if(name5 == null) {
				ctx.out.addByte(0);
			} else {
				var b12 = haxe_io_Bytes.ofString(name5);
				var v17 = b12.length + 1;
				if(v17 >= 0 && v17 < 128) {
					ctx.out.addByte(v17);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v17);
				}
				ctx.out.add(b12);
			}
			if(args == null) {
				ctx.out.addByte(0);
			} else {
				var v18 = args.length + 1;
				if(v18 >= 0 && v18 < 128) {
					ctx.out.addByte(v18);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v18);
				}
				var _g1 = 0;
				while(_g1 < args.length) {
					var v19 = args[_g1];
					++_g1;
					ctx.addDynamic(v19);
				}
			}
			if(eid1 == null) {
				ctx.out.addByte(0);
			} else {
				ctx.out.addByte(1);
				if(eid1 >= 0 && eid1 < 128) {
					ctx.out.addByte(eid1);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(eid1);
				}
			}
			break;
		case 13:
			var dur = v[4];
			var name6 = v[3];
			var id13 = v[2];
			ctx.out.addByte(14);
			if(id13 >= 0 && id13 < 128) {
				ctx.out.addByte(id13);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(id13);
			}
			if(name6 == null) {
				ctx.out.addByte(0);
			} else {
				var b13 = haxe_io_Bytes.ofString(name6);
				var v20 = b13.length + 1;
				if(v20 >= 0 && v20 < 128) {
					ctx.out.addByte(v20);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v20);
				}
				ctx.out.add(b13);
			}
			if(dur == null) {
				ctx.out.addByte(0);
			} else {
				ctx.out.addByte(1);
				ctx.out.addFloat(dur);
			}
			break;
		case 14:
			var events = v[3];
			var id14 = v[2];
			ctx.out.addByte(15);
			if(id14 >= 0 && id14 < 128) {
				ctx.out.addByte(id14);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(id14);
			}
			if(events == null) {
				ctx.out.addByte(0);
			} else {
				var v21 = events.length + 1;
				if(v21 >= 0 && v21 < 128) {
					ctx.out.addByte(v21);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v21);
				}
				var _g2 = 0;
				while(_g2 < events.length) {
					var v22 = events[_g2];
					++_g2;
					if(v22 >= 0 && v22 < 128) {
						ctx.out.addByte(v22);
					} else {
						ctx.out.addByte(128);
						ctx.out.addInt32(v22);
					}
				}
			}
			break;
		case 15:
			var events1 = v[2];
			ctx.out.addByte(16);
			if(events1 == null) {
				ctx.out.addByte(0);
			} else {
				var v23 = events1.length + 1;
				if(v23 >= 0 && v23 < 128) {
					ctx.out.addByte(v23);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v23);
				}
				var _g3 = 0;
				while(_g3 < events1.length) {
					var v24 = events1[_g3];
					++_g3;
					if(v24 >= 0 && v24 < 128) {
						ctx.out.addByte(v24);
					} else {
						ctx.out.addByte(128);
						ctx.out.addInt32(v24);
					}
				}
			}
			break;
		case 16:
			var msg = v[2];
			ctx.out.addByte(17);
			if(msg == null) {
				ctx.out.addByte(0);
			} else {
				var v25 = msg.length + 1;
				if(v25 >= 0 && v25 < 128) {
					ctx.out.addByte(v25);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v25);
				}
				var _g4 = 0;
				while(_g4 < msg.length) {
					var v26 = msg[_g4];
					++_g4;
					hxbit_enumSer_vdom_$Message.doSerialize(ctx,v26);
				}
			}
			break;
		case 17:
			var value = v[3];
			var id15 = v[2];
			ctx.out.addByte(18);
			if(id15 >= 0 && id15 < 128) {
				ctx.out.addByte(id15);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(id15);
			}
			ctx.addDynamic(value);
			break;
		}
	}
};
hxbit_enumSer_vdom_$Message.doUnserialize = function(ctx) {
	var b = ctx.input.b[ctx.inPos++];
	if(b == 0) {
		return null;
	}
	switch(b) {
	case 1:
		var v = ctx.input.b[ctx.inPos++];
		if(v == 128) {
			v = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _id = v;
		var _name;
		var v1 = ctx.input.b[ctx.inPos++];
		if(v1 == 128) {
			v1 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len = v1;
		if(len == 0) {
			_name = null;
		} else {
			--len;
			var s = ctx.input.getString(ctx.inPos,len);
			ctx.inPos += len;
			_name = s;
		}
		var _attr;
		var e0;
		var v2 = ctx.input.b[ctx.inPos++];
		if(v2 == 128) {
			v2 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len1 = v2;
		if(len1 == 0) {
			_attr = null;
		} else {
			--len1;
			var a = [];
			var _g1 = 0;
			var _g = len1;
			while(_g1 < _g) {
				var i = _g1++;
				var v3 = ctx.input.b[ctx.inPos++];
				if(v3 == 128) {
					v3 = ctx.input.getInt32(ctx.inPos);
					ctx.inPos += 4;
				}
				var fbits = v3;
				if(fbits == 0) {
					e0 = null;
				} else {
					--fbits;
					var value = null;
					var name = null;
					if((fbits & 1) != 0) {
						var v4 = ctx.input.b[ctx.inPos++];
						if(v4 == 128) {
							v4 = ctx.input.getInt32(ctx.inPos);
							ctx.inPos += 4;
						}
						var len2 = v4;
						if(len2 == 0) {
							name = null;
						} else {
							--len2;
							var s1 = ctx.input.getString(ctx.inPos,len2);
							ctx.inPos += len2;
							name = s1;
						}
					}
					if((fbits & 2) != 0) {
						var v5 = ctx.input.b[ctx.inPos++];
						if(v5 == 128) {
							v5 = ctx.input.getInt32(ctx.inPos);
							ctx.inPos += 4;
						}
						var len3 = v5;
						if(len3 == 0) {
							value = null;
						} else {
							--len3;
							var s2 = ctx.input.getString(ctx.inPos,len3);
							ctx.inPos += len3;
							value = s2;
						}
					}
					e0 = { name : name, value : value};
				}
				a[i] = e0;
			}
			_attr = a;
		}
		return vdom_Message.Create(_id,_name,_attr);
	case 2:
		var v6 = ctx.input.b[ctx.inPos++];
		if(v6 == 128) {
			v6 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _id1 = v6;
		var _name1;
		var v7 = ctx.input.b[ctx.inPos++];
		if(v7 == 128) {
			v7 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len4 = v7;
		if(len4 == 0) {
			_name1 = null;
		} else {
			--len4;
			var s3 = ctx.input.getString(ctx.inPos,len4);
			ctx.inPos += len4;
			_name1 = s3;
		}
		return vdom_Message.AddClass(_id1,_name1);
	case 3:
		var v8 = ctx.input.b[ctx.inPos++];
		if(v8 == 128) {
			v8 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _id2 = v8;
		var _name2;
		var v9 = ctx.input.b[ctx.inPos++];
		if(v9 == 128) {
			v9 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len5 = v9;
		if(len5 == 0) {
			_name2 = null;
		} else {
			--len5;
			var s4 = ctx.input.getString(ctx.inPos,len5);
			ctx.inPos += len5;
			_name2 = s4;
		}
		return vdom_Message.RemoveClass(_id2,_name2);
	case 4:
		var v10 = ctx.input.b[ctx.inPos++];
		if(v10 == 128) {
			v10 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _id3 = v10;
		var v11 = ctx.input.b[ctx.inPos++];
		if(v11 == 128) {
			v11 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _to = v11;
		return vdom_Message.Append(_id3,_to);
	case 5:
		var v12 = ctx.input.b[ctx.inPos++];
		if(v12 == 128) {
			v12 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _id4 = v12;
		var v13 = ctx.input.b[ctx.inPos++];
		if(v13 == 128) {
			v13 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _to1 = v13;
		var v14 = ctx.input.b[ctx.inPos++];
		if(v14 == 128) {
			v14 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _pos = v14;
		return vdom_Message.InsertAt(_id4,_to1,_pos);
	case 6:
		var v15 = ctx.input.b[ctx.inPos++];
		if(v15 == 128) {
			v15 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _id5 = v15;
		var _text;
		var v16 = ctx.input.b[ctx.inPos++];
		if(v16 == 128) {
			v16 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len6 = v16;
		if(len6 == 0) {
			_text = null;
		} else {
			--len6;
			var s5 = ctx.input.getString(ctx.inPos,len6);
			ctx.inPos += len6;
			_text = s5;
		}
		var _pid;
		if(ctx.input.b[ctx.inPos++] == 0) {
			_pid = null;
		} else {
			var v17 = ctx.input.b[ctx.inPos++];
			if(v17 == 128) {
				v17 = ctx.input.getInt32(ctx.inPos);
				ctx.inPos += 4;
			}
			_pid = v17;
		}
		return vdom_Message.CreateText(_id5,_text,_pid);
	case 7:
		var v18 = ctx.input.b[ctx.inPos++];
		if(v18 == 128) {
			v18 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _id6 = v18;
		return vdom_Message.Reset(_id6);
	case 8:
		var v19 = ctx.input.b[ctx.inPos++];
		if(v19 == 128) {
			v19 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _id7 = v19;
		return vdom_Message.Remove(_id7);
	case 9:
		var v20 = ctx.input.b[ctx.inPos++];
		if(v20 == 128) {
			v20 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _id8 = v20;
		var _name3;
		var v21 = ctx.input.b[ctx.inPos++];
		if(v21 == 128) {
			v21 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len7 = v21;
		if(len7 == 0) {
			_name3 = null;
		} else {
			--len7;
			var s6 = ctx.input.getString(ctx.inPos,len7);
			ctx.inPos += len7;
			_name3 = s6;
		}
		var v22 = ctx.input.b[ctx.inPos++];
		if(v22 == 128) {
			v22 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _eid = v22;
		return vdom_Message.Event(_id8,_name3,_eid);
	case 10:
		var v23 = ctx.input.b[ctx.inPos++];
		if(v23 == 128) {
			v23 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _id9 = v23;
		var _att;
		var v24 = ctx.input.b[ctx.inPos++];
		if(v24 == 128) {
			v24 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len8 = v24;
		if(len8 == 0) {
			_att = null;
		} else {
			--len8;
			var s7 = ctx.input.getString(ctx.inPos,len8);
			ctx.inPos += len8;
			_att = s7;
		}
		var _val;
		var v25 = ctx.input.b[ctx.inPos++];
		if(v25 == 128) {
			v25 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len9 = v25;
		if(len9 == 0) {
			_val = null;
		} else {
			--len9;
			var s8 = ctx.input.getString(ctx.inPos,len9);
			ctx.inPos += len9;
			_val = s8;
		}
		return vdom_Message.SetAttr(_id9,_att,_val);
	case 11:
		var v26 = ctx.input.b[ctx.inPos++];
		if(v26 == 128) {
			v26 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _id10 = v26;
		var _st;
		var v27 = ctx.input.b[ctx.inPos++];
		if(v27 == 128) {
			v27 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len10 = v27;
		if(len10 == 0) {
			_st = null;
		} else {
			--len10;
			var s9 = ctx.input.getString(ctx.inPos,len10);
			ctx.inPos += len10;
			_st = s9;
		}
		var _val1;
		var v28 = ctx.input.b[ctx.inPos++];
		if(v28 == 128) {
			v28 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len11 = v28;
		if(len11 == 0) {
			_val1 = null;
		} else {
			--len11;
			var s10 = ctx.input.getString(ctx.inPos,len11);
			ctx.inPos += len11;
			_val1 = s10;
		}
		return vdom_Message.SetStyle(_id10,_st,_val1);
	case 12:
		var v29 = ctx.input.b[ctx.inPos++];
		if(v29 == 128) {
			v29 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _id11 = v29;
		var _name4;
		var v30 = ctx.input.b[ctx.inPos++];
		if(v30 == 128) {
			v30 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len12 = v30;
		if(len12 == 0) {
			_name4 = null;
		} else {
			--len12;
			var s11 = ctx.input.getString(ctx.inPos,len12);
			ctx.inPos += len12;
			_name4 = s11;
		}
		return vdom_Message.Trigger(_id11,_name4);
	case 13:
		var v31 = ctx.input.b[ctx.inPos++];
		if(v31 == 128) {
			v31 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _id12 = v31;
		var _name5;
		var v32 = ctx.input.b[ctx.inPos++];
		if(v32 == 128) {
			v32 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len13 = v32;
		if(len13 == 0) {
			_name5 = null;
		} else {
			--len13;
			var s12 = ctx.input.getString(ctx.inPos,len13);
			ctx.inPos += len13;
			_name5 = s12;
		}
		var _args;
		var e01;
		var v33 = ctx.input.b[ctx.inPos++];
		if(v33 == 128) {
			v33 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len14 = v33;
		if(len14 == 0) {
			_args = null;
		} else {
			--len14;
			var a1 = [];
			var _g11 = 0;
			var _g2 = len14;
			while(_g11 < _g2) {
				var i1 = _g11++;
				e01 = ctx.getDynamic();
				a1[i1] = e01;
			}
			_args = a1;
		}
		var _eid1;
		if(ctx.input.b[ctx.inPos++] == 0) {
			_eid1 = null;
		} else {
			var v34 = ctx.input.b[ctx.inPos++];
			if(v34 == 128) {
				v34 = ctx.input.getInt32(ctx.inPos);
				ctx.inPos += 4;
			}
			_eid1 = v34;
		}
		return vdom_Message.Special(_id12,_name5,_args,_eid1);
	case 14:
		var v35 = ctx.input.b[ctx.inPos++];
		if(v35 == 128) {
			v35 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _id13 = v35;
		var _name6;
		var v36 = ctx.input.b[ctx.inPos++];
		if(v36 == 128) {
			v36 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len15 = v36;
		if(len15 == 0) {
			_name6 = null;
		} else {
			--len15;
			var s13 = ctx.input.getString(ctx.inPos,len15);
			ctx.inPos += len15;
			_name6 = s13;
		}
		var _dur;
		if(ctx.input.b[ctx.inPos++] == 0) {
			_dur = null;
		} else {
			var v37 = ctx.input.getFloat(ctx.inPos);
			ctx.inPos += 4;
			_dur = v37;
		}
		return vdom_Message.Anim(_id13,_name6,_dur);
	case 15:
		var v38 = ctx.input.b[ctx.inPos++];
		if(v38 == 128) {
			v38 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _id14 = v38;
		var _events;
		var e02;
		var v39 = ctx.input.b[ctx.inPos++];
		if(v39 == 128) {
			v39 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len16 = v39;
		if(len16 == 0) {
			_events = null;
		} else {
			--len16;
			var a2 = [];
			var _g12 = 0;
			var _g3 = len16;
			while(_g12 < _g3) {
				var i2 = _g12++;
				var v40 = ctx.input.b[ctx.inPos++];
				if(v40 == 128) {
					v40 = ctx.input.getInt32(ctx.inPos);
					ctx.inPos += 4;
				}
				e02 = v40;
				a2[i2] = e02;
			}
			_events = a2;
		}
		return vdom_Message.Dispose(_id14,_events);
	case 16:
		var _events1;
		var e03;
		var v41 = ctx.input.b[ctx.inPos++];
		if(v41 == 128) {
			v41 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len17 = v41;
		if(len17 == 0) {
			_events1 = null;
		} else {
			--len17;
			var a3 = [];
			var _g13 = 0;
			var _g4 = len17;
			while(_g13 < _g4) {
				var i3 = _g13++;
				var v42 = ctx.input.b[ctx.inPos++];
				if(v42 == 128) {
					v42 = ctx.input.getInt32(ctx.inPos);
					ctx.inPos += 4;
				}
				e03 = v42;
				a3[i3] = e03;
			}
			_events1 = a3;
		}
		return vdom_Message.Unbind(_events1);
	case 17:
		var _msg;
		var e04;
		var v43 = ctx.input.b[ctx.inPos++];
		if(v43 == 128) {
			v43 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len18 = v43;
		if(len18 == 0) {
			_msg = null;
		} else {
			--len18;
			var a4 = [];
			var _g14 = 0;
			var _g5 = len18;
			while(_g14 < _g5) {
				var i4 = _g14++;
				var __e = hxbit_enumSer_vdom_$Message.doUnserialize(ctx);
				e04 = __e;
				a4[i4] = e04;
			}
			_msg = a4;
		}
		return vdom_Message.Group(_msg);
	case 18:
		var v44 = ctx.input.b[ctx.inPos++];
		if(v44 == 128) {
			v44 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _id15 = v44;
		var _value = ctx.getDynamic();
		return vdom_Message.SetVal(_id15,_value);
	default:
		throw new js__$Boot_HaxeError("Invalid enum index " + b);
	}
};
hxbit_enumSer_vdom_$Message.getSchema = function() {
	var s = new hxbit_Schema();
	var s1 = s.fieldsTypes;
	var _g = [];
	var v;
	var v1;
	var v2;
	var t = hxbit_PropTypeDesc.PArray(hxbit_PropTypeDesc.PObj([{ name : "name", opt : false, type : hxbit_PropTypeDesc.PString},{ name : "value", opt : false, type : hxbit_PropTypeDesc.PString}]));
	_g.push({ name : "", type : t, opt : false});
	s1.push(hxbit_PropTypeDesc.PObj(_g));
	s.fieldsNames.push("Create");
	var s2 = s.fieldsTypes;
	var _g1 = [];
	var v3;
	var v4;
	var t1 = hxbit_PropTypeDesc.PString;
	_g1.push({ name : "", type : t1, opt : false});
	s2.push(hxbit_PropTypeDesc.PObj(_g1));
	s.fieldsNames.push("AddClass");
	var s3 = s.fieldsTypes;
	var _g2 = [];
	var v5;
	var v6;
	var t2 = hxbit_PropTypeDesc.PString;
	_g2.push({ name : "", type : t2, opt : false});
	s3.push(hxbit_PropTypeDesc.PObj(_g2));
	s.fieldsNames.push("RemoveClass");
	var s4 = s.fieldsTypes;
	var _g3 = [];
	var v7;
	var v8;
	var t3 = hxbit_PropTypeDesc.PInt;
	_g3.push({ name : "", type : t3, opt : false});
	s4.push(hxbit_PropTypeDesc.PObj(_g3));
	s.fieldsNames.push("Append");
	var s5 = s.fieldsTypes;
	var _g4 = [];
	var v9;
	var v10;
	var v11;
	var t4 = hxbit_PropTypeDesc.PInt;
	_g4.push({ name : "", type : t4, opt : false});
	s5.push(hxbit_PropTypeDesc.PObj(_g4));
	s.fieldsNames.push("InsertAt");
	var s6 = s.fieldsTypes;
	var _g5 = [];
	var v12;
	var v13;
	var v14;
	var t5 = hxbit_PropTypeDesc.PNull(hxbit_PropTypeDesc.PInt);
	_g5.push({ name : "", type : t5, opt : false});
	s6.push(hxbit_PropTypeDesc.PObj(_g5));
	s.fieldsNames.push("CreateText");
	var s7 = s.fieldsTypes;
	var _g6 = [];
	var v15;
	var t6 = hxbit_PropTypeDesc.PInt;
	_g6.push({ name : "", type : t6, opt : false});
	s7.push(hxbit_PropTypeDesc.PObj(_g6));
	s.fieldsNames.push("Reset");
	var s8 = s.fieldsTypes;
	var _g7 = [];
	var v16;
	var t7 = hxbit_PropTypeDesc.PInt;
	_g7.push({ name : "", type : t7, opt : false});
	s8.push(hxbit_PropTypeDesc.PObj(_g7));
	s.fieldsNames.push("Remove");
	var s9 = s.fieldsTypes;
	var _g8 = [];
	var v17;
	var v18;
	var v19;
	var t8 = hxbit_PropTypeDesc.PInt;
	_g8.push({ name : "", type : t8, opt : false});
	s9.push(hxbit_PropTypeDesc.PObj(_g8));
	s.fieldsNames.push("Event");
	var s10 = s.fieldsTypes;
	var _g9 = [];
	var v20;
	var v21;
	var v22;
	var t9 = hxbit_PropTypeDesc.PString;
	_g9.push({ name : "", type : t9, opt : false});
	s10.push(hxbit_PropTypeDesc.PObj(_g9));
	s.fieldsNames.push("SetAttr");
	var s11 = s.fieldsTypes;
	var _g10 = [];
	var v23;
	var v24;
	var v25;
	var t10 = hxbit_PropTypeDesc.PString;
	_g10.push({ name : "", type : t10, opt : false});
	s11.push(hxbit_PropTypeDesc.PObj(_g10));
	s.fieldsNames.push("SetStyle");
	var s12 = s.fieldsTypes;
	var _g11 = [];
	var v26;
	var v27;
	var t11 = hxbit_PropTypeDesc.PString;
	_g11.push({ name : "", type : t11, opt : false});
	s12.push(hxbit_PropTypeDesc.PObj(_g11));
	s.fieldsNames.push("Trigger");
	var s13 = s.fieldsTypes;
	var _g12 = [];
	var v28;
	var v29;
	var v30;
	var v31;
	var t12 = hxbit_PropTypeDesc.PNull(hxbit_PropTypeDesc.PInt);
	_g12.push({ name : "", type : t12, opt : false});
	s13.push(hxbit_PropTypeDesc.PObj(_g12));
	s.fieldsNames.push("Special");
	var s14 = s.fieldsTypes;
	var _g13 = [];
	var v32;
	var v33;
	var v34;
	var t13 = hxbit_PropTypeDesc.PNull(hxbit_PropTypeDesc.PFloat);
	_g13.push({ name : "", type : t13, opt : false});
	s14.push(hxbit_PropTypeDesc.PObj(_g13));
	s.fieldsNames.push("Anim");
	var s15 = s.fieldsTypes;
	var _g14 = [];
	var v35;
	var v36;
	var t14 = hxbit_PropTypeDesc.PArray(hxbit_PropTypeDesc.PInt);
	_g14.push({ name : "", type : t14, opt : false});
	s15.push(hxbit_PropTypeDesc.PObj(_g14));
	s.fieldsNames.push("Dispose");
	var s16 = s.fieldsTypes;
	var _g15 = [];
	var v37;
	var t15 = hxbit_PropTypeDesc.PArray(hxbit_PropTypeDesc.PInt);
	_g15.push({ name : "", type : t15, opt : false});
	s16.push(hxbit_PropTypeDesc.PObj(_g15));
	s.fieldsNames.push("Unbind");
	var s17 = s.fieldsTypes;
	var _g16 = [];
	var v38;
	var t16 = hxbit_PropTypeDesc.PArray(hxbit_PropTypeDesc.PEnum("vdom.Message"));
	_g16.push({ name : "", type : t16, opt : false});
	s17.push(hxbit_PropTypeDesc.PObj(_g16));
	s.fieldsNames.push("Group");
	var s18 = s.fieldsTypes;
	var _g17 = [];
	var v39;
	var v40;
	var t17 = hxbit_PropTypeDesc.PDynamic;
	_g17.push({ name : "", type : t17, opt : false});
	s18.push(hxbit_PropTypeDesc.PObj(_g17));
	s.fieldsNames.push("SetVal");
	return s;
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = ["js","Boot"];
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if((o instanceof Array)) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if((o instanceof cl)) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if((o instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = ["js","Browser"];
js_Browser.getLocalStorage = function() {
	try {
		var s = window.localStorage;
		s.getItem("");
		if(s.length == 0) {
			var key = "_hx_" + Math.random();
			s.setItem(key,key);
			s.removeItem(key);
		}
		return s;
	} catch( e ) {
		var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
js_Browser.alert = function(v) {
	window.alert(js_Boot.__string_rec(v,""));
};
var js_Lib = function() { };
$hxClasses["js.Lib"] = js_Lib;
js_Lib.__name__ = ["js","Lib"];
js_Lib.debug = function() {
	debugger;
};
js_Lib.alert = function(v) {
	alert(js_Boot.__string_rec(v,""));
};
js_Lib["eval"] = function(code) {
	return eval(code);
};
js_Lib.get_undefined = function() {
	return undefined;
};
js_Lib.rethrow = function() {
};
js_Lib.getOriginalException = function() {
	return null;
};
var js_Selection = function(doc) {
	this.doc = doc;
};
$hxClasses["js.Selection"] = js_Selection;
js_Selection.__name__ = ["js","Selection"];
js_Selection.prototype = {
	insert: function(left,text,right) {
		this.doc.focus();
		if(this.doc.selectionStart != null) {
			var top = this.doc.scrollTop;
			var start = this.doc.selectionStart;
			var end = this.doc.selectionEnd;
			var tmp = Std.string(this.doc.value.substr(0,start)) + left + text + right;
			var tmp1 = Std.string(this.doc.value.substr(end));
			this.doc.value = tmp + tmp1;
			this.doc.selectionStart = start + left.length;
			this.doc.selectionEnd = start + left.length + text.length;
			this.doc.scrollTop = top;
			return;
		}
		var range = js_Lib.document.selection.createRange();
		range.text = left + text + right;
		range.moveStart("character",-text.length - right.length);
		range.moveEnd("character",-right.length);
		range.select();
	}
	,__class__: js_Selection
};
var js_html__$CanvasElement_CanvasUtil = function() { };
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
js_html__$CanvasElement_CanvasUtil.__name__ = ["js","html","_CanvasElement","CanvasUtil"];
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var name = "webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	var name1 = "experimental-webgl";
	var ctx1 = canvas.getContext(name1,attribs);
	if(ctx1 != null) {
		return ctx1;
	}
	return null;
};
var js_node_Fs = require("fs");
var js_node_Net = require("net");
var js_node_buffer_Buffer = require("buffer").Buffer;
var js_node_webkit_App = require("nw.gui").App;
var js_node_webkit_Clipboard = require("nw.gui").Clipboard;
var js_node_webkit_Menu = require("nw.gui").Menu;
var js_node_webkit_MenuItem = require("nw.gui").MenuItem;
var js_node_webkit_Shell = require("nw.gui").Shell;
var js_node_webkit_Window = require("nw.gui").Window;
var lvl_Image = function(w,h) {
	this.originY = 0;
	this.originX = 0;
	this.width = w;
	this.height = h;
	this.canvas = window.document.createElement("canvas");
	this.origin = this.canvas;
	this.canvas.width = w;
	this.canvas.height = h;
	this.init();
};
$hxClasses["lvl.Image"] = lvl_Image;
lvl_Image.__name__ = ["lvl","Image"];
lvl_Image.clearCache = function(url) {
	lvl_Image.cache.remove(url);
};
lvl_Image.load = function(url,callb,onError,forceReload) {
	var _this = lvl_Image.cache;
	var i = __map_reserved[url] != null ? _this.getReserved(url) : _this.h[url];
	if(i != null && !forceReload) {
		var im = new lvl_Image(i.width,i.height);
		im.ctx.drawImage(i,0,0);
		im.origin = i;
		callb(im);
		return;
	}
	i = window.document.createElement("img");
	i.onload = function(_) {
		var _this1 = lvl_Image.cache;
		var i2 = __map_reserved[url] != null ? _this1.getReserved(url) : _this1.h[url];
		if(i2 == null || forceReload) {
			var _this2 = lvl_Image.cache;
			if(__map_reserved[url] != null) {
				_this2.setReserved(url,i);
			} else {
				_this2.h[url] = i;
			}
		} else {
			i = i2;
		}
		var im1 = new lvl_Image(i.width,i.height);
		im1.ctx.drawImage(i,0,0);
		im1.origin = i;
		callb(im1);
	};
	i.onerror = function(_1) {
		if(onError != null) {
			onError();
			return;
		}
		var i1 = new lvl_Image(16,16);
		i1.fill(-65281);
		callb(i1);
	};
	i.src = "file://" + url;
};
lvl_Image.fromCanvas = function(c) {
	var i = new lvl_Image(0,0);
	i.width = c.width;
	i.height = c.height;
	i.canvas = i.origin = c;
	i.init();
	return i;
};
lvl_Image.prototype = {
	get_smooth: function() {
		return this.ctx.imageSmoothingEnabled;
	}
	,set_smooth: function(v) {
		return this.ctx.imageSmoothingEnabled = v;
	}
	,get_alpha: function() {
		return this.ctx.globalAlpha;
	}
	,set_alpha: function(v) {
		return this.ctx.globalAlpha = v;
	}
	,init: function() {
		this.ctx = this.canvas.getContext("2d",null);
		this.ctx.imageSmoothingEnabled = false;
	}
	,getColor: function(color) {
		if(color >>> 24 == 255) {
			return "#" + StringTools.hex(color & 16777215,6);
		} else {
			return "rgba(" + (color >> 16 & 255) + "," + (color >> 8 & 255) + "," + (color & 255) + "," + (color >>> 24) / 255 + ")";
		}
	}
	,getCanvas: function() {
		return this.canvas;
	}
	,clear: function() {
		this.ctx.clearRect(0,0,this.width,this.height);
		this.invalidate();
	}
	,invalidate: function() {
		if(this.origin == this.canvas) {
			return;
		}
		this.origin = this.canvas;
		this.originX = this.originY = 0;
		this.origin.texture = null;
	}
	,fill: function(color) {
		this.ctx.fillStyle = this.getColor(color);
		this.ctx.fillRect(0,0,this.width,this.height);
		this.invalidate();
	}
	,fillRect: function(x,y,w,h,color) {
		this.ctx.fillStyle = this.getColor(color);
		this.ctx.fillRect(x,y,w,h);
		this.invalidate();
	}
	,sub: function(x,y,w,h) {
		var i = new lvl_Image(w,h);
		i.ctx.drawImage(this.origin,x,y,w,h,0,0,w,h);
		i.origin = this.origin;
		i.originX = this.originX + x;
		i.originY = this.originY + y;
		return i;
	}
	,text: function(text,x,y,color) {
		if(color == null) {
			color = -1;
		}
		this.ctx.fillStyle = this.getColor(color);
		this.ctx.fillText(text,x,y);
		this.invalidate();
	}
	,draw: function(i,x,y) {
		this.ctx.drawImage(i.origin,i.originX,i.originY,i.width,i.height,x,y,i.width,i.height);
		this.invalidate();
	}
	,drawMat: function(i,m) {
		this.ctx.setTransform(m.a,m.b,m.c,m.d,m.x,m.y);
		this.draw(i,0,0);
		this.ctx.setTransform(1,0,0,1,0,0);
	}
	,drawScaled: function(i,x,y,width,height) {
		this.ctx.drawImage(i.origin,i.originX,i.originY,i.width,i.height,x,y,width,height);
		this.invalidate();
	}
	,drawSub: function(i,srcX,srcY,srcW,srcH,x,y,dstW,dstH) {
		if(dstH == null) {
			dstH = -1;
		}
		if(dstW == null) {
			dstW = -1;
		}
		if(dstW < 0) {
			dstW = srcW;
		}
		if(dstH < 0) {
			dstH = srcH;
		}
		this.ctx.drawImage(i.origin,srcX + i.originX,srcY + i.originY,srcW,srcH,x,y,dstW,dstH);
		this.invalidate();
	}
	,copyFrom: function(i) {
		this.ctx.fillStyle = "rgba(0,0,0,0)";
		this.ctx.fillRect(0,0,this.width,this.height);
		this.ctx.drawImage(i.origin,i.originX,i.originY,i.width,i.height,0,0,this.width,this.height);
		this.invalidate();
	}
	,isBlank: function() {
		var i = this.ctx.getImageData(0,0,this.width,this.height);
		var _g1 = 0;
		var _g = this.width * this.height * 4;
		while(_g1 < _g) {
			var k = _g1++;
			if(i.data[k] != 0) {
				return false;
			}
		}
		return true;
	}
	,getPixel: function(x,y) {
		var i = this.ctx.getImageData(x,y,1,1);
		return i.data[3] << 24 | i.data[0] << 16 | i.data[1] << 8 | i.data[2];
	}
	,setSize: function(width,height) {
		if(width == this.width && height == this.height) {
			return;
		}
		this.canvas.width = width;
		this.canvas.height = height;
		this.canvas.setAttribute("width",width + "px");
		this.canvas.setAttribute("height",height + "px");
		this.width = width;
		this.height = height;
		this.init();
		this.invalidate();
	}
	,resize: function(width,height) {
		if(width == this.width && height == this.height) {
			return;
		}
		var c = window.document.createElement("canvas");
		c.width = width;
		c.height = height;
		var ctx2 = c.getContext("2d",null);
		ctx2.imageSmoothingEnabled = this.ctx.imageSmoothingEnabled;
		ctx2.drawImage(this.canvas,0,0,this.width,this.height,0,0,width,height);
		this.ctx = ctx2;
		this.canvas = c;
		this.width = width;
		this.height = height;
		this.invalidate();
	}
	,__class__: lvl_Image
};
var lvl_Image3D = function(w,h) {
	this.scrollY = 0;
	this.scrollX = 0;
	this.alphaValue = 1.;
	this.zoom = 1;
	lvl_Image.call(this,w,h);
	this.viewport = window.document.createElement("div");
	this.viewport.style.backgroundColor = "black";
	this.viewport.style.overflow = "hidden";
	this.viewport.appendChild(this.canvas);
	this.canvas.width = 2048;
	this.canvas.height = 2048;
	this.canvas.setAttribute("width",2048 + "px");
	this.canvas.setAttribute("height",2048 + "px");
	this.colorCache = new haxe_ds_IntMap();
	this.curDraw = new Float32Array(174768);
	this.curIndex = new Uint16Array(65536);
};
$hxClasses["lvl.Image3D"] = lvl_Image3D;
lvl_Image3D.__name__ = ["lvl","Image3D"];
lvl_Image3D.getInstance = function() {
	if(lvl_Image3D.inst == null) {
		lvl_Image3D.inst = new lvl_Image3D(0,0);
	}
	return lvl_Image3D.inst;
};
lvl_Image3D.fromCanvas = function(c) {
	var i = new lvl_Image3D(0,0);
	i.width = c.width;
	i.height = c.height;
	i.canvas = i.origin = c;
	i.init();
	return i;
};
lvl_Image3D.__super__ = lvl_Image;
lvl_Image3D.prototype = $extend(lvl_Image.prototype,{
	init: function() {
		this.dispose();
		this.gl = this.canvas.gl;
		if(this.gl != null) {
			this.initScale();
			return;
		}
		this.gl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.canvas,{ alpha : false, antialias : false});
		if(this.gl == null) {
			js_Browser.alert("Cannot initialize WebGL context ! (windows user : install DirectX redist)");
		}
		this.canvas.gl = this.gl;
		this.gl.disable(2884);
		this.gl.disable(2929);
		var vertex = this.gl.createShader(35633);
		this.gl.shaderSource(vertex,"\r\n\t\t\tvarying vec2 tuv;\r\n\t\t\tattribute vec2 pos;\r\n\t\t\tattribute vec2 uv;\r\n\t\t\tuniform vec2 scroll;\r\n\t\t\tvoid main() {\r\n\t\t\t\ttuv = uv;\r\n\t\t\t\tgl_Position = vec4(pos + vec2(-1.,1.) + scroll, 0, 1);\r\n\t\t\t}\r\n\t\t");
		this.gl.compileShader(vertex);
		if(this.gl.getShaderParameter(vertex,35713) != 1) {
			throw new js__$Boot_HaxeError(this.gl.getShaderInfoLog(vertex));
		}
		var frag = this.gl.createShader(35632);
		this.gl.shaderSource(frag,"\r\n\t\t\tvarying mediump vec2 tuv;\r\n\t\t\tuniform sampler2D texture;\r\n\t\t\tuniform lowp float alpha;\r\n\t\t\tvoid main() {\r\n\t\t\t\tlowp vec4 color = texture2D(texture, tuv);\r\n\t\t\t\tcolor.a *= alpha;\r\n\t\t\t\tgl_FragColor = color;\r\n\t\t\t}\r\n\t\t");
		this.gl.compileShader(frag);
		if(this.gl.getShaderParameter(frag,35713) != 1) {
			throw new js__$Boot_HaxeError(this.gl.getShaderInfoLog(frag));
		}
		var p = this.gl.createProgram();
		this.gl.attachShader(p,vertex);
		this.gl.attachShader(p,frag);
		this.gl.linkProgram(p);
		if(this.gl.getProgramParameter(p,35714) != 1) {
			throw new js__$Boot_HaxeError(this.gl.getProgramInfoLog(p));
		}
		this.gl.useProgram(p);
		this.gl.enableVertexAttribArray(0);
		this.gl.enableVertexAttribArray(1);
		this.gl.enable(3042);
		this.gl.blendFunc(770,771);
		this.uniScroll = this.gl.getUniformLocation(p,"scroll");
		this.uniTex = this.gl.getUniformLocation(p,"texture");
		this.uniAlpha = this.gl.getUniformLocation(p,"alpha");
		this.attribPos = this.gl.getAttribLocation(p,"pos");
		this.attribUV = this.gl.getAttribLocation(p,"uv");
		this.initScale();
	}
	,dispose: function() {
		if(this.texturesObjects != null) {
			var _g = 0;
			var _g1 = this.texturesObjects;
			while(_g < _g1.length) {
				var o = _g1[_g];
				++_g;
				this.gl.deleteTexture(o.texture);
				o.texture = null;
			}
		}
		this.texturesObjects = [];
		if(this.allocatedBuffers != null) {
			var _g2 = 0;
			var _g11 = this.allocatedBuffers;
			while(_g2 < _g11.length) {
				var b = _g11[_g2];
				++_g2;
				this.gl.deleteBuffer(b);
			}
			this.allocatedBuffers = [];
		}
	}
	,get_alpha: function() {
		return this.alphaValue;
	}
	,set_alpha: function(v) {
		if(this.alphaValue == v) {
			return v;
		}
		this.endDraw();
		return this.alphaValue = v;
	}
	,beginDraw: function(t) {
		if(t != this.curTexture) {
			this.endDraw();
			this.curTexture = t;
			this.drawPos = 0;
			this.indexPos = 0;
		}
	}
	,getColorImage: function(color) {
		var i = this.colorCache.h[color];
		if(i != null) {
			return i;
		}
		i = new lvl_Image(1,1);
		i.fill(color);
		this.colorCache.h[color] = i;
		return i;
	}
	,getTexture: function(i) {
		var t = i.origin.texture;
		if(t != null) {
			return t;
		}
		t = this.gl.createTexture();
		i.origin.texture = t;
		t.origin = i.origin;
		this.gl.bindTexture(3553,t);
		this.gl.texParameteri(3553,10240,9728);
		this.gl.texParameteri(3553,10241,9728);
		this.gl.texParameteri(3553,10242,33071);
		this.gl.texParameteri(3553,10243,33071);
		this.gl.texImage2D(3553,0,6408,6408,5121,i.origin);
		this.gl.bindTexture(3553,null);
		this.texturesObjects.push(i.origin);
		t.width = i.origin.width;
		t.height = i.origin.height;
		return t;
	}
	,drawMat: function(i,m) {
		var _gthis = this;
		this.beginDraw(this.getTexture(i));
		var w = i.width;
		var h = i.height;
		var pos = this.drawPos >> 2;
		this.curDraw[this.drawPos++] = (0 * m.a + 0 * m.c + m.x) * _gthis.scaleX;
		this.curDraw[this.drawPos++] = (0 * m.b + 0 * m.d + m.y) * _gthis.scaleY;
		this.curDraw[this.drawPos++] = (i.originX + 0.001) / _gthis.curTexture.width;
		this.curDraw[this.drawPos++] = i.originY / _gthis.curTexture.height;
		this.curDraw[this.drawPos++] = (w * m.a + 0 * m.c + m.x) * _gthis.scaleX;
		this.curDraw[this.drawPos++] = (w * m.b + 0 * m.d + m.y) * _gthis.scaleY;
		this.curDraw[this.drawPos++] = (i.originX + i.width) / _gthis.curTexture.width;
		this.curDraw[this.drawPos++] = i.originY / _gthis.curTexture.height;
		this.curDraw[this.drawPos++] = (0 * m.a + h * m.c + m.x) * _gthis.scaleX;
		this.curDraw[this.drawPos++] = (0 * m.b + h * m.d + m.y) * _gthis.scaleY;
		this.curDraw[this.drawPos++] = (i.originX + 0.001) / _gthis.curTexture.width;
		this.curDraw[this.drawPos++] = (i.originY + i.height + -0.01) / _gthis.curTexture.height;
		this.curDraw[this.drawPos++] = (w * m.a + h * m.c + m.x) * _gthis.scaleX;
		this.curDraw[this.drawPos++] = (w * m.b + h * m.d + m.y) * _gthis.scaleY;
		this.curDraw[this.drawPos++] = (i.originX + i.width) / _gthis.curTexture.width;
		this.curDraw[this.drawPos++] = (i.originY + i.height + -0.01) / _gthis.curTexture.height;
		this.curIndex[this.indexPos++] = pos;
		this.curIndex[this.indexPos++] = pos + 1;
		this.curIndex[this.indexPos++] = pos + 2;
		this.curIndex[this.indexPos++] = pos + 1;
		this.curIndex[this.indexPos++] = pos + 3;
		this.curIndex[this.indexPos++] = pos + 2;
		if(this.indexPos > 65500) {
			this.endDraw();
		}
	}
	,draw: function(i,x,y) {
		var _gthis = this;
		this.beginDraw(this.getTexture(i));
		var x1 = x;
		var y1 = y;
		var w = i.width;
		var h = i.height;
		var pos = this.drawPos >> 2;
		this.curDraw[this.drawPos++] = x1 * _gthis.scaleX;
		this.curDraw[this.drawPos++] = y1 * _gthis.scaleY;
		this.curDraw[this.drawPos++] = (i.originX + 0.001) / _gthis.curTexture.width;
		this.curDraw[this.drawPos++] = i.originY / _gthis.curTexture.height;
		this.curDraw[this.drawPos++] = (x1 + w) * _gthis.scaleX;
		this.curDraw[this.drawPos++] = y1 * _gthis.scaleY;
		this.curDraw[this.drawPos++] = (i.originX + i.width) / _gthis.curTexture.width;
		this.curDraw[this.drawPos++] = i.originY / _gthis.curTexture.height;
		this.curDraw[this.drawPos++] = x1 * _gthis.scaleX;
		this.curDraw[this.drawPos++] = (y1 + h) * _gthis.scaleY;
		this.curDraw[this.drawPos++] = (i.originX + 0.001) / _gthis.curTexture.width;
		this.curDraw[this.drawPos++] = (i.originY + i.height + -0.01) / _gthis.curTexture.height;
		this.curDraw[this.drawPos++] = (x1 + w) * _gthis.scaleX;
		this.curDraw[this.drawPos++] = (y1 + h) * _gthis.scaleY;
		this.curDraw[this.drawPos++] = (i.originX + i.width) / _gthis.curTexture.width;
		this.curDraw[this.drawPos++] = (i.originY + i.height + -0.01) / _gthis.curTexture.height;
		this.curIndex[this.indexPos++] = pos;
		this.curIndex[this.indexPos++] = pos + 1;
		this.curIndex[this.indexPos++] = pos + 2;
		this.curIndex[this.indexPos++] = pos + 1;
		this.curIndex[this.indexPos++] = pos + 3;
		this.curIndex[this.indexPos++] = pos + 2;
		if(this.indexPos > 65500) {
			this.endDraw();
		}
	}
	,endDraw: function() {
		var _gthis = this;
		if(this.curTexture == null || this.indexPos == 0) {
			return;
		}
		var index = this.gl.createBuffer();
		var vertex = this.gl.createBuffer();
		this.gl.bindBuffer(34962,vertex);
		this.gl.bufferData(34962,this.curDraw.subarray(0,this.drawPos),35044);
		this.gl.bindBuffer(34963,index);
		this.gl.bufferData(34963,this.curIndex.subarray(0,this.indexPos),35044);
		var alpha = this.get_alpha();
		var curTexture = this.curTexture;
		var indexPos = this.indexPos;
		this.drawCommands.push(function() {
			_gthis.gl.bindBuffer(34962,vertex);
			_gthis.gl.bindBuffer(34963,index);
			_gthis.gl.vertexAttribPointer(_gthis.attribPos,2,5126,false,16,0);
			_gthis.gl.vertexAttribPointer(_gthis.attribUV,2,5126,false,16,8);
			_gthis.gl.activeTexture(33984);
			_gthis.gl.uniform1i(_gthis.uniTex,0);
			_gthis.gl.uniform1f(_gthis.uniAlpha,alpha);
			_gthis.gl.bindTexture(3553,curTexture);
			_gthis.gl.drawElements(4,indexPos,5123,0);
		});
		this.allocatedBuffers.push(index);
		this.allocatedBuffers.push(vertex);
		this.indexPos = 0;
		this.drawPos = 0;
	}
	,setSize: function(w,h) {
		this.viewport.style.width = w + "px";
		this.viewport.style.height = h + "px";
		this.width = w;
		this.height = h;
	}
	,initScale: function() {
		this.scaleX = this.zoom / 2048 * 2;
		this.scaleY = this.zoom / 2048 * -2;
	}
	,fill: function(color) {
		var _gthis = this;
		this.gl.clearColor((color >> 16 & 255) / 255,(color >> 8 & 255) / 255,(color & 255) / 255,(color >>> 24) / 255);
		if(this.allocatedBuffers != null) {
			var _g = 0;
			var _g1 = this.allocatedBuffers;
			while(_g < _g1.length) {
				var b = _g1[_g];
				++_g;
				this.gl.deleteBuffer(b);
			}
		}
		this.allocatedBuffers = [];
		this.drawCommands = [function() {
			_gthis.gl.clear(16384);
		}];
	}
	,fillRect: function(x,y,w,h,color) {
		var i = this.getColorImage(color);
		i.width = w;
		i.height = h;
		this.draw(i,x,y);
	}
	,flush: function() {
		var _gthis = this;
		this.endDraw();
		this.drawCommands.push(function() {
			_gthis.gl.bindBuffer(34962,null);
			_gthis.gl.bindBuffer(34963,null);
			_gthis.gl.bindTexture(3553,null);
			_gthis.gl.finish();
		});
		this.redraw();
	}
	,setScrollPos: function(x,y) {
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this.scrollX = x;
		this.scrollY = y;
		this.redraw();
	}
	,redraw: function() {
		this.gl.viewport(0,0,2048,2048);
		this.canvas.style.marginLeft = (this.scrollX | 0) + "px";
		this.canvas.style.marginTop = (this.scrollY | 0) + "px";
		this.gl.uniform2f(this.uniScroll,-this.scrollX * 2 / 2048,this.scrollY * 2 / 2048);
		if(this.drawCommands != null) {
			var _g = 0;
			var _g1 = this.drawCommands;
			while(_g < _g1.length) {
				var d = _g1[_g];
				++_g;
				d();
			}
		}
	}
	,set_zoom: function(z) {
		this.zoom = z;
		this.initScale();
		return z;
	}
	,__class__: lvl_Image3D
});
var lvl_LayerInnerData = $hxClasses["lvl.LayerInnerData"] = { __ename__ : ["lvl","LayerInnerData"], __constructs__ : ["Layer","Objects","Tiles","TileInstances"] };
lvl_LayerInnerData.Layer = function(a) { var $x = ["Layer",0,a]; $x.__enum__ = lvl_LayerInnerData; $x.toString = $estr; return $x; };
lvl_LayerInnerData.Objects = function(idCol,objs) { var $x = ["Objects",1,idCol,objs]; $x.__enum__ = lvl_LayerInnerData; $x.toString = $estr; return $x; };
lvl_LayerInnerData.Tiles = function(t,data) { var $x = ["Tiles",2,t,data]; $x.__enum__ = lvl_LayerInnerData; $x.toString = $estr; return $x; };
lvl_LayerInnerData.TileInstances = function(t,insts) { var $x = ["TileInstances",3,t,insts]; $x.__enum__ = lvl_LayerInnerData; $x.toString = $estr; return $x; };
var lvl_LayerGfx = function(level) {
	this.height = 0;
	this.stride = 0;
	this.level = level;
};
$hxClasses["lvl.LayerGfx"] = lvl_LayerGfx;
lvl_LayerGfx.__name__ = ["lvl","LayerGfx"];
lvl_LayerGfx.prototype = {
	fromSheet: function(sheet,defColor) {
		var _gthis = this;
		this.blanks = [];
		if(sheet == null) {
			this.colors = [defColor];
			this.names = [""];
			return;
		}
		var idCol = null;
		var imageTags = [];
		var _g = 0;
		var _g1 = sheet.sheet.columns;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var _g2 = c.type;
			switch(_g2[1]) {
			case 0:
				idCol = c;
				break;
			case 7:
				if(this.images == null) {
					this.images = [];
				}
				var size = [this.level.tileSize];
				var _g3 = 0;
				var _g21 = sheet.sheet.lines.length;
				while(_g3 < _g21) {
					var idx = [_g3++];
					if(imageTags[idx[0]]) {
						continue;
					}
					var key = Reflect.field(sheet.sheet.lines[idx[0]],c.name);
					var idat = this.level.model.getImageData(key);
					if(idat == null) {
						var i = new lvl_Image(size[0],size[0]);
						i.text("#" + idx[0],0,12);
						this.images[idx[0]] = i;
						continue;
					}
					this.level.wait();
					imageTags[idx[0]] = true;
					lvl_Image.load(idat,(function(idx1,size1) {
						return function(i1) {
							i1.resize(size1[0],size1[0]);
							_gthis.images[idx1[0]] = i1;
							_gthis.level.waitDone();
						};
					})(idx,size));
				}
				break;
			case 11:
				var _g22 = [];
				var _g31 = 0;
				var _g4 = sheet.sheet.lines;
				while(_g31 < _g4.length) {
					var o = _g4[_g31];
					++_g31;
					var c1 = Reflect.field(o,c.name);
					_g22.push(c1 == null ? 0 : c1);
				}
				this.colors = _g22;
				break;
			case 14:
				if(this.images == null) {
					this.images = [];
				}
				var size2 = this.level.tileSize;
				var _g32 = 0;
				var _g23 = sheet.sheet.lines.length;
				while(_g32 < _g23) {
					var idx2 = [_g32++];
					if(imageTags[idx2[0]]) {
						continue;
					}
					var data = [Reflect.field(sheet.sheet.lines[idx2[0]],c.name)];
					if(data[0] == null && this.images[idx2[0]] != null) {
						continue;
					}
					if(data[0] == null) {
						var i2 = new lvl_Image(size2,size2);
						i2.text("#" + idx2[0],0,12);
						this.images[idx2[0]] = i2;
						continue;
					}
					this.level.wait();
					imageTags[idx2[0]] = true;
					lvl_Image.load(this.level.model.getAbsPath(data[0].file),(function(data1,idx3) {
						return function(i3) {
							var i21 = i3.sub(data1[0].x * data1[0].size,data1[0].y * data1[0].size,data1[0].size * (data1[0].width == null ? 1 : data1[0].width),data1[0].size * (data1[0].height == null ? 1 : data1[0].height));
							_gthis.images[idx3[0]] = i21;
							_gthis.blanks[idx3[0]] = i21.isBlank();
							_gthis.level.waitDone();
						};
					})(data,idx2));
					this.level.watch(data[0].file,(function(data2) {
						return function() {
							lvl_Image.clearCache(_gthis.level.model.getAbsPath(data2[0].file));
							_gthis.level.reload();
						};
					})(data));
				}
				break;
			default:
			}
		}
		this.names = [];
		this.stride = Math.ceil(Math.sqrt(sheet.sheet.lines.length));
		this.height = Math.ceil(sheet.sheet.lines.length / this.stride);
		this.idToIndex = new haxe_ds_StringMap();
		this.indexToId = [];
		var _g11 = 0;
		var _g5 = sheet.sheet.lines.length;
		while(_g11 < _g5) {
			var index = _g11++;
			var o1 = sheet.sheet.lines[index];
			var n = sheet.sheet.props.displayColumn != null ? Reflect.field(o1,sheet.sheet.props.displayColumn) : null;
			if((n == null || n == "") && idCol != null) {
				n = Reflect.field(o1,idCol.name);
			}
			if(n == null || n == "") {
				n = "#" + index;
			}
			if(idCol != null) {
				var id = Reflect.field(o1,idCol.name);
				if(id != null && id != "") {
					var _this = this.idToIndex;
					if(__map_reserved[id] != null) {
						_this.setReserved(id,index);
					} else {
						_this.h[id] = index;
					}
				}
				this.indexToId[index] = id;
			}
			this.names.push(n);
		}
	}
	,__class__: lvl_LayerGfx
};
var lvl_LayerData = function(level,name,p,target) {
	this.currentHeight = 1;
	this.currentWidth = 1;
	this.current = 0;
	this.lock = false;
	this.visible = true;
	lvl_LayerGfx.call(this,level);
	this.name = name;
	this.props = p;
	this.targetObj = target;
};
$hxClasses["lvl.LayerData"] = lvl_LayerData;
lvl_LayerData.__name__ = ["lvl","LayerData"];
lvl_LayerData.__super__ = lvl_LayerGfx;
lvl_LayerData.prototype = $extend(lvl_LayerGfx.prototype,{
	loadSheetData: function(sheet) {
		if(sheet == null && this.props.color == null) {
			this.props.color = 16711680;
			var _g = 0;
			var _g1 = this.level.sheet.sheet.lines;
			while(_g < _g1.length) {
				var o = _g1[_g];
				++_g;
				var props = o.props;
				if(props == null) {
					continue;
				}
				var _g2 = 0;
				var _g3 = props.layers;
				while(_g2 < _g3.length) {
					var l = _g3[_g2];
					++_g2;
					if(l.l == this.name && l.p.color != null) {
						this.props.color = l.p.color;
						props = null;
						break;
					}
				}
				if(props == null) {
					break;
				}
			}
		}
		this.sheet = sheet;
		this.fromSheet(sheet,this.props.color);
		this.loadState();
	}
	,enabled: function() {
		if(this.visible) {
			return !this.lock;
		} else {
			return false;
		}
	}
	,loadState: function() {
		var state;
		try {
			state = haxe_Unserializer.run(js_Browser.getLocalStorage().getItem(this.level.sheetPath + ":" + this.name));
		} catch( e ) {
			var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
			state = null;
		}
		if(state != null) {
			this.set_visible(state.visible);
			this.lock = !(!state.lock);
			this.floatCoord = this.hasFloatCoord && !state.lockGrid;
			if(state.current < (this.images != null ? this.images.length : this.names.length)) {
				this.set_current(state.current);
				if(this.current % this.stride + state.cw <= this.stride && (this.current / this.stride | 0) + state.ch <= this.height) {
					this.currentWidth = state.cw;
					this.currentHeight = state.ch;
				}
			}
		}
		this.stateLoaded = true;
	}
	,setLayerData: function(val) {
		if(val == null || val == "") {
			var _g = [];
			var _g2 = 0;
			var _g1 = this.level.width * this.level.height;
			while(_g2 < _g1) {
				var x = _g2++;
				_g.push(0);
			}
			this.data = lvl_LayerInnerData.Layer(_g);
		} else {
			var a = cdb_Lz4Reader.decodeString(val);
			if(a.length != this.level.width * this.level.height) {
				throw new js__$Boot_HaxeError("Invalid layer data");
			}
			var _g3 = [];
			var _g21 = 0;
			var _g11 = this.level.width * this.level.height;
			while(_g21 < _g11) {
				var i = _g21++;
				_g3.push(a.b[i]);
			}
			this.data = lvl_LayerInnerData.Layer(_g3);
		}
		if(this.sheet.sheet.lines.length > 256) {
			throw new js__$Boot_HaxeError("Too many lines");
		}
	}
	,getTileProp: function(mode) {
		if(this.tileProps == null) {
			return null;
		}
		var _g = 0;
		var _g1 = this.tileProps.sets;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.x + s.y * this.stride == this.current && s.t == mode) {
				return s;
			}
		}
		return null;
	}
	,getTileObjects: function() {
		var objs = new haxe_ds_IntMap();
		if(this.tileProps == null) {
			return objs;
		}
		var _g = 0;
		var _g1 = this.tileProps.sets;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			if(o.t == "object") {
				objs.h[o.x + o.y * this.stride] = o;
			}
		}
		return objs;
	}
	,getSelObjects: function() {
		if(this.tileProps == null) {
			return [];
		}
		var x = this.current % this.stride;
		var y = this.current / this.stride | 0;
		var out = [];
		var _g = 0;
		var _g1 = this.tileProps.sets;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			if(o.t == "object" && !(o.x >= x + this.currentWidth || o.y >= y + this.currentHeight || o.x + o.w <= x || o.y + o.h <= y)) {
				out.push(o);
			}
		}
		return out;
	}
	,setObjectsData: function(id,val) {
		this.data = lvl_LayerInnerData.Objects(id,val);
	}
	,setTilesData: function(val) {
		var _gthis = this;
		var file = val == null ? null : val.file;
		var size = val == null ? 16 : val.size;
		var data;
		if(val == null) {
			var _g = [];
			var _g2 = 0;
			var _g1 = this.level.width * this.level.height;
			while(_g2 < _g1) {
				var i = _g2++;
				_g.push(0);
			}
			data = _g;
		} else {
			data = cdb__$Types_TileLayerData_$Impl_$.decode(val.data);
		}
		var stride = val == null ? 0 : val.stride;
		var d = { file : file, size : size, stride : stride};
		this.images = [];
		this.data = lvl_LayerInnerData.Tiles(d,data);
		if(file == null) {
			if(this.props.mode != "tiles" && this.props.mode != null) {
				Reflect.deleteField(this.props,"mode");
			}
			var i1 = new lvl_Image(16,16);
			i1.fill(-65281);
			this.images.push(i1);
			this.loadState();
			return;
		}
		this.level.wait();
		this.level.loadAndSplit(file,size,function(w,h,images,blanks) {
			_gthis.images = images;
			_gthis.blanks = blanks;
			if(data[0] == 65535) {
				_gthis.props.mode = "objects";
			}
			var _g3 = _gthis.props.mode;
			if(_g3 == null) {
				var max = w * h;
				var _g11 = 0;
				var _g4 = data.length;
				while(_g11 < _g4) {
					var i2 = _g11++;
					var v = data[i2] - 1;
					if(v < 0) {
						continue;
					}
					var vx = v % stride;
					var vy = v / stride | 0;
					var v2 = vx + vy * w;
					if(vx >= w || vy >= h || blanks[v2]) {
						v2 = -1;
					}
					if(v != v2) {
						data[i2] = v2 + 1;
						_gthis.dirty = true;
					}
				}
			} else {
				switch(_g3) {
				case "ground":case "tiles":
					var max1 = w * h;
					var _g12 = 0;
					var _g5 = data.length;
					while(_g12 < _g5) {
						var i3 = _g12++;
						var v1 = data[i3] - 1;
						if(v1 < 0) {
							continue;
						}
						var vx1 = v1 % stride;
						var vy1 = v1 / stride | 0;
						var v21 = vx1 + vy1 * w;
						if(vx1 >= w || vy1 >= h || blanks[v21]) {
							v21 = -1;
						}
						if(v1 != v21) {
							data[i3] = v21 + 1;
							_gthis.dirty = true;
						}
					}
					break;
				case "objects":
					var insts = [];
					var p = 1;
					if(data[0] != 65535) {
						throw new js__$Boot_HaxeError("assert");
					}
					while(p < data.length) {
						var x = data[p++];
						var y = data[p++];
						var v3 = data[p++];
						var flip = (v3 & 32768) != 0;
						var rot = x >> 15 | y >> 15 << 1;
						v3 &= 32767;
						var x1 = (x & 32767) / _gthis.level.tileSize;
						var y1 = (y & 32767) / _gthis.level.tileSize;
						var vx2 = v3 % stride;
						var vy2 = v3 / stride | 0;
						var v22 = vx2 + vy2 * w;
						if(vx2 >= w || vy2 >= h || x1 >= _gthis.level.width || y1 >= _gthis.level.height) {
							_gthis.dirty = true;
							continue;
						}
						if(v3 != v22) {
							_gthis.dirty = true;
						}
						insts.push({ x : x1, y : y1, o : v22, flip : flip, rot : rot});
					}
					_gthis.data = lvl_LayerInnerData.TileInstances(d,insts);
					_gthis.hasRotFlip = true;
					_gthis.hasFloatCoord = _gthis.floatCoord = true;
					break;
				}
			}
			_gthis.stride = d.stride = w;
			_gthis.height = h;
			_gthis.tileProps = _gthis.level.palette.getTileProps(file,w,w * h);
			_gthis.loadState();
			_gthis.level.waitDone();
		});
	}
	,set_visible: function(v) {
		this.visible = v;
		if(this.comp != null) {
			this.comp.toggleClass("hidden",!this.visible);
		}
		return v;
	}
	,set_current: function(v) {
		this.current = v;
		this.currentWidth = 1;
		this.currentHeight = 1;
		this.saveState();
		return v;
	}
	,setCurrent: function(id,w,h) {
		if(this.current == id && this.currentWidth == w && this.currentHeight == h) {
			return;
		}
		this["current"] = id;
		this.currentWidth = w;
		this.currentHeight = h;
		this.saveState(false);
	}
	,saveState: function(sync) {
		if(sync == null) {
			sync = true;
		}
		if(!this.stateLoaded) {
			return;
		}
		if(sync && this.data != null) {
			var _g = this.data;
			switch(_g[1]) {
			case 2:
				var t = _g[2];
				var _g1 = 0;
				var _g11 = this.level.layers;
				while(_g1 < _g11.length) {
					var l = _g11[_g1];
					++_g1;
					if(l != this) {
						var _g2 = l.data;
						switch(_g2[1]) {
						case 2:
							var t2 = _g2[2];
							if(t2.file == t.file) {
								l.setCurrent(this.current,this.currentWidth,this.currentHeight);
							}
							break;
						case 3:
							var t21 = _g2[2];
							if(t21.file == t.file) {
								l.setCurrent(this.current,this.currentWidth,this.currentHeight);
							}
							break;
						default:
						}
					}
				}
				break;
			case 3:
				var t1 = _g[2];
				var _g3 = 0;
				var _g12 = this.level.layers;
				while(_g3 < _g12.length) {
					var l1 = _g12[_g3];
					++_g3;
					if(l1 != this) {
						var _g21 = l1.data;
						switch(_g21[1]) {
						case 2:
							var t22 = _g21[2];
							if(t22.file == t1.file) {
								l1.setCurrent(this.current,this.currentWidth,this.currentHeight);
							}
							break;
						case 3:
							var t23 = _g21[2];
							if(t23.file == t1.file) {
								l1.setCurrent(this.current,this.currentWidth,this.currentHeight);
							}
							break;
						default:
						}
					}
				}
				break;
			default:
			}
		}
		var s = { current : this.current, visible : this.visible, lock : this.lock, lockGrid : this.hasFloatCoord && !this.floatCoord, cw : this.currentWidth, ch : this.currentHeight};
		js_Browser.getLocalStorage().setItem(this.level.sheetPath + ":" + this.name,haxe_Serializer.run(s));
	}
	,save: function() {
		if(!this.dirty) {
			return;
		}
		this.dirty = false;
		this.targetObj.o[this.targetObj.f] = this.getData();
	}
	,getData: function() {
		var _g = this.data;
		switch(_g[1]) {
		case 0:
			var data = _g[2];
			var b = new haxe_io_Bytes(new ArrayBuffer(this.level.width * this.level.height));
			var p = 0;
			var _g1 = 0;
			var _g2 = this.level.height;
			while(_g1 < _g2) {
				var y = _g1++;
				var _g3 = 0;
				var _g21 = this.level.width;
				while(_g3 < _g21) {
					var x = _g3++;
					b.b[p] = data[p] & 255;
					++p;
				}
			}
			return cdb_Lz4Reader.encodeBytes(b,this.level.model.compressionEnabled());
		case 1:
			var objs = _g[3];
			return objs;
		case 2:
			var data1 = _g[3];
			var t = _g[2];
			var b1 = new haxe_io_BytesOutput();
			var _g11 = 0;
			var _g4 = data1.length;
			while(_g11 < _g4) {
				var r = _g11++;
				b1.writeUInt16(data1[r]);
			}
			if(t.file == null) {
				return null;
			} else {
				return { file : t.file, size : t.size, stride : t.stride, data : cdb_Lz4Reader.encodeBytes(b1.getBytes(),this.level.model.compressionEnabled())};
			}
			break;
		case 3:
			var insts = _g[3];
			var t1 = _g[2];
			var b2 = new haxe_io_BytesOutput();
			b2.writeUInt16(65535);
			var _g5 = 0;
			while(_g5 < insts.length) {
				var i = insts[_g5];
				++_g5;
				b2.writeUInt16(i.x * this.level.tileSize | 0 | (i.rot & 1) << 15);
				b2.writeUInt16(i.y * this.level.tileSize | 0 | i.rot >> 1 << 15);
				b2.writeUInt16(i.o | (i.flip ? 1 : 0) << 15);
			}
			if(t1.file == null) {
				return null;
			} else {
				return { file : t1.file, size : t1.size, stride : t1.stride, data : cdb_Lz4Reader.encodeBytes(b2.getBytes(),this.level.model.compressionEnabled())};
			}
			break;
		}
	}
	,scale: function(s) {
		var width = this.level.width;
		var height = this.level.height;
		var _g = this.data;
		switch(_g[1]) {
		case 0:
			var data = _g[2];
			var ndata = [];
			var _g1 = 0;
			var _g2 = height;
			while(_g1 < _g2) {
				var y = _g1++;
				var _g3 = 0;
				var _g21 = width;
				while(_g3 < _g21) {
					var x = _g3++;
					var tx = x / s | 0;
					var ty = y / s | 0;
					var k = tx >= width || ty >= height ? 0 : data[tx + ty * width];
					ndata.push(k);
				}
			}
			var _g11 = 0;
			var _g4 = width * height;
			while(_g11 < _g4) {
				var i = _g11++;
				data[i] = ndata[i];
			}
			break;
		case 1:
			var objs = _g[3];
			var m = this.floatCoord ? this.level.tileSize : 1;
			var _g5 = 0;
			var _g12 = objs.slice();
			while(_g5 < _g12.length) {
				var o = _g12[_g5];
				++_g5;
				o.x = (o.x * s * m | 0) / m;
				o.y = (o.y * s * m | 0) / m;
				if(o.x < 0 || o.y < 0 || o.x >= width || o.y >= height) {
					HxOverrides.remove(objs,o);
				}
			}
			break;
		case 2:
			var data1 = _g[3];
			var ndata1 = [];
			var _g13 = 0;
			var _g6 = height;
			while(_g13 < _g6) {
				var y1 = _g13++;
				var _g31 = 0;
				var _g22 = width;
				while(_g31 < _g22) {
					var x1 = _g31++;
					var tx1 = x1 / s | 0;
					var ty1 = y1 / s | 0;
					var k1 = tx1 >= width || ty1 >= height ? 0 : data1[tx1 + ty1 * width];
					ndata1.push(k1);
				}
			}
			var _g14 = 0;
			var _g7 = width * height;
			while(_g14 < _g7) {
				var i1 = _g14++;
				data1[i1] = ndata1[i1];
			}
			break;
		case 3:
			var insts = _g[3];
			var m1 = this.floatCoord ? this.level.tileSize : 1;
			var _g8 = 0;
			var _g15 = insts.slice();
			while(_g8 < _g15.length) {
				var i2 = _g15[_g8];
				++_g8;
				i2.x = (i2.x * s * m1 | 0) / m1;
				i2.y = (i2.y * s * m1 | 0) / m1;
				if(i2.x < 0 || i2.y < 0 || i2.x >= width || i2.y >= height) {
					HxOverrides.remove(insts,i2);
				}
			}
			break;
		}
	}
	,scroll: function(dx,dy) {
		var width = this.level.width;
		var height = this.level.height;
		var _g = this.data;
		switch(_g[1]) {
		case 0:
			var data = _g[2];
			var ndata = [];
			var _g1 = 0;
			var _g2 = height;
			while(_g1 < _g2) {
				var y = _g1++;
				var _g3 = 0;
				var _g21 = width;
				while(_g3 < _g21) {
					var x = _g3++;
					var tx = x - dx;
					var ty = y - dy;
					var k;
					if(tx < 0 || ty < 0 || tx >= width || ty >= height) {
						k = 0;
					} else {
						k = data[tx + ty * width];
					}
					ndata.push(k);
				}
			}
			var _g11 = 0;
			var _g4 = width * height;
			while(_g11 < _g4) {
				var i = _g11++;
				data[i] = ndata[i];
			}
			break;
		case 1:
			var objs = _g[3];
			var _g5 = 0;
			var _g12 = objs.slice();
			while(_g5 < _g12.length) {
				var o = _g12[_g5];
				++_g5;
				o.x += dx;
				o.y += dy;
				if(o.x < 0 || o.y < 0 || o.x >= width || o.y >= height) {
					HxOverrides.remove(objs,o);
				}
			}
			break;
		case 2:
			var data1 = _g[3];
			var ndata1 = [];
			var _g13 = 0;
			var _g6 = height;
			while(_g13 < _g6) {
				var y1 = _g13++;
				var _g31 = 0;
				var _g22 = width;
				while(_g31 < _g22) {
					var x1 = _g31++;
					var tx1 = x1 - dx;
					var ty1 = y1 - dy;
					var k1;
					if(tx1 < 0 || ty1 < 0 || tx1 >= width || ty1 >= height) {
						k1 = 0;
					} else {
						k1 = data1[tx1 + ty1 * width];
					}
					ndata1.push(k1);
				}
			}
			var _g14 = 0;
			var _g7 = width * height;
			while(_g14 < _g7) {
				var i1 = _g14++;
				data1[i1] = ndata1[i1];
			}
			break;
		case 3:
			var insts = _g[3];
			var _g8 = 0;
			var _g15 = insts.slice();
			while(_g8 < _g15.length) {
				var i2 = _g15[_g8];
				++_g8;
				i2.x += dx;
				i2.y += dy;
				if(i2.x < 0 || i2.y < 0 || i2.x >= width || i2.y >= height) {
					HxOverrides.remove(insts,i2);
				}
			}
			break;
		}
	}
	,setMode: function(mode) {
		var old = this.props.mode;
		if(old == null) {
			old = "tiles";
		}
		var width = this.level.width;
		var height = this.level.height;
		switch(old) {
		case "ground":case "tiles":
			switch(mode) {
			case "ground":case "tiles":
				break;
			case "objects":
				var _g = this.data;
				if(_g[1] == 2) {
					var data = _g[3];
					var td = _g[2];
					var oids_h = { };
					var _g1 = 0;
					var _g11 = this.tileProps.sets;
					while(_g1 < _g11.length) {
						var p = _g11[_g1];
						++_g1;
						if(p.t == "object") {
							oids_h[p.x + p.y * this.stride] = p;
						}
					}
					var objs = [];
					var p1 = -1;
					var _g12 = 0;
					var _g2 = height;
					while(_g12 < _g2) {
						var y = _g12++;
						var _g3 = 0;
						var _g21 = width;
						while(_g3 < _g21) {
							var x = _g3++;
							var d = data[++p1] - 1;
							if(d < 0) {
								continue;
							}
							var o = oids_h[d];
							if(o != null) {
								var _g5 = 0;
								var _g4 = o.h;
								while(_g5 < _g4) {
									var dy = _g5++;
									var _g7 = 0;
									var _g6 = o.w;
									while(_g7 < _g6) {
										var dx = _g7++;
										var tp = p1 + dx + dy * width;
										if(x + dx >= width || y + dy >= height) {
											continue;
										}
										var id = d + dx + dy * this.stride;
										if(data[tp] != id + 1) {
											if(data[tp] == 0 && this.blanks[id]) {
												continue;
											}
											o = null;
											break;
										}
									}
									if(o == null) {
										break;
									}
								}
							}
							if(o == null) {
								objs.push({ x : x, y : y, b : y, id : d});
							} else {
								var _g51 = 0;
								var _g41 = o.h;
								while(_g51 < _g41) {
									var dy1 = _g51++;
									var _g71 = 0;
									var _g61 = o.w;
									while(_g71 < _g61) {
										var dx1 = _g71++;
										if(x + dx1 >= width || y + dy1 >= height) {
											continue;
										}
										data[p1 + dx1 + dy1 * width] = 0;
									}
								}
								objs.push({ x : x, y : y, b : y + o.w - 1, id : d});
							}
						}
					}
					objs.sort(function(o1,o2) {
						return o1.b - o2.b;
					});
					var _g8 = [];
					var _g13 = 0;
					while(_g13 < objs.length) {
						var o3 = objs[_g13];
						++_g13;
						_g8.push({ x : o3.x, y : o3.y, o : o3.id, flip : false, rot : 0});
					}
					this.data = lvl_LayerInnerData.TileInstances(td,_g8);
					this.dirty = true;
				} else {
					throw new js__$Boot_HaxeError("assert0");
				}
				break;
			}
			break;
		case "objects":
			switch(mode) {
			case "ground":case "tiles":
				var _g9 = this.data;
				if(_g9[1] == 3) {
					var insts = _g9[3];
					var td1 = _g9[2];
					var objs1 = this.getTileObjects();
					var _g10 = [];
					var _g22 = 0;
					var _g14 = width * height;
					while(_g22 < _g14) {
						var i = _g22++;
						_g10.push(0);
					}
					var data1 = _g10;
					var _g15 = 0;
					while(_g15 < insts.length) {
						var i1 = insts[_g15];
						++_g15;
						var x1 = i1.x | 0;
						var y1 = i1.y | 0;
						var obj = objs1.h[i1.o];
						if(obj == null) {
							data1[x1 + y1 * width] = i1.o + 1;
						} else {
							var _g31 = 0;
							var _g23 = obj.h;
							while(_g31 < _g23) {
								var dy2 = _g31++;
								var _g52 = 0;
								var _g42 = obj.w;
								while(_g52 < _g42) {
									var dx2 = _g52++;
									var x2 = x1 + dx2;
									var y2 = y1 + dy2;
									if(x2 < width && y2 < height) {
										data1[x2 + y2 * width] = i1.o + dx2 + dy2 * this.stride + 1;
									}
								}
							}
						}
					}
					this.data = lvl_LayerInnerData.Tiles(td1,data1);
					this.dirty = true;
				} else {
					throw new js__$Boot_HaxeError("assert1");
				}
				break;
			case "objects":
				break;
			}
			break;
		}
		this.props.mode = mode;
		if(mode == "tiles") {
			Reflect.deleteField(this.props,"mode");
		}
	}
	,initMatrix: function(m,w,h,rot,flip) {
		m.a = 1;
		m.b = 0;
		m.c = 0;
		m.d = 1;
		m.x = -w * 0.5;
		m.y = -h * 0.5;
		if(rot != 0) {
			var a = Math.PI * rot / 2;
			var c = Math.cos(a);
			var s = Math.sin(a);
			var x = m.x;
			var y = m.y;
			m.a = c;
			m.b = s;
			m.c = -s;
			m.d = c;
			m.x = x * c - y * s;
			m.y = x * s + y * c;
		}
		if(flip) {
			m.a = -m.a;
			m.c = -m.c;
			m.x = -m.x;
		}
		m.x += Math.abs(m.a * w * 0.5 + m.c * h * 0.5);
		m.y += Math.abs(m.b * w * 0.5 + m.d * h * 0.5);
	}
	,draw: function(view) {
		view.set_alpha(this.props.alpha);
		var width = this.level.width;
		var height = this.level.height;
		var size = this.level.tileSize;
		var _g = this.data;
		switch(_g[1]) {
		case 0:
			var data = _g[2];
			var first = this.level.layers[0] == this;
			var _g1 = 0;
			var _g2 = height;
			while(_g1 < _g2) {
				var y = _g1++;
				var _g3 = 0;
				var _g21 = width;
				while(_g3 < _g21) {
					var x = _g3++;
					var k = data[x + y * width];
					if(k == 0 && !first) {
						continue;
					}
					if(this.images != null) {
						var i = this.images[k];
						view.draw(i,x * size - (i.width - size >> 1),y * size - (i.height - size));
						continue;
					}
					view.fillRect(x * size,y * size,size,size,this.colors[k] | -16777216);
				}
			}
			break;
		case 1:
			var objs = _g[3];
			var idCol = _g[2];
			if(idCol == null) {
				var col = this.props.color | -1610612736;
				var _g4 = 0;
				while(_g4 < objs.length) {
					var o = objs[_g4];
					++_g4;
					var w = this.hasSize ? o.width * size : size;
					var h = this.hasSize ? o.height * size : size;
					view.fillRect(o.x * size | 0,o.y * size | 0,w | 0,h | 0,col);
				}
				var col1 = this.props.color | -16777216;
				var _g5 = 0;
				while(_g5 < objs.length) {
					var o1 = objs[_g5];
					++_g5;
					var w1 = this.hasSize ? o1.width * size | 0 : size;
					var h1 = this.hasSize ? o1.height * size | 0 : size;
					var px = o1.x * size | 0;
					var py = o1.y * size | 0;
					view.fillRect(px,py,w1,1,col1);
					view.fillRect(px,py + h1 - 1,w1,1,col1);
					view.fillRect(px,py + 1,1,h1 - 2,col1);
					view.fillRect(px + w1 - 1,py + 1,1,h1 - 2,col1);
				}
			} else {
				var _g6 = 0;
				while(_g6 < objs.length) {
					var o2 = objs[_g6];
					++_g6;
					var w2 = (this.hasSize ? o2.width * size : size) | 0;
					var h2 = (this.hasSize ? o2.height * size : size) | 0;
					var px1 = o2.x * size | 0;
					var py1 = o2.y * size | 0;
					var col2 = this.props.color;
					var id = Reflect.field(o2,idCol);
					var _this = this.idToIndex;
					var k1 = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
					if(k1 != null && this.colors != null) {
						col2 = this.colors[k1];
					}
					if(this.hasSize || this.images == null || k1 == null) {
						view.fillRect(px1,py1,w2,h2,col2 | -1610612736);
						var col3 = col2 | -16777216;
						view.fillRect(px1,py1,w2,1,col3);
						view.fillRect(px1,py1 + h2 - 1,w2,1,col3);
						view.fillRect(px1,py1 + 1,1,h2 - 2,col3);
						view.fillRect(px1 + w2 - 1,py1 + 1,1,h2 - 2,col3);
					}
					if(this.images != null && k1 != null) {
						var i1 = this.images[k1];
						view.draw(i1,px1 + ((w2 - i1.width) * 0.5 | 0),py1 + ((h2 - i1.height) * 0.5 | 0));
					}
				}
			}
			break;
		case 2:
			var data1 = _g[3];
			var t = _g[2];
			var _g11 = 0;
			var _g7 = height;
			while(_g11 < _g7) {
				var y1 = _g11++;
				var _g31 = 0;
				var _g22 = width;
				while(_g31 < _g22) {
					var x1 = _g31++;
					var k2 = data1[x1 + y1 * width] - 1;
					if(k2 < 0) {
						continue;
					}
					view.draw(this.images[k2],x1 * size,y1 * size);
				}
			}
			if(this.props.mode == "ground") {
				var b = new cdb_TileBuilder(this.tileProps,this.stride,this.images.length);
				var a = b.buildGrounds(data1,width);
				var p = 0;
				var max = a.length;
				while(p < max) {
					var x2 = a[p++];
					var y2 = a[p++];
					var id1 = a[p++];
					view.draw(this.images[id1],x2 * size,y2 * size);
				}
			}
			break;
		case 3:
			var insts = _g[3];
			var objs1 = this.getTileObjects();
			var mat = { a : 1., b : 0., c : 0., d : 1., x : 0., y : 0.};
			var _g8 = 0;
			while(_g8 < insts.length) {
				var i2 = insts[_g8];
				++_g8;
				var x3 = i2.x * size | 0;
				var y3 = i2.y * size | 0;
				var obj = objs1.h[i2.o];
				var w3 = obj == null ? 1 : obj.w;
				var h3 = obj == null ? 1 : obj.h;
				var w4 = w3 * size;
				var h4 = h3 * size;
				var rot = i2.rot;
				mat.a = 1;
				mat.b = 0;
				mat.c = 0;
				mat.d = 1;
				mat.x = -w4 * 0.5;
				mat.y = -h4 * 0.5;
				if(rot != 0) {
					var a1 = Math.PI * rot / 2;
					var c = Math.cos(a1);
					var s = Math.sin(a1);
					var x4 = mat.x;
					var y4 = mat.y;
					mat.a = c;
					mat.b = s;
					mat.c = -s;
					mat.d = c;
					mat.x = x4 * c - y4 * s;
					mat.y = x4 * s + y4 * c;
				}
				if(i2.flip) {
					mat.a = -mat.a;
					mat.c = -mat.c;
					mat.x = -mat.x;
				}
				mat.x += Math.abs(mat.a * w4 * 0.5 + mat.c * h4 * 0.5);
				mat.y += Math.abs(mat.b * w4 * 0.5 + mat.d * h4 * 0.5);
				mat.x += x3;
				mat.y += y3;
				if(obj == null) {
					view.drawMat(this.images[i2.o],mat);
					view.fillRect(x3,y3,size,size,-2130771968);
				} else {
					var px2 = mat.x;
					var py2 = mat.y;
					var _g23 = 0;
					var _g12 = obj.h;
					while(_g23 < _g12) {
						var dy = _g23++;
						var _g41 = 0;
						var _g32 = obj.w;
						while(_g41 < _g32) {
							var dx = _g41++;
							mat.x = px2 + dx * size * mat.a + dy * size * mat.c;
							mat.y = py2 + dx * size * mat.b + dy * size * mat.d;
							view.drawMat(this.images[i2.o + dx + dy * this.stride],mat);
						}
					}
				}
			}
			break;
		}
	}
	,__class__: lvl_LayerData
});
var lvl_Palette = function(level) {
	this.modeCursor = 0;
	this.mode = null;
	this.randomMode = false;
	this.paintMode = false;
	this.small = false;
	this.level = level;
};
$hxClasses["lvl.Palette"] = lvl_Palette;
lvl_Palette.__name__ = ["lvl","Palette"];
lvl_Palette.prototype = {
	init: function() {
		this.perTileProps = [];
		var _g = 0;
		var _g1 = this.level.sheet.sheet.columns;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.name == "tileProps" && (c.type == cdb_ColumnType.TList || c.type == cdb_ColumnType.TProperties)) {
				var _this = this.level.sheet;
				this.perTileProps = _this.base.getSheet(_this.sheet.name + "@" + c.name).sheet.columns;
			}
		}
		this.perTileGfx = new haxe_ds_StringMap();
		var _g2 = 0;
		var _g11 = this.perTileProps;
		while(_g2 < _g11.length) {
			var c1 = _g11[_g2];
			++_g2;
			var _g21 = c1.type;
			if(_g21[1] == 6) {
				var s = _g21[2];
				var g = new lvl_LayerGfx(this.level);
				g.fromSheet(this.level.model.base.getSheet(s),16711680);
				var key = c1.name;
				var _this1 = this.perTileGfx;
				if(__map_reserved[key] != null) {
					_this1.setReserved(key,g);
				} else {
					_this1.h[key] = g;
				}
			}
		}
	}
	,getDefault: function(c) {
		return this.level.model.base.getDefault(c);
	}
	,getTileProp: function(x,y,create) {
		if(create == null) {
			create = true;
		}
		var l = this.currentLayer;
		var a = x + y * l.stride;
		var p = this.currentLayer.tileProps.props[a];
		if(p == null) {
			if(!create) {
				return null;
			}
			p = { };
			var _g = 0;
			var _g1 = this.perTileProps;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				var v = this.getDefault(c);
				if(v != null) {
					p[c.name] = v;
				}
			}
			this.currentLayer.tileProps.props[a] = p;
		}
		return p;
	}
	,getTileProps: function(file,stride,max) {
		var p = Reflect.field(this.level.sheet.sheet.props.level.tileSets,file);
		if(p == null) {
			p = { stride : stride, sets : [], props : []};
			this.level.sheet.sheet.props.level.tileSets[file] = p;
		} else {
			if(p.sets == null) {
				p.sets = [];
			}
			if(p.props == null) {
				p.props = [];
			}
			Reflect.deleteField(p,"tags");
			if(p.stride == null) {
				p.stride = stride;
			} else if(p.stride != stride) {
				var out = [];
				var _g1 = 0;
				var _g = Math.ceil(p.props.length / p.stride);
				while(_g1 < _g) {
					var y = _g1++;
					var _g3 = 0;
					var _g2 = p.stride;
					while(_g3 < _g2) {
						var x = _g3++;
						out[x + y * stride] = p.props[x + y * p.stride];
					}
				}
				while(out.length > 0 && (out[out.length - 1] == null || out.length > max)) out.pop();
				p.props = out;
				p.stride = stride;
			}
			if(p.props.length > max) {
				p.props.splice(max,p.props.length - max);
			}
			var _g4 = 0;
			var _g11 = p.sets.slice();
			while(_g4 < _g11.length) {
				var s = _g11[_g4];
				++_g4;
				if(s.x + s.w > stride || (s.y + s.h) * stride > max) {
					HxOverrides.remove(p.sets,s);
				}
			}
		}
		return p;
	}
	,saveTileProps: function() {
		var pr = this.currentLayer.tileProps.props;
		var _g1 = 0;
		var _g = pr.length;
		while(_g1 < _g) {
			var i = _g1++;
			var p = pr[i];
			if(p == null) {
				continue;
			}
			var def = true;
			var _g2 = 0;
			var _g3 = this.perTileProps;
			while(_g2 < _g3.length) {
				var c = _g3[_g2];
				++_g2;
				var v = Reflect.field(p,c.name);
				if(v != null && v != this.getDefault(c)) {
					def = false;
					break;
				}
			}
			if(def) {
				pr[i] = null;
			}
		}
		while(pr.length > 0 && pr[pr.length - 1] == null) pr.pop();
		this.level.save();
		this.level.setCursor();
	}
	,reset: function() {
		if(this.p != null) {
			this.p.remove();
			this.select = null;
		}
	}
	,layerChanged: function(l) {
		var _gthis = this;
		this.currentLayer = l;
		this.p = $($("#paletteContent").html()).appendTo(this.level.content);
		this.p.toggleClass("small",this.small);
		var i = lvl_Image.fromCanvas(this.p.find("canvas.view")[0]);
		this.zoom = 1;
		while(this.zoom < 4 && l.stride * this.zoom * this.level.tileSize < 256 && l.height * this.zoom * this.level.tileSize < 256) this.zoom++;
		var tsize = this.level.tileSize * this.zoom;
		var scaleUp = 0;
		var scaleDown = 0;
		i.setSize(l.stride * (tsize + 1),l.height * (tsize + 1));
		var _g1 = 0;
		var _g = l.images.length;
		while(_g1 < _g) {
			var n = _g1++;
			var x = n % l.stride * (tsize + 1);
			var y = (n / l.stride | 0) * (tsize + 1);
			var li = l.images[n];
			if(li.width == tsize && li.height == tsize) {
				i.draw(li,x,y);
			} else {
				var sw = tsize / li.width;
				var sh = tsize / li.height;
				if(sw > 1) {
					++scaleUp;
				} else if(sw < 1) {
					++scaleDown;
				}
				if(sh > 1) {
					++scaleUp;
				} else if(sh < 1) {
					++scaleDown;
				}
				i.drawScaled(li,x,y,tsize,tsize);
			}
		}
		if(scaleUp > scaleDown && scaleUp != 0) {
			$(i.getCanvas()).css("image-rendering","pixelated");
		}
		var jsel = this.p.find("canvas.select");
		var jpreview = this.p.find(".preview").hide();
		var ipreview = lvl_Image.fromCanvas(jpreview.find("canvas")[0]);
		this.select = lvl_Image.fromCanvas(jsel[0]);
		this.select.setSize(i.width,i.height);
		this.p.find(".icon.random").toggleClass("active",this.randomMode);
		this.p.find(".icon.paint").toggleClass("active",this.paintMode);
		this.p.find(".icon.small").toggleClass("active",this.small);
		this.p.mousedown(function(e) {
			e.stopPropagation();
		});
		this.p.mouseup(function(e1) {
			e1.stopPropagation();
		});
		var curPreview = -1;
		var start_y;
		var start_x;
		var start_down;
		start_x = l.current % l.stride;
		start_y = l.current / l.stride | 0;
		start_down = false;
		jsel.mousedown(function(e2) {
			_gthis.p.find("input[type=text]:focus").blur();
			var o = jsel.offset();
			var x1 = (e2.pageX - o.left) / (_gthis.level.tileSize * _gthis.zoom + 1) | 0;
			var y1 = (e2.pageY - o.top) / (_gthis.level.tileSize * _gthis.zoom + 1) | 0;
			if(x1 + y1 * l.stride >= l.images.length) {
				return;
			}
			if(e2.shiftKey) {
				var x0 = x1 < start_x ? x1 : start_x;
				var y0 = y1 < start_y ? y1 : start_y;
				var x11 = x1 < start_x ? start_x : x1;
				var y11 = y1 < start_y ? start_y : y1;
				l.set_current(x0 + y0 * l.stride);
				l.currentWidth = x11 - x0 + 1;
				l.currentHeight = y11 - y0 + 1;
				l.saveState();
				_gthis.level.setCursor();
			} else {
				start_x = x1;
				start_y = y1;
				if(l.tileProps != null && (_gthis.mode == null || _gthis.mode == "t_objects")) {
					var _g2 = 0;
					var _g11 = l.tileProps.sets;
					while(_g2 < _g11.length) {
						var p = _g11[_g2];
						++_g2;
						if(x1 >= p.x && y1 >= p.y && x1 < p.x + p.w && y1 < p.y + p.h && p.t == "object") {
							l.set_current(p.x + p.y * l.stride);
							l.currentWidth = p.w;
							l.currentHeight = p.h;
							l.saveState();
							_gthis.level.setCursor();
							return;
						}
					}
				}
				start_down = true;
				_gthis.level.set_mouseCapture(jsel);
				l.set_current(x1 + y1 * l.stride);
				_gthis.level.setCursor();
			}
			var prop = _gthis.getProp();
			if(prop != null) {
				var pick = e2.which == 3;
				var _g3 = prop.type;
				switch(_g3[1]) {
				case 2:
					if(!pick) {
						var v = _gthis.getTileProp(x1,y1);
						v[prop.name] = !Reflect.field(v,prop.name);
						_gthis.saveTileProps();
					}
					break;
				case 5:
					if(pick) {
						var idx = Reflect.field(_gthis.getTileProp(x1,y1),prop.name);
						_gthis.modeCursor = idx == null ? -1 : idx;
						_gthis.level.setCursor();
						return;
					}
					var v1;
					if(_gthis.modeCursor < 0) {
						v1 = _gthis.getDefault(prop);
					} else {
						v1 = _gthis.modeCursor;
					}
					if(v1 == null) {
						Reflect.deleteField(_gthis.getTileProp(x1,y1),prop.name);
					} else {
						_gthis.getTileProp(x1,y1)[prop.name] = v1;
					}
					_gthis.saveTileProps();
					break;
				case 6:
					var key = prop.name;
					var _this = _gthis.perTileGfx;
					var c = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
					if(pick) {
						var this1 = c.idToIndex;
						var key1 = Reflect.field(_gthis.getTileProp(x1,y1),prop.name);
						var _this1 = this1;
						var idx1 = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
						_gthis.modeCursor = idx1 == null ? -1 : idx1;
						_gthis.level.setCursor();
						return;
					}
					var v2;
					if(_gthis.modeCursor < 0) {
						v2 = _gthis.getDefault(prop);
					} else {
						v2 = c.indexToId[_gthis.modeCursor];
					}
					if(v2 == null) {
						Reflect.deleteField(_gthis.getTileProp(x1,y1),prop.name);
					} else {
						_gthis.getTileProp(x1,y1)[prop.name] = v2;
					}
					_gthis.saveTileProps();
					break;
				default:
				}
			}
		});
		jsel.mousemove(function(e3) {
			var o1 = jsel.offset();
			var x2 = (e3.pageX - o1.left) / (_gthis.level.tileSize * _gthis.zoom + 1) | 0;
			var y2 = (e3.pageY - o1.top) / (_gthis.level.tileSize * _gthis.zoom + 1) | 0;
			var infos = x2 + "," + y2;
			var id = x2 + y2 * l.stride;
			if(id >= l.images.length || l.blanks[id]) {
				curPreview = -1;
				jpreview.hide();
			} else {
				if(curPreview != id) {
					curPreview = id;
					jpreview.show();
					ipreview.fill(-12582848);
					ipreview.copyFrom(l.images[id]);
				}
				if(l.names != null) {
					infos += " " + l.names[id];
				}
			}
			if(l.tileProps != null) {
				_gthis.level.content.find(".cursorPosition").text(infos);
			} else {
				_gthis.p.find(".infos").text(infos);
			}
			if(!start_down) {
				return;
			}
			var x01 = x2 < start_x ? x2 : start_x;
			var y01 = y2 < start_y ? y2 : start_y;
			var x12 = x2 < start_x ? start_x : x2;
			var y12 = y2 < start_y ? start_y : y2;
			l.set_current(x01 + y01 * l.stride);
			l.currentWidth = x12 - x01 + 1;
			l.currentHeight = y12 - y01 + 1;
			l.saveState();
			_gthis.level.setCursor();
		});
		jsel.mouseleave(function(e4) {
			if(l.tileProps != null) {
				_gthis.level.content.find(".cursorPosition").text("");
			} else {
				_gthis.p.find(".infos").text("");
			}
			curPreview = -1;
			jpreview.hide();
		});
		this.p.mouseleave(function(_) {
			start_down = false;
		});
		this.p.mousemove(function(e5) {
			_gthis.level.mousePos.x = e5.pageX | 0;
			_gthis.level.mousePos.y = e5.pageY | 0;
			_gthis.level.updateCursorPos();
			if(_gthis.level.selection == null) {
				_gthis.level.cursor.hide();
			}
		});
		this.p.mouseup(function(_1) {
			start_down = false;
			_gthis.level.content.mouseup();
		});
	}
	,updateSelect: function() {
		var _gthis = this;
		if(this.select == null) {
			return;
		}
		var l = this.currentLayer;
		this.select.clear();
		var used = [];
		var _g = l.data;
		switch(_g[1]) {
		case 0:
			var data = _g[2];
			var _g1 = 0;
			while(_g1 < data.length) {
				var k = data[_g1];
				++_g1;
				used[k] = true;
			}
			break;
		case 1:
			var objs = _g[3];
			var id = _g[2];
			var _g2 = 0;
			while(_g2 < objs.length) {
				var o = objs[_g2];
				++_g2;
				var key = Reflect.field(o,id);
				var _this = l.idToIndex;
				var id1 = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
				if(id1 != null) {
					used[id1] = true;
				}
			}
			break;
		case 2:
			var data1 = _g[3];
			var _g3 = 0;
			while(_g3 < data1.length) {
				var k1 = data1[_g3];
				++_g3;
				if(k1 == 0) {
					continue;
				}
				used[k1 - 1] = true;
			}
			break;
		case 3:
			var insts = _g[3];
			var objs1 = l.getTileObjects();
			var _g4 = 0;
			while(_g4 < insts.length) {
				var i = insts[_g4];
				++_g4;
				var t = objs1.h[i.o];
				if(t == null) {
					used[i.o] = true;
					continue;
				}
				var _g21 = 0;
				var _g11 = t.h;
				while(_g21 < _g11) {
					var dy = _g21++;
					var _g41 = 0;
					var _g31 = t.w;
					while(_g41 < _g31) {
						var dx = _g41++;
						used[i.o + dx + dy * l.stride] = true;
					}
				}
			}
			break;
		}
		var tsize = this.level.tileSize * this.zoom;
		var _g22 = 0;
		var _g12 = l.images.length;
		while(_g22 < _g12) {
			var i1 = _g22++;
			if(used[i1]) {
				continue;
			}
			this.select.fillRect(i1 % l.stride * (tsize + 1),(i1 / l.stride | 0) * (tsize + 1),tsize,tsize,805306368);
		}
		var prop = this.getProp();
		var tmp;
		if(prop != null) {
			var _g13 = prop.type;
			var tmp1;
			switch(_g13[1]) {
			case 2:case 5:case 6:
				tmp1 = true;
				break;
			default:
				tmp1 = false;
			}
			tmp = !tmp1;
		} else {
			tmp = true;
		}
		if(tmp) {
			var objs2 = this.mode == null ? l.getSelObjects() : [];
			if(objs2.length > 1) {
				var _g23 = 0;
				while(_g23 < objs2.length) {
					var o1 = objs2[_g23];
					++_g23;
					this.select.fillRect(o1.x * (tsize + 1),o1.y * (tsize + 1),(tsize + 1) * o1.w - 1,(tsize + 1) * o1.h - 1,-2141478405);
				}
			} else {
				this.select.fillRect(l.current % l.stride * (tsize + 1),(l.current / l.stride | 0) * (tsize + 1),(tsize + 1) * l.currentWidth - 1,(tsize + 1) * l.currentHeight - 1,-2141478405);
			}
		}
		if(prop != null) {
			var def = this.getDefault(prop);
			var _g24 = prop.type;
			switch(_g24[1]) {
			case 2:
				var k2 = 0;
				var _g32 = 0;
				var _g25 = l.height;
				while(_g32 < _g25) {
					var y = _g32++;
					var _g5 = 0;
					var _g42 = l.stride;
					while(_g5 < _g42) {
						var x = _g5++;
						var p = l.tileProps.props[k2++];
						if(p == null) {
							continue;
						}
						var v = Reflect.field(p,prop.name);
						if(v == def) {
							continue;
						}
						this.select.fillRect(x * (tsize + 1),y * (tsize + 1),tsize,tsize,v ? -2131010655 : -2141455455);
					}
				}
				break;
			case 5:
				var k3 = 0;
				var _g33 = 0;
				var _g26 = l.height;
				while(_g33 < _g26) {
					var y1 = _g33++;
					var _g51 = 0;
					var _g43 = l.stride;
					while(_g51 < _g43) {
						var x1 = _g51++;
						var p1 = l.tileProps.props[k3++];
						if(p1 == null) {
							continue;
						}
						var v1 = Reflect.field(p1,prop.name);
						if(v1 == null || v1 == def) {
							continue;
						}
						this.select.fillRect(x1 * (tsize + 1),y1 * (tsize + 1),tsize,tsize,lvl_Palette.colorPalette[v1] | -2147483648);
					}
				}
				break;
			case 6:
				var key1 = prop.name;
				var _this1 = this.perTileGfx;
				var gfx = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
				var k4 = 0;
				this.select.set_alpha(0.5);
				var _g34 = 0;
				var _g27 = l.height;
				while(_g34 < _g27) {
					var y2 = _g34++;
					var _g52 = 0;
					var _g44 = l.stride;
					while(_g52 < _g44) {
						var x2 = _g52++;
						var p2 = l.tileProps.props[k4++];
						if(p2 == null) {
							continue;
						}
						var r = Reflect.field(p2,prop.name);
						var _this2 = gfx.idToIndex;
						var v2 = __map_reserved[r] != null ? _this2.getReserved(r) : _this2.h[r];
						if(v2 == null || r == def) {
							continue;
						}
						this.select.drawScaled(gfx.images[v2],x2 * (tsize + 1),y2 * (tsize + 1),tsize,tsize);
					}
				}
				this.select.set_alpha(1);
				break;
			case 1:case 3:case 4:case 11:case 13:case 16:
				var k5 = 0;
				var _g35 = 0;
				var _g28 = l.height;
				while(_g35 < _g28) {
					var y3 = _g35++;
					var _g53 = 0;
					var _g45 = l.stride;
					while(_g53 < _g45) {
						var x3 = _g53++;
						var p3 = l.tileProps.props[k5++];
						if(p3 == null) {
							continue;
						}
						var v3 = Reflect.field(p3,prop.name);
						if(v3 == null || v3 == def) {
							continue;
						}
						this.select.fillRect(x3 * (tsize + 1),y3 * (tsize + 1),tsize,1,-1);
						this.select.fillRect(x3 * (tsize + 1),y3 * (tsize + 1),1,tsize,-1);
						this.select.fillRect(x3 * (tsize + 1),(y3 + 1) * (tsize + 1) - 1,tsize,1,-1);
						this.select.fillRect((x3 + 1) * (tsize + 1) - 1,y3 * (tsize + 1),1,tsize,-1);
					}
				}
				break;
			default:
			}
		}
		var m = this.p.find(".mode");
		var sel = this.p.find(".sel");
		if(l.tileProps == null) {
			m.hide();
			sel.show();
		} else {
			sel.hide();
			var grounds = [];
			var _g29 = 0;
			var _g36 = l.tileProps.sets;
			while(_g29 < _g36.length) {
				var s = _g36[_g29];
				++_g29;
				var color;
				var _g46 = s.t;
				switch(_g46) {
				case "border":
					if(this.mode != "t_border") {
						continue;
					}
					color = 65535;
					break;
				case "ground":
					if(s.opts.name != null && s.opts.name != "") {
						HxOverrides.remove(grounds,s.opts.name);
						grounds.push(s.opts.name);
					}
					if(this.mode != null && this.mode != "t_ground") {
						continue;
					}
					color = this.mode == null ? 40960 : 65280;
					break;
				case "group":
					if(this.mode != "t_group") {
						continue;
					}
					color = 16777215;
					break;
				case "object":
					if(this.mode != null && this.mode != "t_object") {
						continue;
					}
					color = this.mode == null ? 8388608 : 16711680;
					break;
				case "tile":
					continue;
				}
				color |= -16777216;
				var tsize1 = this.level.tileSize * this.zoom;
				var px = s.x * (tsize1 + 1);
				var py = s.y * (tsize1 + 1);
				var w = s.w * (tsize1 + 1) - 1;
				var h = s.h * (tsize1 + 1) - 1;
				this.select.fillRect(px,py,w,1,color);
				this.select.fillRect(px,py + h - 1,w,1,color);
				this.select.fillRect(px,py,1,h,color);
				this.select.fillRect(px + w - 1,py,1,h,color);
			}
			var tmode = cdb__$Data_TileMode_$Impl_$.ofString(this.mode == null ? "" : HxOverrides.substr(this.mode,2,null));
			var tobj = l.getTileProp(tmode);
			if(tobj == null) {
				tobj = { x : 0, y : 0, w : 0, h : 0, t : "tile", opts : { }};
			}
			var _g210 = [];
			var m1 = "tile";
			_g210.push("<option value=\"t_" + m1 + "\">" + (HxOverrides.substr(m1,0,1).toUpperCase() + HxOverrides.substr(m1,1,null)) + "</option>");
			var m2 = "object";
			_g210.push("<option value=\"t_" + m2 + "\">" + (HxOverrides.substr(m2,0,1).toUpperCase() + HxOverrides.substr(m2,1,null)) + "</option>");
			var m3 = "ground";
			_g210.push("<option value=\"t_" + m3 + "\">" + (HxOverrides.substr(m3,0,1).toUpperCase() + HxOverrides.substr(m3,1,null)) + "</option>");
			var m4 = "border";
			_g210.push("<option value=\"t_" + m4 + "\">" + (HxOverrides.substr(m4,0,1).toUpperCase() + HxOverrides.substr(m4,1,null)) + "</option>");
			var m5 = "group";
			_g210.push("<option value=\"t_" + m5 + "\">" + (HxOverrides.substr(m5,0,1).toUpperCase() + HxOverrides.substr(m5,1,null)) + "</option>");
			var baseModes = _g210.join("\n");
			var _g37 = [];
			var _g47 = 0;
			var _g54 = this.perTileProps;
			while(_g47 < _g54.length) {
				var t1 = _g54[_g47];
				++_g47;
				_g37.push("<option value=\"" + t1.name + "\">" + t1.name + "</option>");
			}
			var props = _g37.join("\n");
			var tmp2 = m.find("[name=mode]");
			var tmp3 = this.mode == null ? "t_tile" : this.mode;
			tmp2.html(baseModes + props).val(tmp3);
			m.attr("class","").addClass("mode");
			if(prop != null) {
				var _g48 = prop.type;
				switch(_g48[1]) {
				case 5:
					var values = _g48[2];
					m.addClass("m_ref");
					var refList = m.find(".opt.refList");
					refList.html("");
					if(prop.opt) {
						$("<div>").addClass("icon").addClass("delete").appendTo(refList).toggleClass("active",this.modeCursor < 0).click(function(_) {
							_gthis.modeCursor = -1;
							_gthis.level.setCursor();
						});
					}
					var _g55 = 0;
					var _g49 = values.length;
					while(_g55 < _g49) {
						var i2 = [_g55++];
						var d = $("<div>").addClass("icon").css({ background : this.level.toColor(lvl_Palette.colorPalette[i2[0]]), width : "auto"}).text(values[i2[0]]);
						d.appendTo(refList);
						d.toggleClass("active",this.modeCursor == i2[0]);
						d.click((function(i3) {
							return function(_1) {
								_gthis.modeCursor = i3[0];
								_gthis.level.setCursor();
							};
						})(i2));
					}
					break;
				case 6:
					var key2 = prop.name;
					var _this3 = this.perTileGfx;
					var gfx1 = __map_reserved[key2] != null ? _this3.getReserved(key2) : _this3.h[key2];
					m.addClass("m_ref");
					var refList1 = m.find(".opt.refList");
					refList1.html("");
					if(prop.opt) {
						$("<div>").addClass("icon").addClass("delete").appendTo(refList1).toggleClass("active",this.modeCursor < 0).click(function(_2) {
							_gthis.modeCursor = -1;
							_gthis.level.setCursor();
						});
					}
					var _g56 = 0;
					var _g410 = gfx1.images.length;
					while(_g56 < _g410) {
						var i4 = [_g56++];
						var d1 = $("<div>").addClass("icon").css({ background : "url('" + gfx1.images[i4[0]].getCanvas().toDataURL() + "')"});
						d1.appendTo(refList1);
						d1.toggleClass("active",this.modeCursor == i4[0]);
						d1.attr("title",gfx1.names[i4[0]]);
						d1.click((function(i5) {
							return function(_3) {
								_gthis.modeCursor = i5[0];
								_gthis.level.setCursor();
							};
						})(i4));
					}
					break;
				case 1:case 3:case 4:case 16:
					m.addClass("m_value");
					var p4 = this.getTileProp(l.current % l.stride,l.current / l.stride | 0,false);
					var v4 = p4 == null ? null : Reflect.field(p4,prop.name);
					m.find("[name=value]").val(prop.type == cdb_ColumnType.TDynamic ? JSON.stringify(v4) : v4 == null ? "" : "" + v4);
					break;
				default:
				}
			} else if("t_" + cdb__$Data_TileMode_$Impl_$.toString(tobj.t) != this.mode) {
				if(this.mode == null) {
					m.addClass("m_tile");
				} else {
					m.addClass("m_create").addClass("c_" + HxOverrides.substr(this.mode,2,null));
				}
			} else {
				m.addClass("m_" + HxOverrides.substr(this.mode,2,null)).addClass("m_exists");
				var _g411 = tobj.t;
				switch(_g411) {
				case "border":
					var _g412 = [];
					var _g57 = 0;
					while(_g57 < grounds.length) {
						var g = grounds[_g57];
						++_g57;
						_g412.push("<option value=\"" + g + "\">" + g + "</option>");
					}
					var opts = _g412.join("");
					m.find("[name=border_in]").html("<option value='null'>upper</option><option value='lower'>lower</option>" + opts).val(Std.string(tobj.opts.borderIn));
					m.find("[name=border_out]").html("<option value='null'>lower</option><option value='upper'>upper</option>" + opts).val(Std.string(tobj.opts.borderOut));
					m.find("[name=border_mode]").val(Std.string(tobj.opts.borderMode));
					break;
				case "ground":
					var tmp4 = tobj.opts.name == null ? "" : tobj.opts.name;
					m.find("[name=name]").val(tmp4);
					m.find("[name=priority]").val("" + (tobj.opts.priority == null ? 0 : tobj.opts.priority));
					break;
				case "group":
					var tmp5 = tobj.opts.name == null ? "" : tobj.opts.name;
					m.find("[name=name]").val(tmp5);
					m.find("[name=value]").val(tobj.opts.value == null ? "" : JSON.stringify(tobj.opts.value)).width(80).width(m.parent().width() - 300);
					break;
				case "object":case "tile":
					break;
				}
			}
			m.show();
		}
	}
	,getProp: function() {
		if(this.mode == null || HxOverrides.substr(this.mode,0,2) == "t_" || this.currentLayer.tileProps == null) {
			return null;
		}
		var _g = 0;
		var _g1 = this.perTileProps;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.name == this.mode) {
				return c;
			}
		}
		return null;
	}
	,option: function(name,val) {
		if(this.p == null) {
			return false;
		}
		var m = cdb__$Data_TileMode_$Impl_$.ofString(this.mode == null ? "" : HxOverrides.substr(this.mode,2,null));
		var l = this.currentLayer;
		if(val != null) {
			val = StringTools.trim(val);
		}
		switch(name) {
		case "border_in":
			var s = l.getTileProp(m);
			if(s != null) {
				if(val == "null") {
					Reflect.deleteField(s.opts,"borderIn");
				} else {
					s.opts.borderIn = val;
				}
			}
			break;
		case "border_mode":
			var s1 = l.getTileProp(m);
			if(s1 != null) {
				if(val == "null") {
					Reflect.deleteField(s1.opts,"borderMode");
				} else {
					s1.opts.borderMode = val;
				}
			}
			break;
		case "border_out":
			var s2 = l.getTileProp(m);
			if(s2 != null) {
				if(val == "null") {
					Reflect.deleteField(s2.opts,"borderOut");
				} else {
					s2.opts.borderOut = val;
				}
			}
			break;
		case "mode":
			this.mode = val == "t_tile" ? null : val;
			this.modeCursor = 0;
			this.level.savePrefs();
			this.level.setCursor();
			break;
		case "name":
			var s3 = l.getTileProp(m);
			if(s3 != null) {
				s3.opts.name = val;
			}
			break;
		case "paint":
			this.paintMode = !this.paintMode;
			var _g = l.data;
			if(_g[1] == 3) {
				this.paintMode = false;
			}
			this.level.savePrefs();
			this.p.find(".icon.paint").toggleClass("active",this.paintMode);
			return false;
		case "priority":
			var s4 = l.getTileProp(m);
			if(s4 != null) {
				s4.opts.priority = Std.parseInt(val);
			}
			break;
		case "random":
			this.randomMode = !this.randomMode;
			var _g1 = l.data;
			if(_g1[1] == 3) {
				this.randomMode = false;
			}
			this.p.find(".icon.random").toggleClass("active",this.randomMode);
			this.level.savePrefs();
			this.level.setCursor();
			return false;
		case "small":
			this.small = !this.small;
			this.level.savePrefs();
			this.p.toggleClass("small",this.small);
			this.p.find(".icon.small").toggleClass("active",this.small);
			return false;
		case "toggleMode":
			var s5 = l.getTileProp(m);
			if(s5 == null) {
				s5 = { x : l.current % l.stride, y : l.current / l.stride | 0, w : l.currentWidth, h : l.currentHeight, t : m, opts : { }};
				l.tileProps.sets.push(s5);
			} else {
				HxOverrides.remove(l.tileProps.sets,s5);
			}
			this.level.setCursor();
			break;
		case "value":
			var p = this.getProp();
			if(p != null) {
				var t = this.getTileProp(l.current % l.stride,l.current / l.stride | 0);
				var v;
				var _g2 = p.type;
				switch(_g2[1]) {
				case 1:
					v = val;
					break;
				case 3:
					v = Std.parseInt(val);
					break;
				case 4:
					v = parseFloat(val);
					break;
				case 16:
					try {
						v = this.level.model.base.parseDynamic(val);
					} catch( e ) {
						var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
						v = null;
					}
					break;
				default:
					throw new js__$Boot_HaxeError("assert");
				}
				if(v == null) {
					Reflect.deleteField(t,p.name);
				} else {
					t[p.name] = v;
				}
				this.saveTileProps();
				return false;
			}
			var s6 = l.getTileProp(m);
			if(s6 != null) {
				var v1;
				if(val == null) {
					v1 = s6.opts.value;
				} else {
					try {
						v1 = this.level.model.base.parseDynamic(val);
					} catch( e2 ) {
						var e3 = (e2 instanceof js__$Boot_HaxeError) ? e2.val : e2;
						v1 = null;
					}
				}
				if(v1 == null) {
					Reflect.deleteField(s6.opts,"value");
				} else {
					s6.opts.value = v1;
				}
				this.p.find("[name=value]").val(v1 == null ? "" : JSON.stringify(v1));
			}
			break;
		}
		return true;
	}
	,__class__: lvl_Palette
};
var sys_FileSystem = function() { };
$hxClasses["sys.FileSystem"] = sys_FileSystem;
sys_FileSystem.__name__ = ["sys","FileSystem"];
sys_FileSystem.exists = function(path) {
	try {
		js_node_Fs.accessSync(path);
		return true;
	} catch( _ ) {
		var _1 = (_ instanceof js__$Boot_HaxeError) ? _.val : _;
		return false;
	}
};
var vdom_Answer = $hxClasses["vdom.Answer"] = { __ename__ : ["vdom","Answer"], __constructs__ : ["Event","SetValue","Done"] };
vdom_Answer.Event = function(eid,props) { var $x = ["Event",0,eid,props]; $x.__enum__ = vdom_Answer; $x.toString = $estr; return $x; };
vdom_Answer.SetValue = function(id,value) { var $x = ["SetValue",1,id,value]; $x.__enum__ = vdom_Answer; $x.toString = $estr; return $x; };
vdom_Answer.Done = function(eid) { var $x = ["Done",2,eid]; $x.__enum__ = vdom_Answer; $x.toString = $estr; return $x; };
var vdom_Message = $hxClasses["vdom.Message"] = { __ename__ : ["vdom","Message"], __constructs__ : ["Create","AddClass","RemoveClass","Append","InsertAt","CreateText","Reset","Remove","Event","SetAttr","SetStyle","Trigger","Special","Anim","Dispose","Unbind","Group","SetVal"] };
vdom_Message.Create = function(id,name,attr) { var $x = ["Create",0,id,name,attr]; $x.__enum__ = vdom_Message; $x.toString = $estr; return $x; };
vdom_Message.AddClass = function(id,name) { var $x = ["AddClass",1,id,name]; $x.__enum__ = vdom_Message; $x.toString = $estr; return $x; };
vdom_Message.RemoveClass = function(id,name) { var $x = ["RemoveClass",2,id,name]; $x.__enum__ = vdom_Message; $x.toString = $estr; return $x; };
vdom_Message.Append = function(id,to) { var $x = ["Append",3,id,to]; $x.__enum__ = vdom_Message; $x.toString = $estr; return $x; };
vdom_Message.InsertAt = function(id,to,pos) { var $x = ["InsertAt",4,id,to,pos]; $x.__enum__ = vdom_Message; $x.toString = $estr; return $x; };
vdom_Message.CreateText = function(id,text,pid) { var $x = ["CreateText",5,id,text,pid]; $x.__enum__ = vdom_Message; $x.toString = $estr; return $x; };
vdom_Message.Reset = function(id) { var $x = ["Reset",6,id]; $x.__enum__ = vdom_Message; $x.toString = $estr; return $x; };
vdom_Message.Remove = function(id) { var $x = ["Remove",7,id]; $x.__enum__ = vdom_Message; $x.toString = $estr; return $x; };
vdom_Message.Event = function(id,name,eid) { var $x = ["Event",8,id,name,eid]; $x.__enum__ = vdom_Message; $x.toString = $estr; return $x; };
vdom_Message.SetAttr = function(id,att,val) { var $x = ["SetAttr",9,id,att,val]; $x.__enum__ = vdom_Message; $x.toString = $estr; return $x; };
vdom_Message.SetStyle = function(id,st,val) { var $x = ["SetStyle",10,id,st,val]; $x.__enum__ = vdom_Message; $x.toString = $estr; return $x; };
vdom_Message.Trigger = function(id,name) { var $x = ["Trigger",11,id,name]; $x.__enum__ = vdom_Message; $x.toString = $estr; return $x; };
vdom_Message.Special = function(id,name,args,eid) { var $x = ["Special",12,id,name,args,eid]; $x.__enum__ = vdom_Message; $x.toString = $estr; return $x; };
vdom_Message.Anim = function(id,name,dur) { var $x = ["Anim",13,id,name,dur]; $x.__enum__ = vdom_Message; $x.toString = $estr; return $x; };
vdom_Message.Dispose = function(id,events) { var $x = ["Dispose",14,id,events]; $x.__enum__ = vdom_Message; $x.toString = $estr; return $x; };
vdom_Message.Unbind = function(events) { var $x = ["Unbind",15,events]; $x.__enum__ = vdom_Message; $x.toString = $estr; return $x; };
vdom_Message.Group = function(msg) { var $x = ["Group",16,msg]; $x.__enum__ = vdom_Message; $x.toString = $estr; return $x; };
vdom_Message.SetVal = function(id,value) { var $x = ["SetVal",17,id,value]; $x.__enum__ = vdom_Message; $x.toString = $estr; return $x; };
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$hxClasses["Math"] = Math;
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = ["String"];
$hxClasses["Array"] = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = ["Date"];
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_ds_ObjectMap.count = 0;
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
Level.UID = 0;
Level.loadedTilesCache = new haxe_ds_StringMap();
K.INSERT = 45;
K.DELETE = 46;
K.LEFT = 37;
K.UP = 38;
K.RIGHT = 39;
K.DOWN = 40;
K.ESC = 27;
K.TAB = 9;
K.SPACE = 32;
K.ENTER = 13;
K.F2 = 113;
K.F3 = 114;
K.F4 = 115;
K.NUMPAD_ADD = 107;
K.NUMPAD_SUB = 109;
K.NUMPAD_DIV = 111;
Main.UID = 0;
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
cdb__$Data_TileMode_$Impl_$.Tile = "tile";
cdb__$Data_TileMode_$Impl_$.Ground = "ground";
cdb__$Data_TileMode_$Impl_$.Border = "border";
cdb__$Data_TileMode_$Impl_$.Object = "object";
cdb__$Data_TileMode_$Impl_$.Group = "group";
haxe_Serializer.USE_CACHE = false;
haxe_Serializer.USE_ENUM_INDEX = false;
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	if(__map_reserved["lt"] != null) {
		h.setReserved("lt","<");
	} else {
		h.h["lt"] = "<";
	}
	if(__map_reserved["gt"] != null) {
		h.setReserved("gt",">");
	} else {
		h.h["gt"] = ">";
	}
	if(__map_reserved["amp"] != null) {
		h.setReserved("amp","&");
	} else {
		h.h["amp"] = "&";
	}
	if(__map_reserved["quot"] != null) {
		h.setReserved("quot","\"");
	} else {
		h.h["quot"] = "\"";
	}
	if(__map_reserved["apos"] != null) {
		h.setReserved("apos","'");
	} else {
		h.h["apos"] = "'";
	}
	$r = h;
	return $r;
}(this));
hxbit_Macros.IN_ENUM_SER = false;
hxbit_Serializer.UID = 0;
hxbit_Serializer.SEQ = 0;
hxbit_Serializer.SEQ_BITS = 8;
hxbit_Serializer.SEQ_MASK = 16777215;
hxbit_Serializer.CLASSES = [];
hxbit_Schema.__clid = hxbit_Serializer.registerClass(hxbit_Schema);
js_Boot.__toStr = ({ }).toString;
lvl_Image.cache = new haxe_ds_StringMap();
lvl_Image3D.CANVAS_SIZE = 2048;
lvl_Palette.colorPalette = [16711680,65280,16711935,65535,16776960,16777215,33023,65408,8388863,8453888,16711808,16744448];
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
